<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fourleaf Blog</title><link>https://zhujianghan.github.io/zjh-blog/</link><description>Recent content on Fourleaf Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 23 Dec 2024 15:06:00 +0800</lastBuildDate><atom:link href="https://zhujianghan.github.io/zjh-blog/index.xml" rel="self" type="application/rss+xml"/><item><title>gofrp (内网穿透) 的安装和使用</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/go-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 23 Dec 2024 15:06:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/go-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>文档地址
使用 gogrp 通过自定义域名访问内网的 Web 服务 1. 安装 分别在 client 和 server 下载便携版的可执行文件,
如 client 是 windows 系统, 则下载后的文件为
frpc.exe, frpc.toml, frps.exe, frps.toml, LICENSE, client 端只需要 frpc.exe 及 frpc.toml 即可
如 server 是 linux 系统, 则下载后的文件只需要 frps 及 frps.toml
2. 配置 # frps.toml 配置
bindPort = 7000
vhostHTTPPort = 8600 # 要设置 vhostHTTPPORT, 最后通过服务端的 ip:vhost端口 进行访问 # frpc.toml 配置
serverAddr = &amp;#34;xx.xx.xx.xx&amp;#34;
serverPort = 7000
[[proxies]]
name = &amp;#34;test-web&amp;#34;
type = &amp;#34;http&amp;#34;
localIP = &amp;#34;127.</description></item><item><title>linux 安装、配置 fail2ban 避免服务器恶意登录</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE-fail2ban-%E9%81%BF%E5%85%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%81%B6%E6%84%8F%E7%99%BB%E5%BD%95/</link><pubDate>Fri, 20 Dec 2024 17:43:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE-fail2ban-%E9%81%BF%E5%85%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%81%B6%E6%84%8F%E7%99%BB%E5%BD%95/</guid><description>详见 github: fail2ban
安装 fail2ban, 以 ubuntu 为例 apt update &amp;amp;&amp;amp; apt upgrade
apt install fail2ban
systemctl start fail2ban
systemctl enable fail2ban 配置 fail2ban fail2ban 分为 server 和 client
在 /etc/fail2ban/jail.d 中增加一个自定义 conf, 如 my-jail.conf (从 defaults-debian.conf 复制得到), 添加如下 sshd 配置 # my-jail.conf
[DEFAULT]
banaction = nftables
banaction_allports = nftables[type=allports]
backend = systemd
[sshd]
enabled = true
port = 2222
filter = sshd
maxretry = 3
bantime = 2592000 # 2592000second = 30day, -1 为永久封禁 重启 fail2ban sudo systemctl restart fail2ban #重启
sudo fail2ban-client status #查看状态
sudo fail2ban-client status sshd #查看sshd的详细状态 查看已禁用的ip fail2ban-client get sshd banned
fail2ban-client status sshd # 查看登录尝试记录
lastb # 显示显示失败的登录尝试
last # 与 lastb 类似，但显示的是所有登录尝试，包括成功的登录</description></item><item><title>goaccess export nginx access log to report</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/goaccess-export-nginx-access-log-to-report/</link><pubDate>Fri, 20 Dec 2024 10:47:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/goaccess-export-nginx-access-log-to-report/</guid><description>使用 goaccess 将 nginx access.log 生成可视化 report.html goaccess github地址
nginx access.log 过滤 # 过滤不统计的日志(如图片、js、css、恶意访问的 login、404 等) cat access.log | grep -vE &amp;#39;(\.css|\.js|\.jpg|\.png|\.gif|\.ico|\.jfif|\.woff|\.woff2|\.eot|\.ttf|\.svg|\.map|bot|Bot|favicon|404|curl|Java|scaninfo|phpMyAdmin|\.env|admin|login|python|http\-client|wp\-|post|POST|\.php|api|ajax|ads\.txt|humans\.txt|well\-known|security\.txt|CONNECT|Head)&amp;#39; &amp;gt; new.log # 只统计 GET 请求 cat new.log | grep &amp;#39;GET&amp;#39; &amp;gt; new2.log # 只统计 GET 首页的请求 cat new2.log | grep &amp;#39;GET /&amp;#39; &amp;gt; new3.log goaccess 操作步骤 linux 环境(编译/包管理器)安装 goaccess, 编译安装注意要 --enable-utf8 --enable-geoip=mmdb /etc/goaccess/goaccess.conf 配置 ## 2.1 打开 nginx time-format, date-format, log-format # Apache/NGINX&amp;#39;s log formats below. time-format %H:%M:%S # Apache/NGINX&amp;#39;s log formats below.</description></item><item><title>Prisma Migrate after Deployment</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/prisma-migrate-after-deployment/</link><pubDate>Fri, 20 Dec 2024 10:35:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/prisma-migrate-after-deployment/</guid><description>Prisma Migrate after Deployment 背景: 线上环境部署后，数据库表结构有变更，但未同步到线上数据库中，导致线上环境也需要更新 数据库 &amp;amp; prismaClient。
操作步骤 开发环境 修改 scheme.prisma, 如给 user 添加 age 字段 开发环境 执行 npx prisma migrate dev --name add-age-to-user, 这里要 &amp;ndash;name 指定生成的迁移文件(夹)名称, 这里也会同时生成新的 /nodemodules/.prisma/client/* 文件, 不需要再次 npx prisma generate 更新 prismaClient 开发环境 执行 npx prisma migrate deploy 变更数据库表结构 生产环境 pull 到最新的 scheme.prisma 及 migration 文件 生产环境 执行 npx prisma generate 生成新的 /nodemodules/.prisma/client/* 文件 生产环境 执行 npx prisma migrate deploy 同步最新的数据库表结构 (不改变原有数据)</description></item><item><title>Window常用工具软件</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/window%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/</link><pubDate>Thu, 16 May 2024 13:45:58 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/window%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/</guid><description> Listary, 双击ctrl 文件查找 Everything, 全局文件查找 Wiztree, 全局文件大小查看 WGestures, 鼠标手势 Snipaste, 截图、贴图 FastStone, 截图、录屏</description></item><item><title>Centos磁盘查看</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/centos%E7%A3%81%E7%9B%98%E6%9F%A5%E7%9C%8B/</link><pubDate>Wed, 15 May 2024 10:39:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/centos%E7%A3%81%E7%9B%98%E6%9F%A5%E7%9C%8B/</guid><description>记一次服务器负载过高导致web访问变慢 阿里云监控 在阿里云监控平台发现内存占用 75%以上, cpu在 50%左右,
检查系统负载 uptime, 分别显示一段时间的平均系统负载, 1分钟, 5分钟, 15分钟
检查内存 free -h
检查 cpu 服务器查看 top 都卡, 后查看 pm2, 发现一个实例就占用了 1G+内存, pm2 reload 1 实现重启, 内存占用到 200M
ps: ssh界面 如果宽度不够长, pm2 ls 只会显示部分列, 要查看更多(如 uptime 等), 需拉长或全屏终端.
检查磁盘 df -h 查看总占用 cd / &amp;amp;&amp;amp; du -ah &amp;ndash;max-depth=1 | sort -rh 查看根目录下文件夹占用 进去某个文件夹, du -ah &amp;ndash;max-depth=1 | sort -rh 查看文件夹占用 nginx access.log 过大, echo -n '' &amp;gt; access.log 清空文件</description></item><item><title>Fix Failed to Verify Certificate X509</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/fix-failed-to-verify-certificate-x509/</link><pubDate>Thu, 18 Apr 2024 09:51:40 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/fix-failed-to-verify-certificate-x509/</guid><description>修复 &amp;ldquo;Failed to Verify Certificate X509&amp;rdquo; 问题 问题出现背景 linux 环境下在 go 中用一个函数获取 https 证书有效期, 在查询一个由 freessl cname 申请的证书后, 发现报错
Errortls: failed to verify certificate: x509: certificate signed by unknown authority 而在 windows 环境又正常, 遂在 linux 中使用 curl https://xxx.com 得到
curl: (60) Peer&amp;#39;s Certificate issuer is not recognized. More details here: http://curl.haxx.se/docs/sslcerts.html package pkg import ( &amp;#34;crypto/tls&amp;#34; &amp;#34;errors&amp;#34; &amp;#34;time&amp;#34; ) func WillExpireIn7Days(hostname string) (bool, time.Time, error) { conn, err := tls.Dial(&amp;#34;tcp&amp;#34;, hostname+&amp;#34;:443&amp;#34;, nil) if err !</description></item><item><title>Line Breaks for Strings on Canvas</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/line-breaks-for-strings-on-canvas/</link><pubDate>Fri, 10 Nov 2023 09:20:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/line-breaks-for-strings-on-canvas/</guid><description>canvas 绘制文本时, 换行如何解决 背景 微信小程序中使用 canvas 绘制分享海报长文本不能自动换行
题外: Taro 小程序中 canvas 的宽高设置
// poster.jsx export default () =&amp;gt; { useLoad(() =&amp;gt; { ... const dpr = Taro.getWindowInfo().pixelRatio // canvas对象 通过 createSelectorQuery 获取 canvas.width = renderWidth * dpr canvas.height = renderHeight * dpr ctx.scale(dpr, dpr) ... }) return ( ... &amp;lt;Canvas id=&amp;#39;poster&amp;#39; type=&amp;#39;2d&amp;#39; style=&amp;#39;width:320px;height:400px&amp;#39; /&amp;gt; ... ) } 思路 对于纯中文, 不用考虑单词被分到两行
先将文本按每个 字符 分成数组 按 canvas 的 measureText 方法调整一行的宽度(字体大小不同, 宽度不同), 获取每一行应该出现的文本 分行按高度输出 对于纯英文, 要考虑单词被分到两行</description></item><item><title>Go File Server</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/go-file-server/</link><pubDate>Tue, 10 Oct 2023 14:36:51 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/go-file-server/</guid><description>使用 go 内置 http 快速开启文件服务器 func main() { // 方式1 // http.ListenAndServe(&amp;#34;:8080&amp;#34;, http.FileServer(http.Dir(&amp;#34;./public&amp;#34;))) // 方式2: 可自动生成对应文件列表页面 fs := http.FileServer(http.Dir(&amp;#34;public&amp;#34;)) // http.Handle(&amp;#34;/public/&amp;#34;, http.StripPrefix(&amp;#34;/public/&amp;#34;, fs)) // http.Handle(&amp;#34;/&amp;#34;, http.StripPrefix(&amp;#34;/public/&amp;#34;, fs)) http.Handle(&amp;#34;/&amp;#34;, fs) http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) }</description></item><item><title>Upgrade Nodejs by Yum on Centos</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/upgrade-nodejs-by-yum-on-centos/</link><pubDate>Tue, 20 Jun 2023 09:51:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/upgrade-nodejs-by-yum-on-centos/</guid><description>centos7.9 yum 升级 nodejs(14-&amp;gt;16) 步骤 首先确定当前 nodejs 是由 yum 安装的 $ yum list installed | grep nodejs # nodejs.x86_64 2:12.22.12-1nodesource @nodesource 删除当前 nodejs 版本 (https://github.com/nodesource/distributions) yum remove nodejs rm -r /etc/yum.repos.d/nodesource*.repo yum clean all 添加 nodejs16 源 $ curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash - 安装 nodejs $ sudo yum install -y nodejs $ node -v $ npm -v</description></item><item><title>Sql Count With Condition</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/sql-count-with-condition/</link><pubDate>Wed, 14 Jun 2023 14:03:32 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/sql-count-with-condition/</guid><description>多表 left join 后, 使用 count 查询需要使用 distinct, 如果 count 里需要再次添加条件, 使用 distinct if(&amp;hellip;)
# 不做聚合查询 select company.id as company_id, company.name as company_name, vacancy.id as vacancy_id, vacancy.name as vacancy_name, shop.id as shop_id, shop.shop_name as shop_name, course.id as course_id, course.title as course_name from tb_company company left join tb_position vacancy on vacancy.company_id = company.id left join tb_shop shop on shop.company_id = company.id left join tb_shop_curriculum course on course.shop_id = shop.id where (vacancy.</description></item><item><title>Line Clamp 展开问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/line-clamp-%E5%B1%95%E5%BC%80%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 09 Jun 2023 11:43:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/line-clamp-%E5%B1%95%E5%BC%80%E9%97%AE%E9%A2%98/</guid><description>要求: 多行文本时, 显示可展开按钮, 如果小于指定行数则无需显示 通过 line-clamp 设置行数 通过里外 div 的高度来初始化是否需要 &amp;ldquo;展开&amp;rdquo; 按钮 &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .contentBox { margin: 20px 0; border: 1px solid #666; width: 200px; } input { display: none; } .outer { overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 5; } input[name=&amp;#34;toggle&amp;#34;]:checked + .outer { -webkit-line-clamp: unset; } input[name=&amp;#34;toggle&amp;#34;]:checked + div.outer + label::after { content: &amp;#39;收起&amp;#39;; } label::after { content: &amp;#39;更多&amp;#39;; } label { display: none; background: #aaa; padding: 1px 2px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;button onclick=&amp;#34;setLine(&amp;#39;&amp;lt;3&amp;#39;)&amp;#34;&amp;gt;文本长度 &amp;lt; 3 行&amp;lt;/button&amp;gt; &amp;lt;button onclick=&amp;#34;setLine(&amp;#39;=3&amp;#39;)&amp;#34;&amp;gt;文本长度 = 3 行&amp;lt;/button&amp;gt; &amp;lt;button onclick=&amp;#34;setLine(&amp;#39;&amp;gt;3&amp;#39;)&amp;#34;&amp;gt;文本长度 &amp;gt; 3行&amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;contentBox&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;toggle&amp;#34; name=&amp;#34;toggle&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;outer&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;inner&amp;#34;&amp;gt; -webkit-line-clamp CSS 属性可以把块容器中的内容限制为指定的行数。 &amp;lt;br&amp;gt; 它只有在 display 属性设置成 -webkit-box 或者 -webkit-inline-box 并且 box-orient 属性设置成 vertical时才有效果。 &amp;lt;br&amp;gt; 在大部分情况下，也需要设置 overflow 属性为 hidden，否则，里面的内容不会被裁减，并且在内容显示为指定行数后还会显示省略号。 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;label for=&amp;#34;toggle&amp;#34;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; function displayLabel() { if (document.</description></item><item><title>Nginx__config Proxy_pass</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/nginx_config-proxy_pass/</link><pubDate>Fri, 10 Feb 2023 15:06:45 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/nginx_config-proxy_pass/</guid><description>参考简书: nginx 之 proxy_pass 详解
nginx conf 之 proxy_pass 使用背景 vue3 项目调用后台接口时, 不希望将后端接口地址(host地址) 暴露给普通用户, 并且直接解决浏览器跨域问题, 会使用 nginx 对接口地址作代码, 表面上访问前端 vue 项目的接口地址, 实际上会通过代码转发到真正的后端服务地址
vue3+vite 开发环境在 vite.config.js 配置代理 // vite.config.js export defaut defineConfig({ ... server: { proxy: { &amp;#39;/api&amp;#39;: { target: &amp;#39;http://backend.test/api&amp;#39;, changeOrigin: true, rewrite: (path) =&amp;gt; path.replace(/^\/api/, &amp;#39;&amp;#39;) } } } ... }) nginx conf 生产环境 按要代理的地址最后是否带 &amp;lsquo;/&amp;rsquo;,及是否有 子目录分为 2 种情况, 每种情况按是否有子目录又可再细分为 2 种情况
有 &amp;lsquo;/&amp;rsquo; 表示绝对路径, 不带 location;
没有表示相对路径, 要带上 location 后的路径</description></item><item><title>Apache_bench_in_go__hey</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/apache_bench_in_go__hey/</link><pubDate>Wed, 01 Feb 2023 10:04:05 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/apache_bench_in_go__hey/</guid><description>使用 hey 代替 ab 对网站应用做性能测试 (服务器配置) https://github.com/rakyll/hey
hey is a tiny program that sends some load to a web application.
二八定律: 80% 的请求(访问)集中在 20% 的时间内
假设一个网站每日 pv (page visit) 300w,
也就是 300w*80% &amp;lt;=&amp;gt; 3600*24*20%, 240w pv 在 17280s 内, 240*10000/17280 = 138 QPS (query per second)
如果单台机器支持的 QPS 在 50, 那么需要 3 台这样的机器才能满足需求
## hey 执行结果示例 $ hey http://localhost:8080/api/tmp Summary: Total: 0.1239 secs Slowest: 0.0961 secs Fastest: 0.0006 secs Average: 0.</description></item><item><title>Docker Build Development Environment of Tarojs</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/docker-build-development-environment-of-tarojs/</link><pubDate>Fri, 28 Oct 2022 14:43:36 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/docker-build-development-environment-of-tarojs/</guid><description>// 目录结构 |-- project folder | |-- xxx | |-- yyy | |-- zzz | |-- ... | |-- docker-files | | Dockerfile | | docker-compose.yml // Dockerfile # syntax=docker/dockerfile:1 FROM node:16-alpine RUN \ npm config set registry http://registry.npmmirror.com \ &amp;amp;&amp;amp; npm install -g @tarojs/cli RUN mkdir -p /var/www WORKDIR /var/www // docker-compose.yml version: &amp;#39;3.7&amp;#39; networks: frontend: driver: bridge services: ### Taro ############################################## taro: container_name: taro restart: always build: context: .</description></item><item><title>vmware-共享文件夹设置</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/vmware-share-folder/</link><pubDate>Thu, 27 Oct 2022 10:01:10 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/vmware-share-folder/</guid><description>虚拟机关机状态下, vmware中 设置-选项-共享文件夹 添加要共享的文件夹 虚拟机开机, vmware中 虚拟机-安装VMware-Tools 虚拟机中安装 open-vm-tools-desktop (has gui) 或 open-vm-tools (no gui) 虚拟机中执行 /usr/bin/vmhgfs-fuse .host:/ /home/user1/shares -o subtype=vmhgfs-fuse,allow_other 挂载共享文件夹, ubuntu 提示 allow_user 需要其它设置, 则删除 &amp;lsquo;,allow_other&amp;rsquo; 即可 open-vm-tools 安装参考官方文档
文件夹挂载 参考文档
参考csdn: vmware 挂载共享文件夹</description></item><item><title>Exercise_go_unit_test_是否回文</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/exercise_go_unit_test_palindrome/</link><pubDate>Fri, 09 Sep 2022 17:25:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/exercise_go_unit_test_palindrome/</guid><description>编写一个回文检测函数，并为其编写单元测试和基准测试，根据测试的结果逐步对其进行优化。（回文：一个字符串正序和逆序一样，如“Madam,I’mAdam”、“油灯少灯油”等。） 来源:李文周blog
tip: 要考虑中文则使用 rune
// palindrome/palindrome.go package palindrome func IsPalindrome(s string) bool { // 转成 rune, 应对中文等特殊字符 r := []rune(s) l := len(r) for i := 0; i &amp;lt; l/2; i++ { if r[i] != r[l-1-i] { return false } } return true } // palindrome/palindrome_test.go package palindrome import ( &amp;#34;fmt&amp;#34; &amp;#34;testing&amp;#34; ) func TestIsPalindrome(t *testing.T) { type test struct { text string want bool } arr := []test{ {&amp;#34;&amp;#34;, true}, {&amp;#34;a&amp;#34;, true}, {&amp;#34;aa&amp;#34;, true}, {&amp;#34;ab&amp;#34;, false}, {&amp;#34;aba&amp;#34;, true}, {&amp;#34;abcba&amp;#34;, true}, {&amp;#34;abccba&amp;#34;, true}, {&amp;#34;abcdabcd&amp;#34;, false}, {&amp;#34;Madam,I’mAdam&amp;#34;, false}, {&amp;#34;油灯少灯油&amp;#34;, true}, } for _, tc := range arr { t.</description></item><item><title>TCP/IP 模型</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/tcp_ip_model/</link><pubDate>Fri, 09 Sep 2022 11:12:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/tcp_ip_model/</guid><description>TCP/IP 模型分层 DOD: The Department of Defense, 美国国防部模型 OSI: Open Systems Interconnection, 国际标准化组织提供 DOD四层模型 OSI七层模型 备注 应用层 应用层 http,smtp,ftp&amp;hellip; 表示层 会话层 传输层 传输层 tcp,udp&amp;hellip;,端口 网络层 网络层 ip,arp 网络接口层 数据链路层 帧,mac地址 物理层 0,1 Socket(套接字) Socket是BSD UNIX的进程通信机制，通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄。Socket可以理解为TCP/IP网络的API，它定义了许多函数或例程，程序员可以用它们来开发TCP/IP网络上的应用程序。电脑上运行的应用程序通常通过”套接字”向网络发出请求或者应答网络请求。
socket 抽象层, 是对 tcp/ip 的封装
TCP&amp;hellip; UDP&amp;hellip;</description></item><item><title>Goroutine 练习题</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/goroutine_exercise/</link><pubDate>Wed, 07 Sep 2022 14:50:29 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/goroutine_exercise/</guid><description>题目: 使用 goroutine 和 channel 实现一个计算int64随机数各位数和的程序，例如生成随机数61345，计算其每个位数上的数字之和为19。 开启一个 goroutine 循环生成int64类型的随机数，发送到 jobChan 开启24个 goroutine 从jobChan中取出随机数计算各位数的和，将结果发送到resultChan 主 goroutine 从resultChan取出结果并打印到终端输出 题目来源: 李文周blog
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;runtime&amp;#34; &amp;#34;time&amp;#34; ) func main() { numChan := make(chan int, 24) resChan := make(chan int) for i := 0; i &amp;lt; 24; i++ { go func() { for num := range numChan { if check19(num) { resChan &amp;lt;- num break } } }() } FOR: for { select { case res := &amp;lt;-resChan: fmt.</description></item><item><title>Go | for...range 中 value 的地址</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/go_pointer_of_value_in_for_range/</link><pubDate>Wed, 31 Aug 2022 11:20:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/go_pointer_of_value_in_for_range/</guid><description>nums := []int{1, 2, 3} for i := 0; i &amp;lt; len(nums); i++ { fmt.Printf(&amp;#34;%p \n&amp;#34;, &amp;amp;nums[i]) } for index, num := range nums { fmt.Printf(&amp;#34;%p %p \n&amp;#34;, &amp;amp;nums[index], &amp;amp;num) } // 0xc00000c150 // 0xc00000c158 // 0xc00000c160 // 0xc0000180e0 0xc00000c150 // 0xc0000180e0 0xc00000c158 // 0xc0000180e0 0xc00000c160 由上可知, 有 for range 遍历中, value 的地址是固定的, 相当于初始化一个变量, 之后每次遍历会把 value 值赋值给该变量
题目: 请问下面代码的执行结果是什么？ 题目来源: liwenzhou-blog go语言基础之结构体
type student struct { name string age int } func main() { m := make(map[string]*student) stus := []student{ {name: &amp;#34;小王子&amp;#34;, age: 18}, {name: &amp;#34;娜扎&amp;#34;, age: 23}, {name: &amp;#34;大王八&amp;#34;, age: 9000}, } for _, stu := range stus { m[stu.</description></item><item><title>Go 中 make 与 new 的区别</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/go_difference_between_new_and_make/</link><pubDate>Wed, 31 Aug 2022 09:01:20 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/go_difference_between_new_and_make/</guid><description>背景: 在 go 中, 基本类型的变量, 在使用var定义变量, 但是初始化值时, 系统会默认赋初始值, 如 string =&amp;gt; &amp;ldquo;&amp;quot;(空字符串), int =&amp;gt; 0, bool =&amp;gt; false, 如果是 struct, 也会按 field 的类型(要求 field 的类型也为基本类型)进行初始化
对于 slice, map, channel 这三种类型, 使用 var 定义类型后, 其值为 nil, 不占内存, 所以需要先分配内存, 不能只定义类型后就直接赋值
// map 初始化 map1 := make(map[string]string) // 推荐 map2 := map[string]string{} fmt.Printf(&amp;#34;%#v\n&amp;#34;, map1) fmt.Printf(&amp;#34;%#v\n&amp;#34;, map2) // slice 初始化 slice1 := make([]int, 0) slice1 = append(slice1, 1) var slice2 []int slice2 = append(slice2, 1) slice3 := []int{} // 不推荐 slice3 = append(slice3, 1) fmt.</description></item><item><title>Go Defer Return 题 - 李文周</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/go_defer_return_%E9%A2%98%E6%9D%8E%E6%96%87%E5%91%A8/</link><pubDate>Tue, 30 Aug 2022 15:14:25 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/go_defer_return_%E9%A2%98%E6%9D%8E%E6%96%87%E5%91%A8/</guid><description>题1: 阅读下面的代码，写出最后的打印结果 来源: 李文周blog - go语言基础之函数
return res 底层实现:
返回值 = x, 如果函数中已定义返回变量名, 则该返回变量 = x 执行返回 遇到 defer 时 return res 底层实现
返回值 = x. 如果函数中已定义返回变量名, 则该返回变量 = x; 如果函数中未指定返回变量名, 则假定返回变量名为 returnValue, 也就有 returnValue = x 执行 defer 的函数 执行 返回 func f1() int { x := 5 defer func() { x++ }() return x } func f2() (x int) { defer func() { x++ }() return 5 } func f3() (y int) { x := 5 defer func() { x++ }() return x } func f4() (x int) { defer func(x int) { x++ }(x) return 5 } func main() { fmt.</description></item><item><title>Go slice 底层数组题</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/go_slice_%E5%BA%95%E5%B1%82%E6%95%B0%E7%BB%84%E9%A2%98/</link><pubDate>Tue, 30 Aug 2022 11:25:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/go_slice_%E5%BA%95%E5%B1%82%E6%95%B0%E7%BB%84%E9%A2%98/</guid><description>请写出下面代码的输出结果 ⭐⭐⭐⭐
func main() { type Map map[string][]int m := make(Map) s := []int{1, 2} s = append(s, 3) fmt.Printf(&amp;#34;%+v\n&amp;#34;, s) m[&amp;#34;q1mi&amp;#34;] = s s = append(s[:1], s[2:]...) fmt.Printf(&amp;#34;%+v\n&amp;#34;, s) fmt.Printf(&amp;#34;%+v\n&amp;#34;, m[&amp;#34;q1mi&amp;#34;]) } 问题简化为
s := []int{1, 2, 3} s2 := s fmt.Println(s, s2) s = append(s[:1], s[2:]...) fmt.Println(s, s2) 点击查看 result:
[1 2 3] [1 2 3]
[1 3] [1 3 3]</description></item><item><title>Go slice 写出代码的运行结果</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/go_slice_%E5%86%99%E5%87%BA%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C/</link><pubDate>Mon, 29 Aug 2022 16:34:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/go_slice_%E5%86%99%E5%87%BA%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C/</guid><description>请写出下面代码的输出结果 func main() { var a = make([]string, 5, 10) for i := 0; i &amp;lt; 10; i++ { a = append(a, fmt.Sprintf(&amp;#34;%v&amp;#34;, i)) } fmt.Println(a) } 点击查看 make 后 a 已经初始化为 []string{&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;}
之后再 append, 会添加到后面 []string{&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;4&amp;rdquo;,&amp;ldquo;5&amp;rdquo;,&amp;ldquo;6&amp;rdquo;,&amp;ldquo;7&amp;rdquo;,&amp;ldquo;8&amp;rdquo;,9&amp;quot;}</description></item><item><title>Find the only number in a list</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/find_the_only_number_in_a_list/</link><pubDate>Mon, 29 Aug 2022 10:12:23 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/find_the_only_number_in_a_list/</guid><description>题: 有一堆数字，如果除了一个数字以外，其他数字都出现了两次，那么如何找到出现一次的数字？ 来源: 李文周 Go语言基础之运算符
利用 ^ 二进位异或 运算符
func findTheOnlyNumber(nums []int) (res int) { for index, num := range nums { if index == 0 { res = num } else { res = res ^ num } } return }</description></item><item><title>Number of Chinese in a String</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/number-of-chinese-in-a-string/</link><pubDate>Fri, 26 Aug 2022 16:18:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/number-of-chinese-in-a-string/</guid><description>题目: 编写代码统计出字符串&amp;quot;hello沙河小王子&amp;quot;中汉字的数量 题目来源: 李文周blog: Go语言基础之基本数据类型
tips:
字符串用 for 遍历, str[i] 的值是 byte(uint8) 类型, 且下标 i 是连续的, 从 0 到 len(str) 字符串用 for range 遍历, index,value 的值是 rune(int32) 类型, 下标不一定是连续的, 碰到中文只会出现中文的首下标, 然后跳到下一个 rune 字符 func getChineseCharNumInAString(str string) (num int) { for i, r := range str { if byte(r) == str[i] { continue } num++ } return num }</description></item><item><title>Linux Crontab Pwd</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-crontab-pwd/</link><pubDate>Fri, 26 Aug 2022 10:08:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-crontab-pwd/</guid><description>背景: 使用 crontab -e 添加定时任务后, 发现任务没有如希望的执行, 发现要执行的命令是使用了相对路径引入文件, 推测是文件路径不正常
在 linux 中 root 用户执行命令 crotab -e 添加任务获取当前工作目录
* * * * * pwd &amp;gt;&amp;gt; ~/tmp.txt 2&amp;gt;&amp;amp;1 之后生成一新用户
# root 用户 # -m 生成用户同名 home 目录 useradd -m test passwd test # test 用户 同样新增获取 pwd 输出到其 home 目录的任务 crontab -e 经过执行发现,
在 /root/tmp.txt 文件中 pwd 输出为 /root
在 /home/test/tmp.txt 文件中 pwd 输出为 /home/test
&amp;ldquo;The cron daemon starts a subshell from your HOME directory&amp;rdquo; 参考文档</description></item><item><title>Jquery Fill Vue Input</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-fill-vue-input/</link><pubDate>Thu, 28 Jul 2022 09:10:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-fill-vue-input/</guid><description>想要使用 Jquery 写油猴脚本自动填充网页中的 input 框时, 使用 jquery 操作如下
&amp;lt;form&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; $(&amp;#39;input:eq(0)&amp;#39;).val(&amp;#39;myname&amp;#39;) // eq 用于特定第几个 input $(&amp;#39;input:eq(1)&amp;#39;).val(&amp;#39;mypassword&amp;#39;) 但如果目标网页是由 Vue(React) 编写的, 那么此种方法并不能改变框架内的 v-model 的值, 原因是 Vue 监听的是 input 元素的 input 事件, 而直接使用 jquery(vanilla js) 修改 input 元素的值并不会触发 input 事件,
解决办法是修改值后, 手动触发 input 事件
$(&amp;#39;input:eq(0)&amp;#39;)[0].dispatchEvent(new Event(&amp;#39;input&amp;#39;), {bubbles: true})</description></item><item><title>Jetbrains Word Separator</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/jetbrains-word-separator/</link><pubDate>Thu, 28 Jul 2022 09:02:56 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/jetbrains-word-separator/</guid><description> jetbrains 设置待定&amp;hellip; vscode 中 文件-首选项-设置, 搜索 editor.wordSeparators 进行设置</description></item><item><title>Js Data Types</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-data-types/</link><pubDate>Thu, 14 Jul 2022 10:51:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-data-types/</guid><description> flowchart TD L1([JS 数据类型]) L1-->L21(基本类型 数值类型) L1-->L22(对象类型 引用类型) L21-->L301(字符串) L21-->L302(数字) L21-->L303(布尔) L21-->L304(undefined) L21-->L305(null) L22-->L311(对象) L22-->L312(数组) L22-->L313(函数) flowchart TD L1([JS 数据类型判断方法]) L1-->L21(typeof) L1-->L22(instanceof) L1-->L23("===") L21--可以判断-->L311(字符串
数字
布尔
undefined
function) L21--不可以判断-->L312(null Vs Object
Object Vs Array) L22-->L321(对象的具体类型) L23-->L33(null, undefined)</description></item><item><title>一台机器内ssh连接两个github账号</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/two-github-account-in-one-pc/</link><pubDate>Thu, 30 Jun 2022 15:11:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/two-github-account-in-one-pc/</guid><description>问题: 如何在一台机器连接两个github账号 step1 生成两个 id_rsa 文件 一台机器使用 ssh 连接到 github 需要用到本地的 id_rsa.pub 文件, 一般在 /users/.ssh 文件夹内, 如果没有 id_rsa 文件, 则使用如下命令生成, 然后把这个 key 复制到 github 中
ssh-keygen -t ed25519 -C &amp;#34;your_email@example.com&amp;#34; 如果直接把 ssh key 复制到另一个 github 账号, 会提示 key 已被使用, 那么需要另外再生成一个 key, 使用 -f 命令指定生成的文件名
ssh-keygen -t ed25519 -C &amp;#34;your_email@example.com&amp;#34; -f &amp;#34;id_rsa2&amp;#34; step2 配置 github 使用不同的 id_rsa 在 .ssh 文件夹内新建 config 文件
# 该文件用于配置私钥对应的服务器 # Default github user(first@mail.com) Host github.com HostName github.</description></item><item><title>Buffer-String()-和-Buffer-String()</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/buffer-string-%E5%92%8C-buffer-string/</link><pubDate>Thu, 16 Jun 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/buffer-string-%E5%92%8C-buffer-string/</guid><description>b1 := bytes.Buffer{} // 非指针 b2 := bytes.NewBuffer([]byte{}) // 指针 b3 := &amp;amp;bytes.Buffer{} // 指针, 等同于 b2 b1.WriteString(&amp;#34;abc&amp;#34;) b2.WriteString(&amp;#34;abc&amp;#34;) fmt.Println(b1) // {[97 98 99] 0 0} fmt.Println(b1.String()) // abc fmt.Println(b2) // abc 原因: *Buffer 有方法 String(), Buffer 没有 String() 方法.
fmt.Println(b1), 就是 fmt 将 b1 按普通结构体进行输出: 分别输出各项 fmt.Println(b1.String()), 调用了 *Buffer 的 String() 方法 fmt.Println(b2), 自动调用 *Buffer 的 String() 方法 参考自 stackoverflow</description></item><item><title>windows10-解除文件占用</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/windows10-%E8%A7%A3%E9%99%A4%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8/</link><pubDate>Wed, 08 Jun 2022 11:14:48 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/windows10-%E8%A7%A3%E9%99%A4%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8/</guid><description>win10 使用 powershell 删除文件夹 rm -r -fo ./dirname, 不能使用 rm -rf ./dirname 参考知乎 Powershell 中的 rm -rf
任务管理器 -&amp;gt; 性能 -&amp;gt; 打开资源监视器 -&amp;gt; cpu -&amp;gt; 关联的句柄 -&amp;gt; 搜索句柄 参考百度经验强制解除文件占用</description></item><item><title>gin-middleware-注意事项</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/gin-middleware-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link><pubDate>Tue, 07 Jun 2022 14:49:09 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/gin-middleware-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid><description>1. gin middleware 如果要中止后面中间件及所有程序的执行, 需要使用 c.Abort() + return 其中 Abort 会中止其后的中间件及页面处理程序, 而不会中止当前中间件函数内的余下程序, 使用 return 来中止当前中间件内后部的程序 func RejectMethodsExceptGet() gin.HandlerFunc { rejectMethods := map[string]struct{}{ &amp;#34;POST&amp;#34;: {}, &amp;#34;DELETE&amp;#34;: {}, &amp;#34;PUT&amp;#34;: {}, &amp;#34;PATCH&amp;#34;: {}, } return func(c *gin.Context) { if _, exist := rejectMethods[c.Request.Method]; exist { c.AbortWithStatusJSON(403, gin.H{ &amp;#34;err_msg&amp;#34;: &amp;#34;invalid method&amp;#34;, }) return } c.Next() } } 2. 中间件 Use 需要写在路由注册之前, 否则将不对之前注册的路由起作用 r := gin.New() r.Use(RejectMethodsExceptGet()) r.GET(&amp;#34;/test&amp;#34;, func(c *gin.Context) { example := c.MustGet(&amp;#34;example&amp;#34;).(string) // it would print: &amp;#34;12345&amp;#34; log.</description></item><item><title>go-routine-使用外部变量问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/go-routine-%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 26 Apr 2022 10:28:36 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/go-routine-%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/</guid><description>for i := 0; i &amp;lt; 10; i++ { go func() { fmt.Println(i) } } time.Sleep(time.Second) // 10,10,10,10,... 使用 go vet 检查
// 修改 for i := 0; i &amp;lt; 10; i++ { go func() { i2 := i fmt.Println(i2) } } // 或者(推荐) for i := 0; i &amp;lt; 10; i++ { go func(i int) { fmt.Println(i) }(i) } time.Sleep(time.Second) 参考 https://www.jianshu.com/p/e5f328819d4b</description></item><item><title>查看本机-ip</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA-ip/</link><pubDate>Sun, 24 Apr 2022 12:59:47 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA-ip/</guid><description> hostname -I ip addr ifconfig, // 需要已安装 net-tools</description></item><item><title>$_ENV-&amp;-getenv()</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/_env--getenv/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/_env--getenv/</guid><description>php 中 $_ENV &amp;amp; getenv() 获取的是环境变量, 如 windows 中 高级系统设置中的环境变量 或 linux 中 export 设置
getenv() 或 $_ENV 获取的是(系统)环境变量, 而不是 .env 文件.
在默认variables_order = &amp;quot;GPCS&amp;quot; 时, laravel 中使用 $_ENV 不能获取到(系统)环境变量, 但是可以获取到 .env 中的变量, 是因为 laravel 在初始化时使用 phpdotenv 将 .env 中的值添加到 $_ENV 中了.
另外 laravel 中 getenv() 本来就可以获取到(系统)环境变量, 也可以获取到 .env 文件中的设置的环境变量, 是因为 laravel(phpdotenv) 用 putenv() 设置了请求期间内有效的环境变量.
ini_set() 配置可修改范围 参考php手册 laravel 初始化 dotenv 参考文章 Laravel ENV—— 环境变量的加载与源码解析</description></item><item><title>02-线性表</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/02-%E7%BA%BF%E6%80%A7%E8%A1%A8/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/02-%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid><description>Chrome 插件使用说明 打开 Google Chrome 浏览器
地址栏输入 &amp;ldquo;chrome://extensions&amp;rdquo; 打开扩展程序页面
点击「加载已解压的扩展程序」加载扩展程序
enable 该扩展程序 打开对应网站即可使用</description></item><item><title>2020-09-16</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/2020-09-16/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/2020-09-16/</guid><description/></item><item><title>acme-sh-自动申请-ssl-证书</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/acme-sh-%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7-ssl-%E8%AF%81%E4%B9%A6/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/acme-sh-%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7-ssl-%E8%AF%81%E4%B9%A6/</guid><description>/root/.acme.sh/acme.sh --install-cert --nginx /usr/local/nginx/conf/vhost/my.domain.conf -d my.domain.com \ --key-file /usr/local/nginx/ssl/my.domain.com/key.pem \ --fullchain-file /usr/local/nginx/ssl/my.domain.com/cert.pem \ --reloadcmd &amp;#34;supervisorctl restart nginx&amp;#34; 上面的 &amp;ndash;nginx 指定配置文件路径 参考: https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E
1. 生成证书, 检测域名所有权 acme.sh --issue -d www.aaa.com --webroot /www/wwwroot/www.aaa.com #或 acme.sh --issue -d www.aaa.com --nginx /usr/local/nginx/conf/sites-enabled/www.aaa.com.conf # 注意: 在 issue 阶段不要在 conf 中设置 listen 443 及 ssl 相关配置, 否则在没有正确的 cert&amp;amp;key 文件时会有报错 # 应在 issue 执行后, 再在 conf 文件中添加 ssl 相关配置 2. 配置 nginx 文件路径 ssl_certificate /usr/local/nginx/ssl/www.aaa.com/cert.pem; ssl_certificate_key /usr/local/nginx/ssl/www.aaa.com/key.pem; 3.</description></item><item><title>apache_通常每个套接字只允许使用一次_错误</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/apache_%E9%80%9A%E5%B8%B8%E6%AF%8F%E4%B8%AA%E5%A5%97%E6%8E%A5%E5%AD%97%E5%8F%AA%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8%E4%B8%80%E6%AC%A1_%E9%94%99%E8%AF%AF/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/apache_%E9%80%9A%E5%B8%B8%E6%AF%8F%E4%B8%AA%E5%A5%97%E6%8E%A5%E5%AD%97%E5%8F%AA%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8%E4%B8%80%E6%AC%A1_%E9%94%99%E8%AF%AF/</guid><description>安装了apache2.4.27, 在cmd中启动apache服务( httpd.exe -k start )的时候却提示：通常每个套接字只允许使用一次.
原因可能是系统默认 httpd.exe 服务自动开启, 可以先关闭该服务( httpd.exe -k stop ), 再重新开启; 然后在 计算机-( 右键 ) -管理-服务 中关闭apache服务的自动启动</description></item><item><title>apache添加php模块时cannot-load--dll出错</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/apache%E6%B7%BB%E5%8A%A0php%E6%A8%A1%E5%9D%97%E6%97%B6cannot-load--dll%E5%87%BA%E9%94%99/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/apache%E6%B7%BB%E5%8A%A0php%E6%A8%A1%E5%9D%97%E6%97%B6cannot-load--dll%E5%87%BA%E9%94%99/</guid><description>C:\Users\Administrator&amp;gt;httpd.exe -k start httpd.exe: Syntax error on line 185 of C:/tnwamp/Apache24/conf/httpd.conf: Canno t load C:/tnwamp/php5.6.31/php5apache2_4.dll into server: \xd5\xd2\xb2\xbb\xb5\x bd\xd6\xb8\xb6\xa8\xb5\xc4\xc4\xa3\xbf\xe9\xa1\xa3
原因可能是缺失 mvcr100.dll, 可以通过双击打开 php.exe文件查看是否如此, 如果提示缺失 mvcr100.dll, 那么上 https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=30679 下载一个 vcredist_x86.exe 即可( 这是是32位的 )</description></item><item><title>dingo-api-返回-response--array()--setStatusCode()</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/dingo-api-%E8%BF%94%E5%9B%9E-response--array--setstatuscode/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/dingo-api-%E8%BF%94%E5%9B%9E-response--array--setstatuscode/</guid><description>phpstorm 对 $this-&amp;gt;response-&amp;gt;item(***)-&amp;gt;setStatusCode(***) 中的 item() 和 setStatusCode() 都有提示,
找了下 Dingo\Api\Routing\Helpers trait类 中的 __call() 方法
public function __call($method, $parameters) { if (method_exists($this-&amp;gt;response(), $method) || $method == &amp;#39;array&amp;#39;) { return call_user_func_array([$this-&amp;gt;response(), $method], $parameters); } throw new ErrorException(&amp;#39;Undefined method &amp;#39;.get_class($this).&amp;#39;::&amp;#39;.$method); } 意为调用 $this-&amp;gt;response() 类( Factory类)的 $method (也就是 array() 方法), 并将 $parameters 作为参数 也就是 Factory 类的 array() 方法, 没想到 在 Factory 类中, array() 方法也是通过 __call() 魔术方法调用的&amp;hellip;
另: call_user_func_array() 方法: 调用回调函数，并把一个数组参数作为回调函数的参数
如果调用的方法是一个类方法, 那么用 数组将 类名和方法名 组合起来 [$this-&amp;gt;response(), $method] 表示回调方法</description></item><item><title>foreach-中使用-&amp;地址符时,-最后要释放-value</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/foreach-%E4%B8%AD%E4%BD%BF%E7%94%A8-%E5%9C%B0%E5%9D%80%E7%AC%A6%E6%97%B6-%E6%9C%80%E5%90%8E%E8%A6%81%E9%87%8A%E6%94%BE-value/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/foreach-%E4%B8%AD%E4%BD%BF%E7%94%A8-%E5%9C%B0%E5%9D%80%E7%AC%A6%E6%97%B6-%E6%9C%80%E5%90%8E%E8%A6%81%E9%87%8A%E6%94%BE-value/</guid><description>$arr = [1,2,3]; foreach($arr as $key=&amp;gt; &amp;amp;$value){ if ($key){ $value = $value +1; } } unset($value); // 要注意翻译 $value, 否则后面如果还要用到 $value 时, 会指向 $arr 的最后一个元素</description></item><item><title>git-clone-出错--RPC-failed</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/git-clone-%E5%87%BA%E9%94%99--rpc-failed/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/git-clone-%E5%87%BA%E9%94%99--rpc-failed/</guid><description>转载自: https://blog.csdn.net/qq_34121797/article/details/79561110
一、问题原因及现象 在网络情况不稳定下克隆项目时，可能会出现如下错误： ![图片.png](https://upload-images.jianshu.io/upload_images/4073481-97a355f036ab54a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 出现此问题原因 http缓存不够或者网络不稳定等。 二、解决方案 修改git配置：
1、查看当前配置命令 git config -l
2、httpBuffer加大 git config &amp;ndash;global http.postBuffer 524288000
3、压缩配置 git config &amp;ndash;global core.compression -1
4、修改配置文件(可选) export GIT_TRACE_PACKET=1
export GIT_TRACE=1
export GIT_CURL_VERBOSE=1 以上配置文件修改，也可以大幅度提升git 克隆速度</description></item><item><title>git-创建远程分支---从远程分支拉取本地不存在的分支</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/git-%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF---%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%8B%89%E5%8F%96%E6%9C%AC%E5%9C%B0%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E5%88%86%E6%94%AF/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/git-%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF---%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%8B%89%E5%8F%96%E6%9C%AC%E5%9C%B0%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E5%88%86%E6%94%AF/</guid><description>原文
新建远程分支 git push origin remote_branch_name:local_branch_name // remote_branch_name 是远程分支的名字 // local_branch_name 是本地分支的名字 git branch -a // 查看所有分支(远程+本地) 删除远程分支 git push origin :remote_branch_name // 或 git push origin --delete remote_branch_name 原文
git fetch git checkout -b local_branch_name origin/remote_branch_name</description></item><item><title>go-通用-http-client-请求头</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E9%80%9A%E7%94%A8-http-client-%E8%AF%B7%E6%B1%82%E5%A4%B4/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E9%80%9A%E7%94%A8-http-client-%E8%AF%B7%E6%B1%82%E5%A4%B4/</guid><description>参考stackoverflow: adding-a-default-http-header-in-go
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34; ) const accessToken = &amp;#34;MY_DEMO_TOKEN&amp;#34; type MyRoundTripper struct { r http.RoundTripper } func (mrt MyRoundTripper) RoundTrip(r *http.Request) (*http.Response, error) { r.Header.Add(&amp;#34;Authorization&amp;#34;, &amp;#34;Bearer: &amp;#34;+accessToken) return mrt.r.RoundTrip(r) } func main() { client := &amp;amp;http.Client{ Timeout: time.Second * 10, Transport: MyRoundTripper{r: http.DefaultTransport}, } fmt.Println(client.Get(&amp;#34;http://google.com/&amp;#34;)) }</description></item><item><title>guzzle-http-post-(json)</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/guzzle-http-post-json/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/guzzle-http-post-json/</guid><description>$client = new \GuzzleHttp\Client(); $response = $client-&amp;gt;post(&amp;#39;http://xxx.com/api/login&amp;#39;, [ &amp;#39;json&amp;#39; =&amp;gt; [ &amp;#39;phone&amp;#39; =&amp;gt; &amp;#34;152xxxx1234&amp;#34;, &amp;#39;password&amp;#39; =&amp;gt; &amp;#34;123456&amp;#34;, ] ]); $response = $client-&amp;gt;post(&amp;#39;http://xxx.com/api/login&amp;#39;, [ &amp;#39;form_params&amp;#39; =&amp;gt; [ &amp;#39;phone&amp;#39; =&amp;gt; &amp;#34;152xxxx1234&amp;#34;, &amp;#39;password&amp;#39; =&amp;gt; 123456, ] ]); 若使用 json, 则 数组中的值(不论是否数字), 都要用 引号 起来, 而 form_params 则不需要
reference</description></item><item><title>html-字体大小-font-size-不一至时的垂直对齐问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F-font-size-%E4%B8%8D%E4%B8%80%E8%87%B3%E6%97%B6%E7%9A%84%E5%9E%82%E7%9B%B4%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F-font-size-%E4%B8%8D%E4%B8%80%E8%87%B3%E6%97%B6%E7%9A%84%E5%9E%82%E7%9B%B4%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</guid><description>Xx, 就如 Xx , 默认是文本底部对齐, 设置父元素的 text-align:middle; 可以令文本完全垂直对齐
原文见: https://blog.csdn.net/qq_30541261/article/details/79754478</description></item><item><title>html中的友情链接不被`爱站`和`站长工具`的友链收录-</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/html%E4%B8%AD%E7%9A%84%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E4%B8%8D%E8%A2%AB%E7%88%B1%E7%AB%99%E5%92%8C%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8F%8B%E9%93%BE%E6%94%B6%E5%BD%95-/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/html%E4%B8%AD%E7%9A%84%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E4%B8%8D%E8%A2%AB%E7%88%B1%E7%AB%99%E5%92%8C%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8F%8B%E9%93%BE%E6%94%B6%E5%BD%95-/</guid><description>百度上原因说可能是 服务器开启了硬件防火墙;
自己遇到的是部署在虚拟主机上的项目, 不涉及硬件防火墙; 打开网页源代码, 发现友情链接为空, 原来是通过ajax传递过来的友情链接, 换成非ajax即可被正常收录</description></item><item><title>id-heroku-com-打不开</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/id-heroku-com-%E6%89%93%E4%B8%8D%E5%BC%80/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/id-heroku-com-%E6%89%93%E4%B8%8D%E5%BC%80/</guid><description>搭梯子**后依然打不开 换了几个 dns 也不行
使用 https://www.ultratools.com/tools/ipWhoisLookupResult](https://www.ultratools.com/tools/ipWhoisLookupResult) 添加到 本地 host 文件中即可访问</description></item><item><title>js-的遍历</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/js-%E7%9A%84%E9%81%8D%E5%8E%86/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/js-%E7%9A%84%E9%81%8D%E5%8E%86/</guid><description/></item><item><title>js-数组-for----in---中的-key-返回的是-string</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84-for----in---%E4%B8%AD%E7%9A%84-key-%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF-string/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84-for----in---%E4%B8%AD%E7%9A%84-key-%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF-string/</guid><description>js 数组 for&amp;hellip; in.. 中的 key 返回的是 string</description></item><item><title>json-Unmarshal-如何获取-null</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/json-unmarshal-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96-null/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/json-unmarshal-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96-null/</guid><description>对于如下 json 和 struct, 会将 gender 解析为 false, 而实际上应为 nil, 则需要 将 struct 中的 bool 类型转为 *bool 类型
{ &amp;#34;name&amp;#34;: &amp;#34;Jim Green&amp;#34;, &amp;#34;age&amp;#34;: 15, &amp;#34;gender&amp;#34;: null } type Student struct { Name string `json:&amp;#34;name&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` Name bool `json:&amp;#34;gender&amp;#34;` } 因为在 go 中指针不可以进行运算, 只能引用 对于 *bool 类型的变量, 不能直接赋值 如
var gender *bool *gender = true // panic: runtime error: invalid memory address or nil pointer dereference 而应该对非指针类型赋值, 再引用指针
var gender *bool tempGender := true gender = &amp;amp;tempGender</description></item><item><title>laravel-dispatch()-异步任务耗时长--</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-dispatch-%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%80%97%E6%97%B6%E9%95%BF--/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-dispatch-%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%80%97%E6%97%B6%E9%95%BF--/</guid><description>在控制器中使用 This-&amp;gt;dispatch(new Job()) 后, 接口依然耗时长.
原因是 job 类中 __contruct() 方法里操作过多(请求api等), 这一步是同步进行的. 真正 异步 执行的是 Job 类中的 handle() 方法</description></item><item><title>laravel-factory()--make()---create()-的区别</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-factory--make---create-%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-factory--make---create-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>相同点: 都是生成模型的实例
不同点: create() 同时执行了 save()方法, 保存到了数据库中; make() 只生成了模型实例</description></item><item><title>laravel-migration-`Integrity-constraint-violation-`</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-migration-integrity-constraint-violation-/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-migration-integrity-constraint-violation-/</guid><description>原因不是 约束的 key 重复了, 而是数据库中已存在数据, 且该字段重复了</description></item><item><title>laravel-定时任务不执行了--</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8D%E6%89%A7%E8%A1%8C%E4%BA%86--/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8D%E6%89%A7%E8%A1%8C%E4%BA%86--/</guid><description>linux 服务端使用 pm2 开启 php artisan queue:work 守护进程, 突然 队列不工作了.
原因可能是 代码更新后, 没有重启 任务, 所以 pm2 reload 0 即可</description></item><item><title>laravel5-5+-Package-Auto-Discovery-包自动发现</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel5-5+-package-auto-discovery-%E5%8C%85%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel5-5+-package-auto-discovery-%E5%8C%85%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0/</guid><description>转载自原文
一切的起源都是来自 composer.json ,在使用 composer 的时候，你可以在 post-autoload-dump 部分指定你想执行的脚本，比如在 Laravel 5.5 的时候，我们可以看到这样的定义：
&amp;#34;scripts&amp;#34;: { &amp;#34;post-autoload-dump&amp;#34;: [ &amp;#34;Illuminate\\Foundation\\ComposerScripts::postAutoloadDump&amp;#34;, &amp;#34;@php artisan package:discover --ansi&amp;#34; ], ... } 对于 postAutoloadDump 是很熟悉了，Laravel 之前的版本基本都有，它的工作是清理一些缓存，删除一些旧的文件。
我们的关注重点是 @php artisan package:discover ，也就是会执行 @php artisan package:discover 这个命令。
这个命令是干嘛的呢？它其实是位于Illuminate\Foundation\Console\PackageDiscoverCommand 中，主要是通过执行Illuminate\Foundation\PackageManifest 的 build() 方法来达到 发现 package 的目的。
而 PackageManifest 早就注册在 Laravel 的 Container 中，那么它可以保证每次在启动 Laravel 的时候都能使用 PackageManifest 的 build() 方法，这个 build() 方法主要的逻辑就是：
找寻 vendor/composer/installed.json 这个文件，这个文件是 composer 自己生成的，记录着每一次的 composer autoload 的 class map。
而此时，Laravel 又将这些内容映射到 extra.</description></item><item><title>linux-ssh-端口更改-及-ip-限制-&amp;-rsa-登录</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-ssh-%E7%AB%AF%E5%8F%A3%E6%9B%B4%E6%94%B9-%E5%8F%8A-ip-%E9%99%90%E5%88%B6--rsa-%E7%99%BB%E5%BD%95/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-ssh-%E7%AB%AF%E5%8F%A3%E6%9B%B4%E6%94%B9-%E5%8F%8A-ip-%E9%99%90%E5%88%B6--rsa-%E7%99%BB%E5%BD%95/</guid><description>原文见 cnblog: 修改linux的ssh默认端口号22的方法 rsa 参考
一、修改配置文件 vi /etc/ssh/sshd_config
找到#Port 22
修改为自己要使用的端口号：Port 26000
然后 :x 退出保存
二、重启ssh服务 /etc/init.d./sshd restart 如果还要设置防火墙，配置：vi /etc/sysconfig/iptables
启用26000端口：/etc/init.d/iptables restart
三、如果要显示固定IP才能登陆： 1.修改 /etc/hosts.deny, 加入一行sshd:ALL &amp;ndash;#意思是任何ip都不能登陆
2.然后修改：/etc/hosts.allow,在其中进行如下设置:sshd:192.168.0.241:allow &amp;ndash;#意思是只允许192.168.0.241登陆
四、rsa 密钥对登录 client 执行以下命令生成密钥对 (~/.ssh) ssh-keygen -t rsa 把 is_rsa.pub 复制到服务器的 ~/.ssh/authorized_keys 文件后面 配置 /etc/ssh/sshd_config RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys service sshd restart 20241220 新增 上述是 centos 更改 ssh 端口, 不适用 ubuntu 2204 以后的版本, ubuntu 最新版本 配置ssh端口如下 参考自 csdn: 【解决】Ubuntu SSH Server 修改默认端口无效</description></item><item><title>localStorage-setItem()-存入的是-string</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/localstorage-setitem-%E5%AD%98%E5%85%A5%E7%9A%84%E6%98%AF-string/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/localstorage-setitem-%E5%AD%98%E5%85%A5%E7%9A%84%E6%98%AF-string/</guid><description>localStorage.setItem(&amp;#39;flag&amp;#39;, 0) // 存入 int let a= localStorage.getItem(&amp;#39;flag&amp;#39;) // 取出的是 string &amp;#39;0&amp;#39; console.log(typeof(a)) // string</description></item><item><title>middleware-gin-contrib-cors-在-301-时失效</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/middleware-gin-contrib-cors-%E5%9C%A8-301-%E6%97%B6%E5%A4%B1%E6%95%88/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/middleware-gin-contrib-cors-%E5%9C%A8-301-%E6%97%B6%E5%A4%B1%E6%95%88/</guid><description>背景: gin 配置了路由 router.GET(&amp;quot;/api/users&amp;quot;) , 添加了 cors 中间件, 但是访问 /api/users/ 时, 会返回 301 + cros 错误
原因: gin 默认打开 &amp;ldquo;RedirectTrailingSlash&amp;rdquo;, 表示自动添加(或删除) &amp;ldquo;/&amp;rdquo; 并作 301 跳转, 这时候还未进入 middleware, 所以 cors 中间件所添加的 header 不会出现在返回头中.
中间件其它现象:
c.Header(&amp;#34;before-next&amp;#34;: &amp;#34;can-be-show&amp;#34;) // 会写入到返回头 c.next() c.Header(&amp;#34;after-next&amp;#34;: &amp;#34;won&amp;#39;t be returned&amp;#34;) // 不会出现在返回头中 解决办法:
在 gin 路由中同时添加 带 / 和不带 / 的路由, 工作量大, 且 ugly ❌ 使用 nginx 在 go-web 程序外部直接全部带上 cors 头 ✅</description></item><item><title>mysql中 date_add(date,interval type)</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/mysql%E4%B8%AD-date_adddateinterval-type/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/mysql%E4%B8%AD-date_adddateinterval-type/</guid><description>mysql中 date_add(date,interval type) 中, date类型不能为&amp;quot;时间戳&amp;quot;</description></item><item><title>notes--基于-Composer-的-PHP-模块化开发</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/notes--%E5%9F%BA%E4%BA%8E-composer-%E7%9A%84-php-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/notes--%E5%9F%BA%E4%BA%8E-composer-%E7%9A%84-php-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</guid><description>笔记来源 overtrue: 基于 Composer 的 PHP 模块化开发
1. what &amp;amp; why composer 是 php 版本的版本控制工具, 如 js 里的 npm, go 里的 mod.
1.1 composer.json 的组成 基础字段 name, description, keywords, license 依赖 require, require-dev 自动加载: autoload, autoload-dev PSR-4 PSR-0 classmate files 其它 scripts, minimum-stability, bin, repositories, support, config 其中, 若是一个项目, name 表示 project name, 若是一个包, name 表示 package name
在没有 composer 之前, 靠人工复制粘贴代码, 存在代码安全及 repeat yourself 的问题
1.2 版本号的组成 Major.Minor.Patch
major: 大的功能变更, 不向后兼容 minor: 新增功能, 向后兼容 patch: 补丁, 向后兼容, 修复 bug 1.</description></item><item><title>php-类方法的连接调用-$this--where()--select()</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%9E%E6%8E%A5%E8%B0%83%E7%94%A8-this--where--select/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%9E%E6%8E%A5%E8%B0%83%E7%94%A8-this--where--select/</guid><description>这种类方法最后都返回了 $this, 从而能连续调用;
至于中间的方法, 通过类属性将值保存起来, 可供后续方法继续使用</description></item><item><title>PHP-三大设计模式--单例&amp;工厂&amp;注册树</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E4%B8%89%E5%A4%A7%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%8D%95%E4%BE%8B%E5%B7%A5%E5%8E%82%E6%B3%A8%E5%86%8C%E6%A0%91/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E4%B8%89%E5%A4%A7%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%8D%95%E4%BE%8B%E5%B7%A5%E5%8E%82%E6%B3%A8%E5%86%8C%E6%A0%91/</guid><description>&amp;lt;?php // 单例模式(三私一公) class Site{ protected static $_instance; protected function __construct(){ return self::$_instance; } protected function __clone(){ } public static function getSingleton(){ if(! (self::$_instance instanceof self)){ self::$_instance = new self(); } return self::$_instance; } } // 工厂模式 class Factory{ public static function create($className){ return $className::getSingleton(); } } // 注册树模式 class Container{ protected static $object = []; public static function set($alias, $obj){ self::$object[$alias] = $obj; } public static function get($alias){ return self::$object[$alias]; } public static function _unset($alias){ unset(self::$object[$alias]); } Container::set(&amp;#39;site&amp;#39;, Factory::create(&amp;#39;Site&amp;#39;));// 把单一对象实例挂到注册树上 $site = Container::get(&amp;#39;site&amp;#39;);// 从注册树中获取对象</description></item><item><title>php-图片处理扩展包-intervention-image-在-win-中使用遇到问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E6%89%A9%E5%B1%95%E5%8C%85-intervention-image-%E5%9C%A8-win-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E6%89%A9%E5%B1%95%E5%8C%85-intervention-image-%E5%9C%A8-win-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/</guid><description>环境: laravel-admin + laragon 使用 intervention/image 时, 报错 : encodeing format(tmp) is not suppoerted 原因: intervention/image 这个包不与 windows 兼容 临时解决办法: 修改 包文件 AbstractEncoder.php 原文见 github laravel-admin issue</description></item><item><title>php-重写(override,-覆盖)-和-重载(overload)</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E9%87%8D%E5%86%99override-%E8%A6%86%E7%9B%96-%E5%92%8C-%E9%87%8D%E8%BD%BDoverload/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E9%87%8D%E5%86%99override-%E8%A6%86%E7%9B%96-%E5%92%8C-%E9%87%8D%E8%BD%BDoverload/</guid><description> 重写: 子类继承父类时, 重写了方法 重载: 传统意义上的重载(如java), 指一个类中存在多个同名的方法, 但接收参数不一样, php 不支持这样的写法 php 提供的 overloading(重载), 指的是 动态地创建类属性和方法, 通过 魔术方法 来实现</description></item><item><title>phpoffice---phpword-写入文件不可打开</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/phpoffice---phpword-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E4%B8%8D%E5%8F%AF%E6%89%93%E5%BC%80/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/phpoffice---phpword-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E4%B8%8D%E5%8F%AF%E6%89%93%E5%BC%80/</guid><description>使用 phpword 的模板写入字符串时, 最后生成的文件打开失败.
这可能是因为 写入的文件内容没有 做 htmlspecialchars 处理, 而 docx 的 xml 不允许 &amp;amp;, &amp;lsquo;, &amp;ldquo;, &amp;lt;, &amp;gt; 字符, 这几样需要进行转义处理.</description></item><item><title>phpstorm-连接-mysql5-7</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E8%BF%9E%E6%8E%A5-mysql5-7/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E8%BF%9E%E6%8E%A5-mysql5-7/</guid><description>连接 mysql5.6 没有问题, 但是连接 mysql5.7 就会报 [08S01] Communications link failure The last packet sent successfully to &amp;hellip;
需要把 useSSL 改为 false
参考: https://blog.csdn.net/baofeidyz/article/details/54344359</description></item><item><title>php中-utf-8-还是-utf8--</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E4%B8%AD-utf-8-%E8%BF%98%E6%98%AF-utf8--/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E4%B8%AD-utf-8-%E8%BF%98%E6%98%AF-utf8--/</guid><description>utf8、utf-8 和 UTF-8 的区别如下：
一、“UTF-8”这是标准写法，在PHP和HTML中设置编码，统一写成“UTF-8”。 举例： PHP中 —— HTML中　——　二、“utf8”、“utf-8”和“UTF8”只是在window中不区分大小写的写法而已，一般程序能识别，但也有例外。例如简写的“UTF8”或“utf8”在ie浏览器里不识别。
三、数据库命令模式中，必须写成“utf8”，因为MySQL的命令模式中只能识别“utf8”，比如：PHP程序中可以写： 结论：MySQL操作使用“utf8” 【mysql_query(set names utf8)】，其他一律使用“UTF-8”。
原文见: https://blog.csdn.net/ahjxhy2010/article/details/79722997</description></item><item><title>position--fixed-有时候会失效</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/position--fixed-%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E5%A4%B1%E6%95%88/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/position--fixed-%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E5%A4%B1%E6%95%88/</guid><description>当父(祖)元素使用了 transform 后, 当前元素的 position 会发生改变, 其参照父元素进行定位, 而非 window 窗口
参见: https://www.jianshu.com/p/4f77fa62e14b</description></item><item><title>supervisor-unix----tmp-supervisor-sock-no-such-file</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/supervisor-unix----tmp-supervisor-sock-no-such-file/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/supervisor-unix----tmp-supervisor-sock-no-such-file/</guid><description>[root@iZm5e09hymnzdmgx3964zgZ etc]# cat -n supervisord.conf | grep /tmp -- 22 [unix_http_server] 23 ;file=/tmp/supervisor.sock ; the path to the socket file 24 file=/var/run/supervisor.sock ; the path to the socket file -- 45 [supervisord] 46 ;logfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log 47 logfile=/var/log/supervisord.log ; main log file; default $CWD/supervisord.log -- 50 loglevel=info ; log level; default info; others: debug,warn,trace 51 ;pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid 52 pidfile=/var/run/supervisord.pid ; supervisord pidfile; default supervisord.</description></item><item><title>test</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/test/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/test/</guid><description>第一章 人力资源服务业发展与变革 1. 人力资源服务业概念与特性 概念: 人力资源服务业是为劳动者就业和职业发展，为用人单位管理和开发人力资源提供相关服务的专门行业。是现代服务业中商务服务业的重要组成部分 主要载体: 人力资源公共服务和人力资源经营性服务 行业特性: 基础性、引领性、成长性 2. 人力资源服务业态 求职超聘服务 招聘洽谈会 信息网络服务 高级人才寻访 取业指导服务 素质测评服务 培训服务 人力资源管理咨询服务 流动人员人事枯*管理服务 人力资源外包服务 券务派造 3. 人力资源服务业发供四十年 1979-1992 市场萌芽期
1993-2006 生态开展期
2007-2012 业态形成期
两部合并
2013-至今 创新活跃期
4. 人力资源服务业发展的三大标志 2011年，国家统计局《国民经济行业分奏》 （CB/T4754-2011）首次在“商务服务业” 中列出人力资源服务业。
2018年，习近平总书记在十九大报告中提出“着力加快建设实体经济，科技创新、现代金融、人力资源协同发供的产业体系”，并且强调“在中高端消费、创新引领，绿色低碳、共享经济、现代供应德、人力资本服务等领城培育新增长点、形成新动能。”人力资源第一次成为国家重点关注的行业领城。
2019年10月30日，国家发很和改革委员会修订发布了《产业结构调整指导日录》2019年本，废止2011年本。首次将人力资源和人力资源服务业（第46奏）作为鼓砌奏单独到出。 5. 人力资源服务业数据 人社部公布数据，载至2019年底：
全国共有各卖人力资源服务机构3.96万家； 全年行业总营收1.96万亿元； 共帮助2.55亿人次实现就业择业和流动； 为4211万家用人单位提供了服务。 人力资源服务业营业总收: 2019年较2010年增长17倍
6. 人力资源服务地方标谁、评级及诚信经营 2007年企业标谁 2008年此京市人才服务地方标谁 2013年此京市人力资源服务地方标准 2018年京津冀区域协同地方标谁 《人力资绿服务规范》 DB11/T3008-2018 《人力资源服务机构等级划分与评定》 DB11/T3009-2018 7. 北京市促进行业发展的有关政策简介 《关于进一步发挥猎头机构引才融智作用建设专 业化和国际化人力资源市场的若干措施（试行）》
加强猎头机构人才队伍建设。 引导猎头机构为我市政府机关、事业单位，金些和社会组织子各奏用人单位提供精准服务，给予精谁化引才势励。 推选猎夫机构集约化发表。 拓宽猎头机构融资渠道。 推动猎头机构技水和服务创新。 提升猎头机构对外开放水平。 打选猎头机构优质服务品牌。 引导建立错头行业联盟。 加强猎头机构诚信体系建设。 简化行政许可流程。 关于2020年使用猎头机构导访人才及奖励介绍</description></item><item><title>thinkphp5-0-解决跨域</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/thinkphp5-0-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/thinkphp5-0-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</guid><description>在 public/index.php 中加入
header(&amp;#34;Access-Control-Allow-Origin:*&amp;#34;); header(&amp;#34;Access-Control-Allow-Credentials: true&amp;#34;); header(&amp;#34;Access-Control-Allow-Methods:GET, POST, OPTIONS, DELETE&amp;#34;); header(&amp;#34;Access-Control-Allow-Headers:Request-Timestamp,Access-Token,Refresh-Token,Access-Control-Allow-Origin,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type, Accept-Language, Origin, Accept-Encoding&amp;#34;); if(strtolower($_SERVER[&amp;#39;REQUEST_METHOD&amp;#39;]) === &amp;#39;options&amp;#39;){ exit; } 貌似 tp5.1 中路由可以设置允许跨域
Route::get(&amp;#39;new/:id&amp;#39;, &amp;#39;News/read&amp;#39;) -&amp;gt;ext(&amp;#39;html&amp;#39;) -&amp;gt;allowCrossDomain();</description></item><item><title>tp5-0-中的-volist-中的循环变量-$i</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-0-%E4%B8%AD%E7%9A%84-volist-%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F-i/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-0-%E4%B8%AD%E7%9A%84-volist-%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F-i/</guid><description>// 输出循环变量： {volist name=&amp;#34;list&amp;#34; id=&amp;#34;vo&amp;#34; key=&amp;#34;k&amp;#34; } {$k}.{$vo.name} {/volist} //如果没有指定key属性的话，默认使用循环变量i，例如： {volist name=&amp;#34;list&amp;#34; id=&amp;#34;vo&amp;#34; } {$i}.{$vo.name} {/volist} -这里的索引是从 1 开始的, 而不是从 0 开始</description></item><item><title>tp5-1-的依赖注入,-服务容器,-facade</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-1-%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8-facade/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-1-%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8-facade/</guid><description>在一个类中 实例化另外一个类, 就是依赖性强, 耦合度高, 在 tp5.1 中 可使用 依赖注入 来解耦 class A { public function hello(){ echo &amp;#39;hello&amp;#39;; } } class B { public function sayHello(){ $a = new A(); $a-&amp;gt;hello(); } } class C { // 依赖注入的用法 public function sayHello(A $a){ $a-&amp;gt;hello(); } } 进一步使用 依赖容器 container 来解耦 容器就是一个装有各种类的对象的仓库, 然后通过 依赖容器 来实现对象的调用
最后还可以使用 facade 封装各个类(对象) 的方法, 形成对外的统一方法, 从而使用者(开发者) 无需关心调用的是哪个类的哪个方法, ( 而统一使用的是 facade 类的方法)</description></item><item><title>tp5-1-和-laravel-中的-facade-门面</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-1-%E5%92%8C-laravel-%E4%B8%AD%E7%9A%84-facade-%E9%97%A8%E9%9D%A2/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-1-%E5%92%8C-laravel-%E4%B8%AD%E7%9A%84-facade-%E9%97%A8%E9%9D%A2/</guid><description> facade 的作用是把 类(动态)方法 当作 静态方法 使用; 简称 静态代理
&amp;lt;?php class Demo { public function index(){ echo &amp;#39;hello world&amp;#39;; // echo __METHOD__; } } class DemoFacade { public static function __callStatic($name, $arguments) { $demo = new Demo(); $demo-&amp;gt;$name(); } } DemoFacade::index();// hello world</description></item><item><title>tp5-在模板(或php文件中)中获取当前的控制器名</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-%E5%9C%A8%E6%A8%A1%E6%9D%BF%E6%88%96php%E6%96%87%E4%BB%B6%E4%B8%AD%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8%E5%90%8D/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-%E5%9C%A8%E6%A8%A1%E6%9D%BF%E6%88%96php%E6%96%87%E4%BB%B6%E4%B8%AD%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8%E5%90%8D/</guid><description/></item><item><title>ubuntu-没有root默认密码--</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/ubuntu-%E6%B2%A1%E6%9C%89root%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81--/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/ubuntu-%E6%B2%A1%E6%9C%89root%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81--/</guid><description>环境: vmware简易安装 ubuntu 版本 18.04 安装完成后 root 用户没有密码, 但是中途让添加过一个用户, 这个用户即有 sudo 权限
# 使用 `sudo passwd` 设置 root 的密码 # 使用 `su` 切换到 root 用户 How to Find/Change Ubuntu Default Root Password</description></item><item><title>virtualbox-centos7-7-nat-网络连接-并使用-ssh-连接</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/virtualbox-centos7-7-nat-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5-%E5%B9%B6%E4%BD%BF%E7%94%A8-ssh-%E8%BF%9E%E6%8E%A5/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/virtualbox-centos7-7-nat-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5-%E5%B9%B6%E4%BD%BF%E7%94%A8-ssh-%E8%BF%9E%E6%8E%A5/</guid><description>virtual 添加 nat 网络 虚拟机配置 nat 网络 centos 系统文件修改
cd /etc/sysconfig/network-scripts/ // 查找 ifcfg-enp... 文件并修改其中的 onboot 为 yes vi ifcfg-en0s3 // 修改后, 重启 network 服务, 并用 ping 或 curl 进行测试 service network restart ping www.baidu.com 虚拟机设置 xshell 连接 ssh -p root@127.0.0.1 2222
或
文件-新建-连接&amp;hellip;.</description></item><item><title>vue-cli3-0-项目-全局-styl-样式在-App-vue-引入后变量不生效</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-cli3-0-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%B1%80-styl-%E6%A0%B7%E5%BC%8F%E5%9C%A8-app-vue-%E5%BC%95%E5%85%A5%E5%90%8E%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-cli3-0-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%B1%80-styl-%E6%A0%B7%E5%BC%8F%E5%9C%A8-app-vue-%E5%BC%95%E5%85%A5%E5%90%8E%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</guid><description>错误情况 在 assets 下新建 common.styl 样式, 在 App.vue 的 style 标签引入后. 在没有变量的情况下可以全局使用, 有变量时, 则变量不生效
解决办法 不需要在 App.vue 中引用 在 vue.config.js 中引用 module.exports = { css: { loaderOptions: { stylus: { &amp;#39;resolve url&amp;#39;: true, &amp;#39;import&amp;#39;: [ &amp;#39;./src/theme&amp;#39;, &amp;#39;./src/assets/css/public/common&amp;#39; ] } } } }</description></item><item><title>vue-nuxt-中-通过路由来实现导航高亮</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-nuxt-%E4%B8%AD-%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E9%AB%98%E4%BA%AE/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-nuxt-%E4%B8%AD-%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E9%AB%98%E4%BA%AE/</guid><description>首先在 mounted() 中判断了路由, 实现高亮, 后来发现刷新才有用, 直接 router.push 过去的链接则不生效 监听路由变化, 执行同样的判断 mounted() { this.initHighlight() }, watch: { &amp;#34;$route&amp;#34;() { this.initHighlight() } }, methods: { // 导航高亮 initHighlight() { if (this.$route.name == &amp;#39;route1&amp;#39;) { this.active_id = -2 } else if (this.$route.name == &amp;#39;route2) { this.active_id = -1 } else if (this.$route.name == &amp;#39;route3&amp;#39;) { this.active_id = this.$route.params.navid } else { this.active_id = 0 } } } 参考自: segmentfault</description></item><item><title>vue-router-push-后页面位置不是在顶部</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/vue-router-push-%E5%90%8E%E9%A1%B5%E9%9D%A2%E4%BD%8D%E7%BD%AE%E4%B8%8D%E6%98%AF%E5%9C%A8%E9%A1%B6%E9%83%A8/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/vue-router-push-%E5%90%8E%E9%A1%B5%E9%9D%A2%E4%BD%8D%E7%BD%AE%E4%B8%8D%E6%98%AF%E5%9C%A8%E9%A1%B6%E9%83%A8/</guid><description>原文见: https://blog.csdn.net/M_SSY/article/details/82850517
解决办法: 在 router/index.js 中 new router 时, 加入如下代码
scrollBehavior(to, from, savedPosition) { return {x: 0, y: 0 } }</description></item><item><title>web2-0-和-web1-0</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/web2-0-%E5%92%8C-web1-0/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/web2-0-%E5%92%8C-web1-0/</guid><description>Web1.0 的主要特点在于用户通过浏览器获取信息。
Web2.0 则更注重用户的交互作用，用户既是网站内容的浏览者，也是网站内容的制造者。 所谓网站内容的制造者是说互联网上的每一个用户不再仅仅是互联网的读者，同时也成为互联网的作者；不再仅仅是在互联网上冲浪，同时也成为波浪制造者;在模式上由单纯的“读”向“写”以及“共同建设”发展；由被动地接收互联网信息向主动创造互联网信息发展，从而更加人性化</description></item><item><title>不间断空格-none-breaking-space-(-u00a0)</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%B8%8D%E9%97%B4%E6%96%AD%E7%A9%BA%E6%A0%BC-none-breaking-space--u00a0/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%B8%8D%E9%97%B4%E6%96%AD%E7%A9%BA%E6%A0%BC-none-breaking-space--u00a0/</guid><description>从网上复制的一些文本可能含有特殊字符, 不间断空格(unicode 编码为 \u00a0)就是一种, 效果与 &amp;rsquo; &amp;rsquo; 普通空格类似, 但有不同. 不同: 对英文单词间使用普通空格, 会自动换行; 使用不间断空格连接的单词会被认为是一个单词而直接全部换到下一行, 这在 html 也是同样的效果. 在 php 中使用 普通空格替换 不间断空格的方式
$str = &amp;#34;a a a&amp;#34;; $str = str_replace(chr( 194 ) . chr( 160 ), &amp;#34; &amp;#34;, $str); 参考自stackoverflow</description></item><item><title>帝国cms-1条信息如何实现多个内容页--</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms-1%E6%9D%A1%E4%BF%A1%E6%81%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%86%85%E5%AE%B9%E9%A1%B5--/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms-1%E6%9D%A1%E4%BF%A1%E6%81%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%86%85%E5%AE%B9%E9%A1%B5--/</guid><description>需要如图: &amp;lsquo;曲线救国&amp;rsquo; 路线: 依然是一个内容页模板, 但是 聚集三个页面的内容, 比如分成三个 div, 通过js 默认第一个 div 显示, 另两个不显示, 然后点击哪个 div, 哪个 div 显示, 其它的隐藏</description></item><item><title>帝国cms(v7-5)-在内容模板中使用-truetime-字段</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcmsv7-5-%E5%9C%A8%E5%86%85%E5%AE%B9%E6%A8%A1%E6%9D%BF%E4%B8%AD%E4%BD%BF%E7%94%A8-truetime-%E5%AD%97%E6%AE%B5/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcmsv7-5-%E5%9C%A8%E5%86%85%E5%AE%B9%E6%A8%A1%E6%9D%BF%E4%B8%AD%E4%BD%BF%E7%94%A8-truetime-%E5%AD%97%E6%AE%B5/</guid><description>truetime 是真实发布时间, 也就是后台 mysql 执行 insert 的时间; lastdotime 是真实更新时间, 也就是后台 mysql 执行 update 的时间; newstime 是发布时间, 由用户自定义, 在新增信息时, 表单中自行填写;
// 在模板中直接使用 $nvainfor 数组进行调用, 比如: &amp;lt;br&amp;gt;navinfor[id]-&amp;lt;?=$navinfor[id]?&amp;gt; &amp;lt;br&amp;gt;navinfor[content]-&amp;lt;?=$navinfor[content]?&amp;gt; &amp;lt;br&amp;gt;navinfor[newstime]-&amp;lt;?=$navinfor[newstime]?&amp;gt; &amp;lt;br&amp;gt;navinfor[truetime]-&amp;lt;?=$navinfor[truetime]?&amp;gt; &amp;lt;br&amp;gt;navinfor[lastdotime]-&amp;lt;?=$navinfor[lastdotime]?&amp;gt; ps: 使用 $navinfor 可以访问当前记录(1条)的全部字段信息, 使用 [!&amp;ndash;id&amp;ndash;] 方式只能访问到部分信息 见: http://www.phome.net/doc/manual/template/
原文见: http://www.phome.net/doc/manual/template/html/other.html#q17</description></item><item><title>如何减少-if---else----甚至-switch-的使用</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91-if---else----%E7%94%9A%E8%87%B3-switch-%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91-if---else----%E7%94%9A%E8%87%B3-switch-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>需求: $str = &amp;#39;1,3,5&amp;#39;; // 变成 &amp;#39;abc,ghi,mno&amp;#39; $arr = [ [ &amp;#39;id&amp;#39;=&amp;gt;1, &amp;#39;name&amp;#39;=&amp;gt;&amp;#39;abc&amp;#39; ], [ &amp;#39;id&amp;#39;=&amp;gt;2, &amp;#39;name&amp;#39;=&amp;gt;&amp;#39;def&amp;#39; ], [ &amp;#39;id&amp;#39;=&amp;gt;3, &amp;#39;name&amp;#39;=&amp;gt;&amp;#39;ghi&amp;#39; ], [ &amp;#39;id&amp;#39;=&amp;gt;4, &amp;#39;name&amp;#39;=&amp;gt;&amp;#39;jkl&amp;#39; ], [ &amp;#39;id&amp;#39;=&amp;gt;5, &amp;#39;name&amp;#39;=&amp;gt;&amp;#39;mno&amp;#39; ], ]; 使用 if..else 或 switch 方法可以完成
现考虑不使用这两种方式作法:
思路: 把下面的 id 值作为键, name 值作为值, 重新构成一个数组 $arr2, 从 $str 中获取数字 如1, 使用 $arr2[&amp;lsquo;1&amp;rsquo;] 来获取对应的 name
php解法: // 1. 把当前 $arr 转成 目标数组 $arr2 $arr2 = []; foreach ($arr as $v) { $arr2[$v[&amp;#39;id&amp;#39;]] = $v[&amp;#39;name&amp;#39;]; } $str_to_arr = implode(&amp;#39;,&amp;#39;, $str);// [1,3,5] $str_to_arr = array_map(function(value){ return $arr2[&amp;#39;value&amp;#39;]; }) $str2 = join(&amp;#39;,&amp;#39;, $str_to_arr); JS 解法: js 只支持索引数组, 不支持关联数组, 但是 ES6 的 Map 对象支持任意的键或值 var str = &amp;#39;1,3,5&amp;#39;; var data = [ { id: 1, name: &amp;#39;中国&amp;#39; }, { id: 2, name: &amp;#39;美国&amp;#39; }, { id: 3, name: &amp;#39;日本&amp;#39; }, { id: 4, name: &amp;#39;韩国&amp;#39; }, { id: 5, name: &amp;#39;俄国&amp;#39; } ]; console.</description></item><item><title>什么是BFC---BFC的原理及作用-</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BB%80%E4%B9%88%E6%98%AFbfc---bfc%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8-/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BB%80%E4%B9%88%E6%98%AFbfc---bfc%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8-/</guid><description>原文见: https://www.cnblogs.com/libin-1/p/7098468.html 和 https://www.jianshu.com/p/acf76871d259
##BFC定义 在一个Web页面的CSS渲染中，块级格式化上下文 (Block Fromatting Context) 是按照块级盒子布局的。W3C对BFC的定义如下：
浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions）， 以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。 一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可： 1、float的值不是none。 2、position的值不是static或者relative。 3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex 4、overflow的值不是visible
BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。
##BFC的作用
######1. 清除内部浮动 我们在布局时经常会遇到这个问题：对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。 解决这个问题，只需要把把父元素变成一个BFC就行了。常用的办法是给父元素设置overflow:hidden。 ######2. 垂直margin合并 在CSS当中，相邻的两个盒子的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。 折叠的结果： 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 两个外边距一正一负时，折叠结果是两者的相加的和。 这个同样可以利用BFC解决。关于原理在前文已经讲过了。
######3. 创建自适应两栏布局 在很多网站中，我们常看到这样的一种结构，左图片+右文字的两栏结构。</description></item><item><title>使用-gregwar-captcha-生成固定字符的验证码</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%BD%BF%E7%94%A8-gregwar-captcha-%E7%94%9F%E6%88%90%E5%9B%BA%E5%AE%9A%E5%AD%97%E7%AC%A6%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%BD%BF%E7%94%A8-gregwar-captcha-%E7%94%9F%E6%88%90%E5%9B%BA%E5%AE%9A%E5%AD%97%E7%AC%A6%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81/</guid><description>使用 gregwar/captcha 可以方便地生成验证码图片(直接输出或 base64)
$builder = new CaptchaBuilder; $builder-&amp;gt;build(); $text = $builder-&amp;gt;getPhrase(); // 验证码文本 $pic = $builder-&amp;gt;inline();// base64 captcha 现如今在 laravel 本地环境中(非 production), 不想每次生成新的要去图片查验的验证码, 查看文档, 说是 &amp;ldquo;直接使用 $builder = new CaptchaBuilder('12345')&amp;rdquo;, 其中的 12345 (phrase) 必须为 string 但是这样再使用 $builder-&amp;gt;inline() 会报错, 无法生成验证码图片
经过查看 CaptchaBuilder.php 类文件, 比较两种方式有什么差别() 可以发现, 随机生成验证码我多走了一步 $builder-&amp;gt;build(), 而这正是通过 GD 库来绘制图片的步骤. 问题的原因找到了
看完 build() 方法会看到 return $this, 于是可以通过 $builder = $builder-&amp;gt;build() 来获取最新的实例, 接下来就可以使用 inline() 方法了
ps: 其实就算没有 return $this (不使用 $builder = $builder-&amp;gt;build() 而用 $builder-&amp;gt;build() ) 也可以正常返回 base64 图片, 因为图片内容在方法中传回给实例的属性了, 在 inline() 方法中会调到到这些属性</description></item><item><title>一道小题--获取本月有多少天</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%B8%80%E9%81%93%E5%B0%8F%E9%A2%98--%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%88%E6%9C%89%E5%A4%9A%E5%B0%91%E5%A4%A9/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%B8%80%E9%81%93%E5%B0%8F%E9%A2%98--%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%88%E6%9C%89%E5%A4%9A%E5%B0%91%E5%A4%A9/</guid><description>$today = &amp;#34;2018-8-8&amp;#34;; echo date(&amp;#39;t&amp;#39;,strtotime($today));// t 为本月天数, 28-31之间 // date() 函数可以直接得出, 避免了 复杂的判断 闰年,几月 等</description></item><item><title>jetbrains-ctrl+wheel-实现-zoom</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/jetbrains-ctrl+wheel-%E5%AE%9E%E7%8E%B0-zoom/</link><pubDate>Thu, 14 Apr 2022 16:42:26 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/jetbrains-ctrl+wheel-%E5%AE%9E%E7%8E%B0-zoom/</guid><description>参考: https://intellij-support.jetbrains.com/hc/en-us/community/posts/207002965-Font-Size-Zoom-In-Webstorm-10</description></item><item><title>go-自定义-struct-转-json</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E8%87%AA%E5%AE%9A%E4%B9%89-struct-%E8%BD%AC-json/</link><pubDate>Thu, 14 Apr 2022 16:13:08 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E8%87%AA%E5%AE%9A%E4%B9%89-struct-%E8%BD%AC-json/</guid><description>需求: 从 api 获取到 json, 本地 unmarshal 为 struct 后, 以另外的 json tag marhsal 为 json 字符串 type Student struct { Name string `json:&amp;#34;name&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } strIn := `{ &amp;#34;stu_name&amp;#34;: &amp;#34;Jim Green&amp;#34;, &amp;#34;age&amp;#34;: 14 }` // to json strOut := `{ &amp;#34;name&amp;#34;: &amp;#34;Jim Green&amp;#34;, &amp;#34;age&amp;#34;: 14 }` 使用到的方法 UmarshalJOSN / MarshalJSON
方法一: 通过中间 struct 变量的匿名嵌套 struct embedding (注意防止无限循环使用 alias) package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type Student struct { Name string `json:&amp;#34;name&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } func (s *Student) UnmarshalJSON(data []byte) error { type Alias Student aux := &amp;amp;struct { *Alias StuName string `json:&amp;#34;stu_name&amp;#34;` }{ Alias: (*Alias)(s), } if err := json.</description></item><item><title>linux-三命令(三剑客)之-sed</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E4%B8%89%E5%91%BD%E4%BB%A4%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8B-sed/</link><pubDate>Wed, 06 Apr 2022 17:48:29 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E4%B8%89%E5%91%BD%E4%BB%A4%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8B-sed/</guid><description>使用 sed 对文件进行文本替换 (windows 下也可用)
// 输出替换后的文本 sed &amp;#39;s/foo/bar/g&amp;#39; input.txt // 在原文件上进行修改 -i sed -i &amp;#39;s/foo/bar/g&amp;#39; input.txt // 要替换的文本中包含特殊字符 如 &amp;#39;/ &amp;#39;, 则使用 +/_或其它字符 作为分隔符 sed &amp;#39;s+http://+https://+g&amp;#39; input.txt 参考自: www.cyberciti.biz</description></item><item><title>vscode-中双击单词选择不被-短横线-分开</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/vscode-%E4%B8%AD%E5%8F%8C%E5%87%BB%E5%8D%95%E8%AF%8D%E9%80%89%E6%8B%A9%E4%B8%8D%E8%A2%AB-%E7%9F%AD%E6%A8%AA%E7%BA%BF-%E5%88%86%E5%BC%80/</link><pubDate>Thu, 31 Mar 2022 10:51:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/vscode-%E4%B8%AD%E5%8F%8C%E5%87%BB%E5%8D%95%E8%AF%8D%E9%80%89%E6%8B%A9%E4%B8%8D%E8%A2%AB-%E7%9F%AD%E6%A8%AA%E7%BA%BF-%E5%88%86%E5%BC%80/</guid><description>// 执行文字相关的导航或操作时将用作文字分隔符的字符
&amp;#34;editor.wordSeparators&amp;#34;: &amp;#34;`~!@#$%^&amp;amp;*()-=+[{]}\\|;:&amp;#39;\&amp;#34;,.&amp;lt;&amp;gt;/?&amp;#34;, 参考: segmentfault</description></item><item><title>go-判断-https-ssl-证书是否过期</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E5%88%A4%E6%96%AD-https-ssl-%E8%AF%81%E4%B9%A6%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F/</link><pubDate>Fri, 25 Mar 2022 13:03:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E5%88%A4%E6%96%AD-https-ssl-%E8%AF%81%E4%B9%A6%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F/</guid><description>package main import ( &amp;#34;crypto/tls&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { conn, err := tls.Dial(&amp;#34;tcp&amp;#34;, &amp;#34;blog.umesh.wtf:443&amp;#34;, nil) if err != nil { panic(&amp;#34;Server doesn&amp;#39;t support SSL certificate err: &amp;#34; + err.Error()) } err = conn.VerifyHostname(&amp;#34;blog.umesh.wtf&amp;#34;) if err != nil { panic(&amp;#34;Hostname doesn&amp;#39;t match with certificate: &amp;#34; + err.Error()) } expiry := conn.ConnectionState().PeerCertificates[0].NotAfter fmt.Printf(&amp;#34;Issuer: %s\nExpiry: %v\n&amp;#34;, conn.ConnectionState().PeerCertificates[0].Issuer, expiry.Format(time.RFC850)) } 参考自 freecodecamp</description></item><item><title>php-进程线程</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</link><pubDate>Thu, 24 Feb 2022 13:25:15 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</guid><description>进程与线程的概念:
进程是 一个时间段: CPU 上下文切换之间的程序运行时 线程是进程之中的多个程序段的运行时, 线程共享进程的地址空间 (知乎: 线程和进程的区别是什么？)[https://www.zhihu.com/question/25532384]
php-fpm 是进程, 每个请求是单线程的 多个请求是并发(多线程)的</description></item><item><title>Duck-Type-鸭子类型</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/duck-type-%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</link><pubDate>Wed, 23 Feb 2022 09:05:22 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/duck-type-%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid><description>Duck Typing is a [type system] used in dynamic languages. For example, Python, Perl, Ruby, PHP, Javascript, etc. where the type or the class of an object is less important than the method it defines. Using Duck Typing, we do not check types at all. Instead, we check for the presence of a given method or attribute.
reference: geeksforgeeks
按上述来说, 鸭子类型是动态语言的特性, 在动态语言中, 类型并不重要, 重要的是类型(实例)的方法</description></item><item><title>Linux-下-AX210NGW-无线网卡安装驱动</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E4%B8%8B-ax210ngw-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/</link><pubDate>Thu, 10 Feb 2022 13:36:53 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E4%B8%8B-ax210ngw-%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/</guid><description>参考: Linux* Support for Intel® Wireless Adapters
参考: https://wireless.wiki.kernel.org/en/users/drivers/iwlwifi 参考: https://www.intel.com/content/www/us/en/support/articles/000005511/wireless.html</description></item><item><title>html-打印显示页眉页脚及表格一行被分到两页的问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E6%89%93%E5%8D%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E7%9C%89%E9%A1%B5%E8%84%9A%E5%8F%8A%E8%A1%A8%E6%A0%BC%E4%B8%80%E8%A1%8C%E8%A2%AB%E5%88%86%E5%88%B0%E4%B8%A4%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 19 Jan 2022 18:38:17 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E6%89%93%E5%8D%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E7%9C%89%E9%A1%B5%E8%84%9A%E5%8F%8A%E8%A1%A8%E6%A0%BC%E4%B8%80%E8%A1%8C%E8%A2%AB%E5%88%86%E5%88%B0%E4%B8%A4%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>1. 每页表头问题 参考: The Ultimate Print HTML Template with Header &amp;amp; Footer | by Idan Cohen | Medium
使用 table 中的 thead 会在每页打印其中的内容, 而不需要打印页眉页脚的页面(头2页, 3页等), 继续使用 div static 布局
2. table row 被分到两页的问题 对 tr 使用 break-inside-avoid, break-after-auto 参考: How to Handle Page Breaks when Printing a Large HTML Table</description></item><item><title>删除文件夹中的node_modules子文件夹</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9A%84node_modules%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9/</link><pubDate>Sat, 18 Sep 2021 10:12:01 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9A%84node_modules%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9/</guid><description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;io/fs&amp;#34; &amp;#34;os&amp;#34; &amp;#34;path&amp;#34; &amp;#34;path/filepath&amp;#34; ) func main() { if len(os.Args) == 1 { panic(&amp;#34;Enter a file name&amp;#34;) } src := os.Args[1] var pathList []string err := filepath.Walk(src, func(path string, info fs.FileInfo, err error) error { if err != nil { return err } if info.IsDir() &amp;amp;&amp;amp; info.Name() == &amp;#34;node_modules&amp;#34; { return filepath.SkipDir } if info.IsDir() { return nil } path = filepath.ToSlash(path) pathList = append(pathList, path) return nil }) if err !</description></item><item><title>centos-部署-go-web</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/centos-%E9%83%A8%E7%BD%B2-go-web/</link><pubDate>Fri, 17 Sep 2021 09:27:47 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/centos-%E9%83%A8%E7%BD%B2-go-web/</guid><description>编译后的文件上传至服务器, 有两个事情要做, 一是把 web 应用做成守护进程启动, 二是端口开放
使用纯净 centos7 环境(justhost.ru vps, 非阿里云环境)
1. 防火墙开放端口 1.1 查看防火墙状态
firewall-cmd --state # running 1.2 如果没有开启, 启动防火墙
systemctl start firewalld.service 1.3 开放 8080 端口
firewall-cmd --zone=public --add-port=8080/tcp --permanent # 开放多个端口 firewall-cmd --add-port=8081-8100/tcp --permanent 1.4 重启防火墙
systemctl restart firewall.service 1.5 重载配置
firewall-cmd --reload 1.6 查看端口开启情况
netstat -nltp # 或者使用 firewall-cmd 查看 # 查看所有 firewall-cmd --list-all # 查看指定 firewall-cmd --query-port=8080/tcp 1.7 移除端口
firewall-cmd --remove-port=8080/tcp --permanent 2. supervisord 守护进程 2.</description></item><item><title>不使用-struct-定义-json-字符串</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%B8%8D%E4%BD%BF%E7%94%A8-struct-%E5%AE%9A%E4%B9%89-json-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Wed, 01 Sep 2021 09:07:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E4%B8%8D%E4%BD%BF%E7%94%A8-struct-%E5%AE%9A%E4%B9%89-json-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>// 方法一: 生写 string jsonStr := ` &amp;#34;name&amp;#34;: &amp;#34;Jack&amp;#34;, &amp;#34;age&amp;#34;: 25 ` // 方法二: map[string]interface{} jsonMap := map[string]interface{}{ &amp;#34;name&amp;#34;: &amp;#34;Jack&amp;#34;, &amp;#34;age&amp;#34;: 66, } jsonByte, _ = json.Marshal(jsonMap) jsonStr = string(jsonByte) 另外 jsonStr 转 io.Reader r := strings.NewReader(jsonStr)</description></item><item><title>匿名函数与闭包</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85/</link><pubDate>Tue, 27 Jul 2021 10:39:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85/</guid><description>程序语言支持匿名函数时, 可以由匿名函数形成闭包 闭包的作用 在函数外部使用函数内部的变量 函数内部变量的持久化 参考cnblog: 匿名函数，闭包</description></item><item><title>go-结构体实例化</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9E%E4%BE%8B%E5%8C%96/</link><pubDate>Fri, 16 Jul 2021 10:21:06 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9E%E4%BE%8B%E5%8C%96/</guid><description>type Block struct { length int height int } // 方式一 var a Block a.length = 1 a.height = 2 // 方式二 b := Block{1, 2} // 方式三 c := &amp;amp;Block{1, 2} // 方式四 d := new(Block) d.length = 1 d.height = 2 fmt.Println(a) fmt.Println(b) fmt.Println(c) fmt.Println(d) 方式一和二 相同, 结果都是 值对象 方式三和四 相同, 结果都是指针
值和指针的不同点在于, 如果需要对 结构体的实例进行修改时, 值需要加上 &amp;amp;, 而 指针不需要
如果一个 struct 内容很多, 占用内存大, 应该使用 指针而不是值来进行函数间的传递.
参考 segmentfault cnblog</description></item><item><title>跨站脚本(XSS)-与-跨站请求伪造(CSRF)</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%ACxss-%E4%B8%8E-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf/</link><pubDate>Wed, 16 Jun 2021 09:26:42 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%ACxss-%E4%B8%8E-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf/</guid><description>cross-site-scripting (XSS) 动态网站才会存在, 静态站点则不存在这个问题
对 XSS 最佳的防护应该结合以下两种方法
一是验证所有输入数据，进行转义 (escaper) 另一个是对所有输出数据进行适当的处理，以防止任何已成功注入的脚本在浏览器端运行。 cross-site-request-forgery (CSRF) 跟XSS相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是 网站 对 用户网页浏览器 的信任。
攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。 他们能做到的，是欺骗用户浏览器，让其以用户的名义运行操作
csrf 防护:
请求的 referer, 但不能保证 referer 不被篡改 随机生成的 校验token, 随表单页面一起生成, 并一起返回到后端 对于前后端分离的项目, 由于后端使用 token 进行用户身份验证, 所以即使 token 存储在 cookie 中, 也不会被 csrf 攻击.
learnku.com</description></item><item><title>使用-echo-写入文件</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/%E4%BD%BF%E7%94%A8-echo-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</link><pubDate>Thu, 22 Apr 2021 09:30:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/%E4%BD%BF%E7%94%A8-echo-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</guid><description>docker 容器内很可能没有 vi 等编辑工具, 可使用 echo 或 cat 进行写入
# 覆盖写入, 文件不存在则新建后写入 echo &amp;#34;abc&amp;#34; &amp;gt; file.txt # 尾行追加写入, 文件不存在则新建后写入 echo &amp;#34;def&amp;#34; &amp;gt;&amp;gt; file.txt echo $(date) &amp;gt;&amp;gt; file.txt # 覆盖写入 cat &amp;lt;&amp;lt; EOF &amp;gt; m.txt &amp;gt; d &amp;gt; e &amp;gt; f &amp;gt; EOF # 追加写入 cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; m.txt &amp;gt; d &amp;gt; e &amp;gt; f &amp;gt; EOF</description></item><item><title>flutter-gradle-问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/flutter-gradle-%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 24 Mar 2021 17:09:49 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/flutter-gradle-%E9%97%AE%E9%A2%98/</guid><description>更改 google() jcenter 无效后
gradle 下载地址 https://services.gradle.org/distributions/
参考: 快速解决 GRADLE 项目下载 gradle-*-all.zip 慢的问题</description></item><item><title>vmware-linux-网络配置</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/vmware-linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 11 Mar 2021 09:49:10 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/vmware-linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid><description>centos7.9
vmware 中设置 虚拟机网络连接为 桥接模式
虚拟机(centos) 中 设置 /etc/sysconfig/network-scripts/ifcfg-ens33 中 ONBOOT 为
[root@bogon ~]# cat /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=dhcp DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=7e16f33b-714d-4386-ab0c-58b6ddbc7aa3 DEVICE=ens33 #ONBOOT=no ONBOOT=yes</description></item><item><title>linux-更新-curl-版本</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E6%9B%B4%E6%96%B0-curl-%E7%89%88%E6%9C%AC/</link><pubDate>Tue, 09 Mar 2021 15:59:07 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E6%9B%B4%E6%96%B0-curl-%E7%89%88%E6%9C%AC/</guid><description>转自: How to yum update curl 7.29 to 7.61 - CentOS 7.X
# rpm -Uvh http://www.city-fan.org/ftp/contrib/yum-repo/city-fan.org-release-2-1.rhel7.noarch.rpm # cat /etc/yum.repos.d/city-fan.org.repo # 这里要保证 enabled = 1 [city-fan.org] name=city-fan.org repository for Red Hat Enterprise Linux (and clones) $releasever ($basearch) #baseurl=http://mirror.city-fan.org/ftp/contrib/yum-repo/rhel$releasever/$basearch mirrorlist=http://mirror.city-fan.org/ftp/contrib/yum-repo/mirrorlist-rhel$releasever enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-city-fan.org ... # yum info curl # yum update curl 版本回退
# mkdir ~/temp &amp;amp;&amp;amp; cd ~/temp # wget http://mirror.centos.org/centos/7.5.1804/os/x86_64/Packages/curl-7.29.0-46.el7.x86_64.rpm # wget http://mirror.centos.org/centos/7.5.1804/os/x86_64/Packages/libcurl-7.29.0-46.el7.x86_64.rpm # wget http://mirror.centos.org/centos/7.5.1804/os/x86_64/Packages/libcurl-devel-7.29.0-46.el7.x86_64.rpm # rpm -Uvh --oldpackage *.</description></item><item><title>goland-import-包报红</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/goland-import-%E5%8C%85%E6%8A%A5%E7%BA%A2/</link><pubDate>Fri, 19 Feb 2021 09:52:51 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/goland-import-%E5%8C%85%E6%8A%A5%E7%BA%A2/</guid><description>在使用 go mod 后(go 1.11 开始支持, go 1.14 全面推荐), 无需在 GOPATH 的 src 下存在项目目录, 可以随意存放.
go 包依赖管理 gopath &amp;gt; go vender &amp;gt; go module, 参考 # 一文搞懂 Go Modules 前世今生及入门使用
GOPATH 则只存放第三方包, 若不设置, 默认为 /[user]/go 目录
goland 配置 GOROOT, GOPATH 及 Go Modules
结果会在 External Libraries 中多出一个 Go Modules</description></item><item><title>php-生成文件流,-不生成本地文件</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E6%B5%81-%E4%B8%8D%E7%94%9F%E6%88%90%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 09 Feb 2021 09:36:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E6%B5%81-%E4%B8%8D%E7%94%9F%E6%88%90%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</guid><description>$string = &amp;#34;I tried, honestly! 中文&amp;#34;; $stream = fopen(&amp;#39;data://text/plain,&amp;#39; . $string,&amp;#39;r&amp;#39;); //file_put_contents(&amp;#39;./a.txt&amp;#39;, $stream); //echo stream_get_contents($stream); echo $stream; $string = &amp;#39;Some bad-ass string&amp;#39;; $stream = fopen(&amp;#39;php://memory&amp;#39;,&amp;#39;r+&amp;#39;); fwrite($stream, $string); rewind($stream); echo stream_get_contents($stream); 参考自: Creating streams from strings in PHP</description></item><item><title>chrome-禁用-6000-端口</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/chrome-%E7%A6%81%E7%94%A8-6000-%E7%AB%AF%E5%8F%A3/</link><pubDate>Tue, 09 Feb 2021 09:30:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/chrome-%E7%A6%81%E7%94%A8-6000-%E7%AB%AF%E5%8F%A3/</guid><description>今天使用 6000 端口, 发现不能用, 用 8000 没问题
一查, 原来 chrome 禁用了 6000
参考: Chrome,你这坑人的默认非安全端口</description></item><item><title>bilibli-网页视频加速播放</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/bilibli-%E7%BD%91%E9%A1%B5%E8%A7%86%E9%A2%91%E5%8A%A0%E9%80%9F%E6%92%AD%E6%94%BE/</link><pubDate>Tue, 29 Dec 2020 13:03:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/bilibli-%E7%BD%91%E9%A1%B5%E8%A7%86%E9%A2%91%E5%8A%A0%E9%80%9F%E6%92%AD%E6%94%BE/</guid><description>默认最高只能加速到 2 倍, 可使用 js 加速任意倍
document.querySelector(&amp;#39;video&amp;#39;).playbackRate = 3 参考:https://www.jianshu.com/p/b111e12ee269</description></item><item><title>类的-static-及-self</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E7%B1%BB%E7%9A%84-static-%E5%8F%8A-self/</link><pubDate>Mon, 21 Dec 2020 10:26:59 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E7%B1%BB%E7%9A%84-static-%E5%8F%8A-self/</guid><description>使用 self:: 或者 CLASS 对当前类的静态引用，指向 定义当前方法所在的类.
使用 static 对当前类的静态引用，指向 使用当前方法所在的类.
参见php.net 后期静态绑定</description></item><item><title>emmet-快速生成代码</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/emmet-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</link><pubDate>Fri, 11 Dec 2020 09:56:29 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/emmet-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</guid><description>想要 结果为
&amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;4&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;5&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;6&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;7&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;8&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;9&amp;lt;/div&amp;gt; 操作 :
div{$}*9 参考cnblog: VsCode中使用Emmet神器快速编写HTML代码</description></item><item><title>使用-js-改变-css(style)-样式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BD%BF%E7%94%A8-js-%E6%94%B9%E5%8F%98-cssstyle-%E6%A0%B7%E5%BC%8F/</link><pubDate>Thu, 10 Dec 2020 15:30:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BD%BF%E7%94%A8-js-%E6%94%B9%E5%8F%98-cssstyle-%E6%A0%B7%E5%BC%8F/</guid><description>要改变的是样式表, 如:
&amp;lt;style&amp;gt; a.active { color: red; } &amp;lt;/style&amp;gt; &amp;lt;script&amp;gt; document.styleSheets[0].add(&amp;#39;a.active&amp;#39;, &amp;#39;color: blue !important&amp;#39;) &amp;lt;script&amp;gt; 参考cnblog: JS设置CSS样式的几种方式</description></item><item><title>浏览器页面被禁用-F12(dev-tools)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E8%A2%AB%E7%A6%81%E7%94%A8-f12dev-tools/</link><pubDate>Thu, 26 Nov 2020 09:29:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E8%A2%AB%E7%A6%81%E7%94%A8-f12dev-tools/</guid><description>背景: 打开一个网页 havey.com, 使用不了 F12
解决办法1: 使用浏览器设置栏, 打开开发者工具, 设置-&amp;gt;更多工具-&amp;gt;开发者工具 解决办法2: 在页面还没完全打开时, 快速按下 F12
解决办法3: 命令行启动浏览器, 携带参数, 强制打开所有页面的 devtools
chrome.exe –auto-open-devtools-for-tabs –user-data-dir=./ 参考 it-refer.com</description></item><item><title>csrf-跨站请求伪造</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/csrf-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</link><pubDate>Fri, 20 Nov 2020 16:01:43 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/csrf-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</guid><description>CSRF（Cross-site request forgery）跨站请求伪造, 定义: 攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。 利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。 一个典型的CSRF攻击有着如下的流程:
受害者登录a.com，并保留了登录凭证（Cookie）。 攻击者引诱受害者访问了b.com。 b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。 a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。 a.com以受害者的名义执行了act=xx。 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。 前后端分离时, 不使用 cookie, 则不会有 csrf 危险</description></item><item><title>ubuntu-apt-换源</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/ubuntu-apt-%E6%8D%A2%E6%BA%90/</link><pubDate>Wed, 11 Nov 2020 13:50:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/ubuntu-apt-%E6%8D%A2%E6%BA%90/</guid><description>// 1. /etc/apt/sources.list 文件备份 cp -a /etc/apt/sources.list /etc/apt/sources.list.bak // 2. 修改 sources.list 文件 sudo vim sources.list tips:
阿里源文件: 出现 /etc/apt/sources.list&amp;quot; E212: Can&amp;rsquo;t open file for writing 解决方案 , 可能是因为用户权限不足, 使用 root 或 sudo vim 试试 参考自: /etc/apt/sources.list&amp;quot; E212: Can&amp;rsquo;t open file for writing</description></item><item><title>linux-生成带日期的文件</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E7%94%9F%E6%88%90%E5%B8%A6%E6%97%A5%E6%9C%9F%E7%9A%84%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 11 Nov 2020 11:08:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E7%94%9F%E6%88%90%E5%B8%A6%E6%97%A5%E6%9C%9F%E7%9A%84%E6%96%87%E4%BB%B6/</guid><description>// date 命令用于输出时间, 反引号用于变量输出 touch `data +%F`.txt.log</description></item><item><title>redhat7-systemd-和-systemctl</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/redhat7-systemd-%E5%92%8C-systemctl/</link><pubDate>Mon, 09 Nov 2020 09:45:17 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/redhat7-systemd-%E5%92%8C-systemctl/</guid><description>systemd 是系统管理守护进程, 其中的 d 表示 daemon systemctl 是命令, 其中的 ctl 表示 control 以下的 xxx 表示服务名称
systemctl start xxx =&amp;gt; 启动服务 systemctl restart xxx =&amp;gt; 重新启动服务 systemctl stop xxx =&amp;gt; 停止服务 systemctl enable xxx =&amp;gt; 加入到启动项 systemctl status xxx =&amp;gt; 查看状态 shell api: application interface 应用程序接口
硬件 &amp;lt;= 内核 &amp;lt;= api &amp;lt;= 应用程序
shell 是一种应用程序, 壳, 终端(解释器),
bash 是 shell 的一种
linux 命令 格式: 命令 参数 对象 ls -a / 参数和对象有时可不需要</description></item><item><title>vscode-jsx-中-html-标签按-tab-不自动生成标签</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/vscode-jsx-%E4%B8%AD-html-%E6%A0%87%E7%AD%BE%E6%8C%89-tab-%E4%B8%8D%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%A0%87%E7%AD%BE/</link><pubDate>Wed, 21 Oct 2020 15:00:52 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/vscode-jsx-%E4%B8%AD-html-%E6%A0%87%E7%AD%BE%E6%8C%89-tab-%E4%B8%8D%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%A0%87%E7%AD%BE/</guid><description>设置: &amp;ldquo;emmet.triggerExpansionOnTab&amp;rdquo;: true
参考思否:vs code设置支持jsx支持emmet</description></item><item><title>npm-scripts-使用</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/npm-scripts-%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 20 Oct 2020 14:32:49 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/npm-scripts-%E4%BD%BF%E7%94%A8/</guid><description>背景: 项目安装了 browserify &amp;ndash;save-dev, 如何在命令行中使用这个命令
这个命令的位置在 node_modules/.bin/ 目录下, 可以在终端使用
node_modules/.bin/browserify --version 也可以在 package.json 中使用
&amp;#34;scripts&amp;#34;: { &amp;#34;prebuild&amp;#34;: &amp;#34;rm -rf ./js/dist/*&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;browserify ./js/src/app.js -o ./js/dist/bundle.js&amp;#34; } 参考自阮一峰博客: npm scripts 使用指南</description></item><item><title>js-数组反转,-不改变原来的数组</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%8F%8D%E8%BD%AC-%E4%B8%8D%E6%94%B9%E5%8F%98%E5%8E%9F%E6%9D%A5%E7%9A%84%E6%95%B0%E7%BB%84/</link><pubDate>Tue, 20 Oct 2020 10:58:28 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%8F%8D%E8%BD%AC-%E4%B8%8D%E6%94%B9%E5%8F%98%E5%8E%9F%E6%9D%A5%E7%9A%84%E6%95%B0%E7%BB%84/</guid><description>array.reverse(), 会改变原来的数组, 并返回该数组
如果要不改变原数组, 需要完全复制一份新的数组
const arr = [1,2,3] // 1. ... const arr2 = [...arr].reverse() // 2. slice() const arr3 = arr.slice().reverse()</description></item><item><title>php-的-session-文件</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E7%9A%84-session-%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 12 Oct 2020 15:34:47 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E7%9A%84-session-%E6%96%87%E4%BB%B6/</guid><description>由于 http 无状态性, 一般 MVC 可以使用session 用于存储用户信息.
&amp;lt;?php session_start(); // 开启 session, 将会生成一个 session_id, 通过 http 响应头返回给浏览器, 浏览器存储到本地的 cookie 中, 下次 http 请示会自动携带给服务端; // 同时会在服务端生成一个文件 如 sess_2rh6hq44kjbtagri2r88dj16b1 (后面一串为 session_id), 当前会话(通过 id保持) 的数据, 会保存在该文件中, 如 session(&amp;#39;name&amp;#39;, &amp;#39;test&amp;#39;) session_unset(); // 注销当前会话下的 session 变量, 但不会删除当前 sess_xxxx... 文件, 而是清空文件里的内容(key: value)</description></item><item><title>redux-的-reducer-函数不能改变原-state</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/redux-%E7%9A%84-reducer-%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E6%94%B9%E5%8F%98%E5%8E%9F-state/</link><pubDate>Wed, 23 Sep 2020 15:21:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/redux-%E7%9A%84-reducer-%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E6%94%B9%E5%8F%98%E5%8E%9F-state/</guid><description>可以使用如下方法来完全复制原来的 state, 再进行操作
对于数组: concat, slice, 或 spread operator 对于对象: Object.assign 或 spread operator 参考 valentinog.com</description></item><item><title>Pure-Fuction-纯函数的定义</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/pure-fuction-%E7%BA%AF%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</link><pubDate>Wed, 23 Sep 2020 10:53:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/pure-fuction-%E7%BA%AF%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</guid><description>Pure Function wiki definition:
In computer programming a pure function is a that has the following properties:
Its return value is the same for the same arguments. Its evaluation has no side effects. 同样参数总是返回相同的结果, 也就是函数内部没有随机生成的数 没有副作用, 指的是不会改变其它的变量的值, 不会有日志记录等 redux 的 reducer 中使用 纯函数, 输入一个 state, 在不改变输入的 state 的情况下, 返回一个 新的 state</description></item><item><title>小程序-tips</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%B0%8F%E7%A8%8B%E5%BA%8F-tips/</link><pubDate>Thu, 17 Sep 2020 10:13:53 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%B0%8F%E7%A8%8B%E5%BA%8F-tips/</guid><description>一个页面中表单的 input 不能有相同的 name 值, 否则只有一个能输入</description></item><item><title>webstorm-不提示-react-router-dom-中的-hooks(useRouteMatch-)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/webstorm-%E4%B8%8D%E6%8F%90%E7%A4%BA-react-router-dom-%E4%B8%AD%E7%9A%84-hooksuseroutematch-/</link><pubDate>Thu, 17 Sep 2020 10:12:45 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/webstorm-%E4%B8%8D%E6%8F%90%E7%A4%BA-react-router-dom-%E4%B8%AD%E7%9A%84-hooksuseroutematch-/</guid><description>现象: import { BrowserRouter, Switch, // 不提示 Route, // 不提示 NavLink, useRouteMatch // 不提示 } from &amp;#39;react-router-dom&amp;#39; 原因: // react-router-dom.js export { MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter } from &amp;#39;react-router&amp;#39;; Switch, Route, useRouteMatch &amp;hellip; 这类组件(或函数) 不是真正存在于 react-router-dom.js 文件中, 而是存在于 react-router.js 中导致 WebStorm 没有识别出来.
解决办法: 在 package.json 文件的 dependencies 加入 react-router &amp;#34;react-router&amp;#34;: &amp;#34;^5.2.0&amp;#34;, // 加入此行 &amp;#34;react-router-dom&amp;#34;: &amp;#34;^5.2.0&amp;#34;, 参考自 stackoverflow: Why does IntelliJ does not auto import react router hooks?</description></item><item><title>react-router-中-path-和-url-的关系</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-router-%E4%B8%AD-path-%E5%92%8C-url-%E7%9A%84%E5%85%B3%E7%B3%BB/</link><pubDate>Wed, 16 Sep 2020 13:37:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-router-%E4%B8%AD-path-%E5%92%8C-url-%E7%9A%84%E5%85%B3%E7%B3%BB/</guid><description>// jsx let match = useRouteMatch() console.log(match) // isExact: true // params: {topicId: &amp;#34;6&amp;#34;} // path: &amp;#34;/topics/:topicId&amp;#34; // url: &amp;#34;/topics/6&amp;#34; 在动态路由中 其中, path 指的是路由的名称, 路径; url 指的是当前页面真实的地址, 也就是地址栏中显示的 url
在非动态路由中, 二者是一样的</description></item><item><title>react-把一个组件的-props-全部传给子组件</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-%E6%8A%8A%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84-props-%E5%85%A8%E9%83%A8%E4%BC%A0%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6/</link><pubDate>Wed, 16 Sep 2020 10:32:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-%E6%8A%8A%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84-props-%E5%85%A8%E9%83%A8%E4%BC%A0%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6/</guid><description>背景: 自定义了一个 MyNavLink, 统一修改了 activeClassName, 其它属性由 MyNavLink 转发到 NavLink
// 定义组件 function MyNavLink(props) { return &amp;lt;NavLink activeClassName=&amp;#39;my-active&amp;#39; {...props}/&amp;gt; } // 使用 &amp;lt;MyNavLink to=&amp;#39;/home&amp;#39; className=&amp;#39;link&amp;#39;}&amp;gt;a link&amp;lt;/MyNavLink&amp;gt; 关键: 使用 ... 对 props 进行解构</description></item><item><title>一个div内的两个行内块级元素(一个有内容,-一个无内容)不对齐</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%B8%80%E4%B8%AAdiv%E5%86%85%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%80%E4%B8%AA%E6%9C%89%E5%86%85%E5%AE%B9-%E4%B8%80%E4%B8%AA%E6%97%A0%E5%86%85%E5%AE%B9%E4%B8%8D%E5%AF%B9%E9%BD%90/</link><pubDate>Wed, 09 Sep 2020 09:24:03 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%B8%80%E4%B8%AAdiv%E5%86%85%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%80%E4%B8%AA%E6%9C%89%E5%86%85%E5%AE%B9-%E4%B8%80%E4%B8%AA%E6%97%A0%E5%86%85%E5%AE%B9%E4%B8%8D%E5%AF%B9%E9%BD%90/</guid><description>&amp;lt;style&amp;gt; .inline-block { display: inline-block; width: 100px; height: 100px; background-color: #aaa; /*vertical-align: middle;*/ } &amp;lt;/style&amp;gt; ... &amp;lt;div&amp;gt; &amp;lt;div class=&amp;#34;inline-block&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;inline-block&amp;gt;x&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 原因: 基线不一致 解决: 给 inline-block 类添加 veritcal-align
参考自csdn</description></item><item><title>js-疑难问题解决</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link><pubDate>Fri, 04 Sep 2020 08:41:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid><description>this 指向问题 setTimeout 解决 参考hacpai: vue 疑难杂症三大定理</description></item><item><title>清空(重置)-input-(tupe=file)-的-fileList</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B8%85%E7%A9%BA%E9%87%8D%E7%BD%AE-input-tupefile-%E7%9A%84-filelist/</link><pubDate>Thu, 03 Sep 2020 09:43:06 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B8%85%E7%A9%BA%E9%87%8D%E7%BD%AE-input-tupefile-%E7%9A%84-filelist/</guid><description>清空 input type=“file” 有两种方式
&amp;lt;input type=&amp;#34;file&amp;#34;/&amp;gt; var file = document.getElementById(&amp;#39;file&amp;#39;); // 第一种 //虽然file的value值不能设为有内容的字符，但是可以设置为空字符 file.value = &amp;#39;&amp;#39; // 第二种重新初始化file的html file.outerHTML = file.outerHTML 转自: 站内</description></item><item><title>laravel-composer-dump-autoload-失败</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-composer-dump-autoload-%E5%A4%B1%E8%B4%A5/</link><pubDate>Fri, 28 Aug 2020 14:05:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-composer-dump-autoload-%E5%A4%B1%E8%B4%A5/</guid><description>报 class xxx not found
// 1. 执行 php artisan config:clear // 2. 再不行就执行 php artisan clear-compiled // 3. 再不行就把 vendor/composer/ 文件夹里 autoload_ 开头的文件删除</description></item><item><title>js-完全复制一个-数组,-而非引用复制</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AE%8C%E5%85%A8%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA-%E6%95%B0%E7%BB%84-%E8%80%8C%E9%9D%9E%E5%BC%95%E7%94%A8%E5%A4%8D%E5%88%B6/</link><pubDate>Thu, 20 Aug 2020 21:09:17 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AE%8C%E5%85%A8%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA-%E6%95%B0%E7%BB%84-%E8%80%8C%E9%9D%9E%E5%BC%95%E7%94%A8%E5%A4%8D%E5%88%B6/</guid><description>// 1. 引用复制, 共用内存 let arr = [1, 2, 3] let brr = arr brr.splice(1, 1) console.log(brr) // [1, 3] console.log(arr) // [1, 3] // 2. 完全复制, 不共享内存 let arr = [1, 2, 3] let brr = [...arr] brr.splice(1, 1) console.log(brr) // [1, 3] console.log(arr) // [1, 2, 3] 在 React 中对 state 数组数据的处理, 不要直接引用赋值, 而要完成复制赋值 因为直接修改 state 数据会对 React 性能调优造成影响</description></item><item><title>01-基本概念</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/01-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Thu, 06 Aug 2020 21:03:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/01-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>定义 数据结构: 数据之前的关系 算法定义: 解决问题的程序 数据结构分类 物理结构: 数据在存储设备上的存储方式. 又可分为 顺序存储(如 数组, 元素的存储位置是递增相邻的) 和 链式存储(由指针指示下一个数据的存储位置, 位置随机)
逻辑结构: 由代码表示的数据结构. 又可分为 集合, 链式结构, 树状结构(二叉树), 图状结构
算法复杂度: 时间复杂度 + 空间复杂度 时间复杂度, 指算法(程序代码)运行所耗的时长, 用 O() 表示 空间复杂度, 指算法(程序代码)运行所耗的内存 算法的特性 输入输出, 0个或多个输入, 至少1个输出 有穷性, 在有限的步骤内结束, 而不会无限循环(死循环) 确定性, 每一步骤有确定的含义, 不会出现二义性. 相同的输入, 只能输出相同的结果. 可行性, 每一步都是可行的.</description></item><item><title>js-对象的-key-是个变量时,-如果赋值</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E7%9A%84-key-%E6%98%AF%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E5%A6%82%E6%9E%9C%E8%B5%8B%E5%80%BC/</link><pubDate>Fri, 17 Jul 2020 11:49:36 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E7%9A%84-key-%E6%98%AF%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E5%A6%82%E6%9E%9C%E8%B5%8B%E5%80%BC/</guid><description>// react 中 this.setState(key, value){ [key]: value } 参考自 csdn:</description></item><item><title>taro-alias</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/taro-alias/</link><pubDate>Thu, 09 Jul 2020 09:27:08 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/taro-alias/</guid><description>官方文档: https://taro-docs.jd.com/taro/docs/config-detail 还要引入 path
const path = require(&amp;#39;path&amp;#39;) // 此步骤不能少 const config = { . . . alias: { &amp;#39;@/components&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/components&amp;#39;), &amp;#39;@/utils&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/utils&amp;#39;), &amp;#39;@/assets&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/assets&amp;#39;), &amp;#39;@/static&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/static&amp;#39;) }, . . . }</description></item><item><title>多个-eventListener,-如何取消</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%A4%9A%E4%B8%AA-eventlistener-%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88/</link><pubDate>Wed, 08 Jul 2020 23:35:08 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%A4%9A%E4%B8%AA-eventlistener-%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88/</guid><description>参考: JavaScript事件机制
背景: 在 taro3.0.2 中, 小程序端使用 onPullDown(), 会造成 h5 端可以下拉, 但是不正常(顶部出现下拉空白, 不可恢复)
后来发现 tao-tabbar__pannel 的 touchmove 事件造成的 于是要关闭这个事件, 但是 使用 removeEventListener 不管用, 使用 addEventListener 覆盖, 会发现会依次执行, 不会覆盖, 于是就有了参考文章里的方法 e.stopImmediatePropagation()
async componentDidMount() { // h5 不支持下拉刷新, 下拉会出现空白, 且不消失 if (process.env.TARO_ENV === &amp;#39;h5&amp;#39;) { const obj = document.getElementsByClassName(&amp;#39;taro-tabbar__panel&amp;#39;) obj[0].addEventListener(&amp;#39;touchmove&amp;#39;, function (e) { e.stopImmediatePropagation() e.preventDefault() }) } . . . }</description></item><item><title>react-render(),-组件名</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-render-%E7%BB%84%E4%BB%B6%E5%90%8D/</link><pubDate>Thu, 02 Jul 2020 14:59:54 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-render-%E7%BB%84%E4%BB%B6%E5%90%8D/</guid><description>render 方法中只能有一个 顶级父元素
// 正确 render() { &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;1111&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;2222&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; } // 错误 render() { &amp;lt;p&amp;gt;1111&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;2222&amp;lt;/p&amp;gt; } 组件类名及 html 标签 的名称必须 首字母大写</description></item><item><title>phpstorm-`safe-write`</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-safe-write/</link><pubDate>Tue, 09 Jun 2020 10:20:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-safe-write/</guid><description>
settings -&amp;gt; appearance&amp;amp;behavior -&amp;gt; system settings -&amp;gt; safe write
该(默认)设置会导致使用 phpstorm 写 taro 时, 变动文件时报 找不到 .jax___hv_temp___ 文件的错</description></item><item><title>vue-awesome-swiper-响应式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-awesome-swiper-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Mon, 01 Jun 2020 09:54:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-awesome-swiper-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>使用 vue-awesome-swiper 版本为 3.1.4 (对应的 swiper 版本为 swiper4)
// 先用原生 js + swiper4 写了一个响应式 demo.html, 每次 resize 重新 new 一个 swiper &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/css/swiper.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/js/swiper.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .swiper-container { position: relative; margin: 0 auto; } .swiper-slide { background-color: #eee; text-align: center; } .avatar { width: 120px; border-radius: 50%; /*margin: 0 auto;*/ } p.</description></item><item><title>Git-Commit-Message-Conventions</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/git-commit-message-conventions/</link><pubDate>Fri, 15 May 2020 10:40:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/git-commit-message-conventions/</guid><description>Git Commit Message Conventions Goals auto-generate CHANGELOG.md specify commit-logs of sepcial types (ignore unimportant commits) Format git commit -m &amp;#34;[header]&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;):&amp;lt;subject&amp;gt;[/header] [blankline/] [body]&amp;lt;body&amp;gt;[/body] [blankline/] [footer] &amp;lt;breaking changes&amp;gt; &amp;lt;referencing issues&amp;gt; [/footer] &amp;#34; type feat(feature) fix(bug fix) docs(documentation) style(formatting, missing semi colons,&amp;hellip;) refactor test(when adding missing tests) chore(maintain) scope Anything specifying place of commit change. For example $browser, $compile, $rootScope&amp;hellip;
subject(text) Short description of the change.
imperative, present tense: &amp;ldquo;change&amp;rdquo; not &amp;ldquo;changed&amp;rdquo; nor &amp;ldquo;changes&amp;rdquo; don&amp;rsquo;t capitalize first letter not dot(.</description></item><item><title>composer-version-constraint</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/composer-version-constraint/</link><pubDate>Fri, 15 May 2020 09:26:13 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/composer-version-constraint/</guid><description>Tilde ~2.1, means 2.1.0 &amp;lt;= version &amp;lt; 3.0.0 ~2.1.1, means 2.1.1 &amp;lt;= version &amp;lt; 2.2.0 Caret // - ^2.1, means 2.1.0 &amp;lt;= version &amp;lt; 3.0.0
^2.1.1, means 2.1.0 &amp;lt;= version &amp;lt; 3.0.0 Wildcard 2.1.*, means 2.1.0 &amp;lt;= version &amp;lt; 2.2.0 reference: composer</description></item><item><title>正则表达式不包含-xx</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E5%8C%85%E5%90%AB-xx/</link><pubDate>Tue, 21 Apr 2020 14:39:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E5%8C%85%E5%90%AB-xx/</guid><description>如: http://www.hao123.com/* 不包含 http://www.hao123.com/abc 中有 abc 的情况
// js const str = &amp;#39;http://www.hao123.com/abc&amp;#39; const reg = /^htpp:\/\/www\.hao123\.com\/(?!abc).*$/ reg.test(str)</description></item><item><title>查询字段是否含有中文</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87/</link><pubDate>Sun, 16 Feb 2020 21:20:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87/</guid><description>SELECT col FROM table WHERE length(col)!=char_length(col) 通过查询长度和字符个数是否相等, 相等则不包含中文, 不相等则包含中文
原文见cnblog</description></item><item><title>mouseout-和--mouseleave</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/mouseout-%E5%92%8C--mouseleave/</link><pubDate>Thu, 16 Jan 2020 16:55:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/mouseout-%E5%92%8C--mouseleave/</guid><description>在 firefox 和 chrome 中有不同的表现
在 firefox 中 mouseout 和 mouseleave 一样, 在 chrome 中, mouseout 是离开当前元素(不包括子元素)</description></item><item><title>限制-div-或-p-内文本行数</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%99%90%E5%88%B6-div-%E6%88%96-p-%E5%86%85%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0/</link><pubDate>Wed, 15 Jan 2020 10:24:09 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%99%90%E5%88%B6-div-%E6%88%96-p-%E5%86%85%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0/</guid><description>/* css */ .text { overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; } 注意
不能设置行高 不论设备窗口多大 (pc, mobile), 始终显示指定行数</description></item><item><title>laravel-多对多关联时,-会出现-pivot-字段,-如何删除</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%E6%97%B6-%E4%BC%9A%E5%87%BA%E7%8E%B0-pivot-%E5%AD%97%E6%AE%B5-%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4/</link><pubDate>Mon, 13 Jan 2020 10:28:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%E6%97%B6-%E4%BC%9A%E5%87%BA%E7%8E%B0-pivot-%E5%AD%97%E6%AE%B5-%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4/</guid><description>$user-&amp;gt;roles-&amp;gt;makeHidden(&amp;#39;pivot&amp;#39;); // 或者在 model 中 protect $hidden = [&amp;#39;pivot&amp;#39;];</description></item><item><title>laravel-wechat-公众号更换url时报-token-验证失败</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-wechat-%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9B%B4%E6%8D%A2url%E6%97%B6%E6%8A%A5-token-%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/</link><pubDate>Mon, 30 Dec 2019 16:58:43 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-wechat-%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9B%B4%E6%8D%A2url%E6%97%B6%E6%8A%A5-token-%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/</guid><description> VerifyCsrfToken 中间件, 排除 微信相关的 路由, 见文档 是否开启了 debugbar, 关闭之, 见github</description></item><item><title>微信开发者工具报-Provisional-headers-are-shown</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E6%8A%A5-provisional-headers-are-shown/</link><pubDate>Fri, 20 Dec 2019 14:56:59 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E6%8A%A5-provisional-headers-are-shown/</guid><description>表现为没有响应结果
原因可能是 ios 设备对 get 请求头长度限制, 更换为 andriod 设备后没问题, 再换回 iphone 突然也好了 可能与设置的 axios.defaults.retry 及 axios.defaults.retryDelay 有关 参考:</description></item><item><title>axios-304-而无法正常拿到数据</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/axios-304-%E8%80%8C%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 20 Dec 2019 14:54:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/axios-304-%E8%80%8C%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE/</guid><description>服务器报 304 的原理: 客户端第一次向服务端请求资源时, 服务端响应 200 并在响应头中返回一个 ETag 值 客户端再次向服务端请求同一个资源( url 未变), 此时会带上上一次服务端返回的 ETag, 服务器检查其自身内容的 ETag 值是否与其一致，如果一致就会返回 304 状态码，告诉你内容和你保存的一致，没有发生改变过。 解决办法: 在请求头中加入 'Cache-Control': 'no-cache' // axios 封装时, 全局设置 const options = { headers: { &amp;#39;Cache-Control&amp;#39;: &amp;#39;no-cache&amp;#39; } } const client = axios.create(options) 在请求中添加一个随机的查询字符串, 如 ?query=时间戳 参考:</description></item><item><title>微信开发者工具中-xhr-请求-status-200-但-failed-to-load-response-data</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%B8%AD-xhr-%E8%AF%B7%E6%B1%82-status-200-%E4%BD%86-failed-to-load-response-data/</link><pubDate>Mon, 16 Dec 2019 14:05:06 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%B8%AD-xhr-%E8%AF%B7%E6%B1%82-status-200-%E4%BD%86-failed-to-load-response-data/</guid><description>解决办法: 关闭 preserve log
原因: 未知
参考 segmentfault:</description></item><item><title>boostrap4-按屏幕尺寸显示和隐藏</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/boostrap4-%E6%8C%89%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E8%97%8F/</link><pubDate>Tue, 03 Dec 2019 15:13:28 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/boostrap4-%E6%8C%89%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E8%97%8F/</guid><description>原文见
&amp;lt;!-- sm 及以下隐藏: 全部隐藏, md 及以上显示(block) --&amp;gt; &amp;lt;div class=&amp;#34;d-none d-md-block&amp;#34;&amp;gt; hello bootstrap &amp;lt;/div&amp;gt;</description></item><item><title>git-删除-untracted-files-(dirs)</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E5%88%A0%E9%99%A4-untracted-files-dirs/</link><pubDate>Mon, 02 Dec 2019 09:57:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E5%88%A0%E9%99%A4-untracted-files-dirs/</guid><description>git clean -fd
# 删除 untracked files git clean -f # 连 untracked 的目录也一起删掉 git clean -fd # 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的） git clean -xfd # 在用上述 git clean 前，建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删 git clean -nxfd git clean -nf git clean -nfd** 转自csdn</description></item><item><title>js-邮箱正则</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%82%AE%E7%AE%B1%E6%AD%A3%E5%88%99/</link><pubDate>Wed, 27 Nov 2019 16:43:50 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%82%AE%E7%AE%B1%E6%AD%A3%E5%88%99/</guid><description>let reg = new RegExp(&amp;#34;^[a-z0-9A-Z]+[- | a-z0-9A-Z . _]+@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-z]{2,}$&amp;#34;) reg.test(&amp;#39;123456@qq.com&amp;#39;)</description></item><item><title>element-ui-一系列-then,-catch-事件转成-async-await</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E4%B8%80%E7%B3%BB%E5%88%97-then-catch-%E4%BA%8B%E4%BB%B6%E8%BD%AC%E6%88%90-async-await/</link><pubDate>Mon, 25 Nov 2019 10:36:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E4%B8%80%E7%B3%BB%E5%88%97-then-catch-%E4%BA%8B%E4%BB%B6%E8%BD%AC%E6%88%90-async-await/</guid><description>// message box async open() { const res = await this.$confirm(&amp;#39;此操作将永久删除该文件, 是否继续?&amp;#39;, &amp;#39;提示&amp;#39;).catch(_ =&amp;gt; { console.log(&amp;#39;已取消, 结束&amp;#39;) }) if (res !== &amp;#39;confirm&amp;#39;) { return } console.log(res, &amp;#34;已确认, 可以next&amp;#34;) } 原文参见 csdn</description></item><item><title>nuxt-部署并使用-nginx-作端口转发</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BD%BF%E7%94%A8-nginx-%E4%BD%9C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</link><pubDate>Thu, 14 Nov 2019 14:51:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BD%BF%E7%94%A8-nginx-%E4%BD%9C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</guid><description>代码上传 linux 服务器后, 注意 windows 下开发的 node-sass 包需要重新安装(npm rebuild node-sass), 打包 nuxt 项目 npm run build
pm2 启动 nuxt start, 在项目根目录下 pm2 start node_modules/nuxt/bin/nuxt.js -- start
配置 nginx 文件
// 最简配置 server { listen 80; server_name www.nuxt-project.com; location / { proxy_pass http://127.0.0.1:3000; } } 部署时遇到一个问题, nuxt 代码里的 api 请求地址是本地的, 放到服务器也没改, 造成会返 500
部署也可参照 nuxt 官方部署文档</description></item><item><title>element-ui-响应式布局-span-不能为0</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-span-%E4%B8%8D%E8%83%BD%E4%B8%BA0/</link><pubDate>Wed, 13 Nov 2019 15:33:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-span-%E4%B8%8D%E8%83%BD%E4%B8%BA0/</guid><description>&amp;lt;el-col :md=&amp;#34;{span:8}&amp;#34; :sm=&amp;#34;{span:0}&amp;#34; :xs=&amp;#34;{span:0}&amp;#34;&amp;gt; .... &amp;lt;/el-col &amp;gt; 会导致样式混乱, 达不到想要的隐藏效果, 可以用 .hidden-sm-and-down 类来实现</description></item><item><title>golang-删除-slice-中的部分元素</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/golang-%E5%88%A0%E9%99%A4-slice-%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%85%83%E7%B4%A0/</link><pubDate>Fri, 08 Nov 2019 16:08:40 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/golang-%E5%88%A0%E9%99%A4-slice-%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%85%83%E7%B4%A0/</guid><description>golang 对 slice 的操作全在 [:] 中 和 append
// 删除切片的第三个元素 sslice := []int{0,1,2,3,4} sslice = append(sslice[:2], sslice[3:]...) Notice
sslice[A:B], 包涵 A, 不包括 B; 若 A = B,包涵 A append 第一个参数为 切片, 第二(三,四)个参数为 元素, 若为 切片, 可以使用 &amp;hellip; 分解 (析构) 为元素</description></item><item><title>golang-给-struct-赋值-nil</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/golang-%E7%BB%99-struct-%E8%B5%8B%E5%80%BC-nil/</link><pubDate>Fri, 08 Nov 2019 15:28:22 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/golang-%E7%BB%99-struct-%E8%B5%8B%E5%80%BC-nil/</guid><description>struct ListNode { Val int Next *ListNode } var li *ListNode = nil 原文见csdn</description></item><item><title>nginx-autoindex-off</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/nginx-autoindex-off/</link><pubDate>Thu, 07 Nov 2019 12:52:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/nginx-autoindex-off/</guid><description>nginx autoindex off 禁止目录访问</description></item><item><title>go-环境变量设置-proxy</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE-proxy/</link><pubDate>Wed, 06 Nov 2019 17:08:15 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/go-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE-proxy/</guid><description>Go version &amp;gt;= 1.13 当你的GO的版本大于1.13的时候 当你安装的GO的语言版本大于1.13的时候，那么就不用这么麻烦了，直接使用go env -w命令就行了
go env -w GOPROXY=https://goproxy.io,direct go env -w GOPRIVATE=*.corp.example.com go env -w GO111MODULE=on 转自掘金</description></item><item><title>nuxt-asyncData-多个接口异步</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-asyncdata-%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5/</link><pubDate>Mon, 04 Nov 2019 13:05:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-asyncdata-%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5/</guid><description> 接口同步, 耗时长 async asyncData({$axios}){ let res1 = await $axios.get(&amp;#39;...&amp;#39;) let res2 = await $axios.get(&amp;#39;...&amp;#39;) return { res1: res1, res2: res2 } } 接口异步 async asyncData({$axios}){ let [res1, res2] = await Promise.all([ $axios.get(&amp;#39;...&amp;#39;), $axios.get(&amp;#39;...&amp;#39;) ]} return { res1: res1, res2: res2 }</description></item><item><title>goland-列编辑模式</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/goland-%E5%88%97%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 01 Nov 2019 10:50:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/goland-%E5%88%97%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F/</guid><description>shift + alt + insert 后按鼠标左键上下拖动即可
在 phpstorm 中使用 alt + 鼠标左键 上下拖动可直接进行列编辑模式, 在 goland 中为 alt + shift + 鼠标左键
另: 可 alt + 鼠标左键 单击选中多个光标进行编辑</description></item><item><title>页面重定向跳转</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%A1%B5%E9%9D%A2%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%B3%E8%BD%AC/</link><pubDate>Wed, 30 Oct 2019 09:37:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%A1%B5%E9%9D%A2%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%B3%E8%BD%AC/</guid><description>要求进入某个页面时直接跳转到另一个页面
之前都是在 script 中添加 window.location.href = 目标地址
今天 curl http://baidu.com 后发现一段代码
&amp;lt;html&amp;gt; &amp;lt;meta http-equiv=&amp;#34;refresh&amp;#34; content=&amp;#34;0;url=http://www.baidu.com/&amp;#34;&amp;gt; &amp;lt;/html&amp;gt; 使用 &amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=目标地址&amp;quot;&amp;gt; 也可以直接重定向到另一个网址</description></item><item><title>postman-请求参数类型</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/postman-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B/</link><pubDate>Tue, 29 Oct 2019 13:20:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/postman-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B/</guid><description> 查询字符串 路由参数 body 参数 请求头</description></item><item><title>搜索框中输入法弹出时,-按回车直接走了搜索</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%90%9C%E7%B4%A2%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5%E6%B3%95%E5%BC%B9%E5%87%BA%E6%97%B6-%E6%8C%89%E5%9B%9E%E8%BD%A6%E7%9B%B4%E6%8E%A5%E8%B5%B0%E4%BA%86%E6%90%9C%E7%B4%A2/</link><pubDate>Mon, 28 Oct 2019 09:41:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%90%9C%E7%B4%A2%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5%E6%B3%95%E5%BC%B9%E5%87%BA%E6%97%B6-%E6%8C%89%E5%9B%9E%E8%BD%A6%E7%9B%B4%E6%8E%A5%E8%B5%B0%E4%BA%86%E6%90%9C%E7%B4%A2/</guid><description>此时按下回车, 却到了搜索页面
解决办法, 把搜索事件的 按下 enter 事件改为 keydown.native.enter</description></item><item><title>js-对象深度复制</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%BA%A6%E5%A4%8D%E5%88%B6/</link><pubDate>Thu, 17 Oct 2019 16:47:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%BA%A6%E5%A4%8D%E5%88%B6/</guid><description>js 对象复制是地址传递, 而不是值传递, 可以使用如下方法进行``深度复制`
deepClone(origin) { let target = {} for (var prop in origin) { if (origin.hasOwnProperty(prop)) { if (typeof (origin[prop]) == &amp;#39;object&amp;#39; &amp;amp;&amp;amp; origin[prop]) { target[prop] = Object.prototype.toString.call(prop) == &amp;#39;[object Array]&amp;#39; ? [] : {} arguments.callee(origin[prop], target[prop]) //递归调用 } else { target[prop] = origin[prop] //原始类型直接复制 } } } return target }</description></item><item><title>windows-中使用命令来登录远程-linux</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/windows-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E6%9D%A5%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B-linux/</link><pubDate>Wed, 16 Oct 2019 15:34:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/windows-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E6%9D%A5%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B-linux/</guid><description>如果不使用 xshell 类软件, 可以使用 powershell 或 gitbash 等
// 本地虚拟机做了端口转发后 ssh -p 2222 root@127.0.0.1</description></item><item><title>c语言中的-sleep()-函数在-windows-和-linux-下的不同表示</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84-sleep-%E5%87%BD%E6%95%B0%E5%9C%A8-windows-%E5%92%8C-linux-%E4%B8%8B%E7%9A%84%E4%B8%8D%E5%90%8C%E8%A1%A8%E7%A4%BA/</link><pubDate>Tue, 15 Oct 2019 15:39:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84-sleep-%E5%87%BD%E6%95%B0%E5%9C%A8-windows-%E5%92%8C-linux-%E4%B8%8B%E7%9A%84%E4%B8%8D%E5%90%8C%E8%A1%A8%E7%A4%BA/</guid><description>在 windows 中, Sleep()
// test.c #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;windows.h&amp;gt; int main(){ Sleep(3000); printf(&amp;#39;hello C&amp;#39;); return 0; } 在 linux 中, sleep()
// test.c #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; int main(){ sleep(3000); printf(&amp;#39;hello C&amp;#39;); return 0; }</description></item><item><title>nuxt-服务端操作-cookie</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%93%8D%E4%BD%9C-cookie/</link><pubDate>Mon, 14 Oct 2019 14:17:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%93%8D%E4%BD%9C-cookie/</guid><description>cookie-universal-nuxt, 见 npm
You can use cookie-universal-nuxt to set, get and remove cookies in both client and server side nuxt apps</description></item><item><title>element-ui-carousel-响应式(自适应)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-carousel-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%87%AA%E9%80%82%E5%BA%94/</link><pubDate>Sat, 12 Oct 2019 09:44:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-carousel-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%87%AA%E9%80%82%E5%BA%94/</guid><description>&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!-- banner --&amp;gt; &amp;lt;el-carousel trigger=&amp;#34;click&amp;#34; :height=&amp;#34;bannerHeight + &amp;#39;px&amp;#39;&amp;#34;&amp;gt; &amp;lt;el-carousel-item v-for=&amp;#34;item in banners&amp;#34; :key=&amp;#34;item.id&amp;#34;&amp;gt; &amp;lt;img :src=&amp;#34;$store.state.back_url + item.image&amp;#34; alt=&amp;#34;banner&amp;#34; ref=&amp;#34;bannerHeight&amp;#34; width=&amp;#34;100%&amp;#34; @load=&amp;#34;imgLoad&amp;#34; &amp;gt; &amp;lt;/el-carousel-item&amp;gt; &amp;lt;/el-carousel&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { async asyncData({params, $axios}) { const response = await $axios.get(&amp;#39;/phpapi/home-banners&amp;#39;) return {banners: response.data.data} }, data() { return { bannerHeight: &amp;#39;&amp;#39;, } }, methods: { imgLoad() { this.$nextTick(() =&amp;gt; { this.bannerHeight = this.$refs.bannerHeight[0].height }) } }, mounted() { this.imgLoad() window.addEventListener(&amp;#39;resize&amp;#39;, () =&amp;gt; { this.</description></item><item><title>apache-Multiviews-漏洞</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/apache--multiviews--%E6%BC%8F%E6%B4%9E/</link><pubDate>Fri, 11 Oct 2019 17:08:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/apache--multiviews--%E6%BC%8F%E6%B4%9E/</guid><description>腾讯云安全检测提示 xxx.com/icons/index 及 xxx.com/icons/small/index 存在安全漏洞
打开发现是一串 icons 图片, 而在项目文件里并没有这些文件 见: http://www.apache.org/icons/small/
以下引用自: http://www.511yj.com/apache-colose-icons.html
我们如果使用了apache服务器，当我访问http://xxx.xxx.xxx/icons/时会自动显示这个目录下的所以文件列表，这行造成网站目录信息的泄露对我们的网站安全造成威胁，在 关闭apache自动目录列表功能的三种方法 这篇文章中的三种方法都不能禁止自动目录列表，你如果使用网站安全监测，会提醒你发现目录启用了自动目录列表功能，所以我们必须禁止它，经过测试，按如下步骤可以禁止：
打开目录apache/conf/extra/下的文件httpd-autoindex.conf 找到
Alias /icons/ &amp;#34;/xampp/apache/icons/&amp;#34; &amp;lt;Directory &amp;#34;/xampp/apache/icons&amp;#34;&amp;gt; Options Indexes MultiViews AllowOverride None Require all granted &amp;lt;/Directory&amp;gt; &amp;lt;Directory &amp;#34;/xampp/apache/icons&amp;#34;&amp;gt; Options MultiViews AllowOverride None Require all granted &amp;lt;/Directory&amp;gt; 我实际上是注释掉了这些配置, 因为用不到这些 icons, 直接达到目的</description></item><item><title>Linux-查看iptables状态-重启</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E6%9F%A5%E7%9C%8Biptables%E7%8A%B6%E6%80%81-%E9%87%8D%E5%90%AF/</link><pubDate>Wed, 09 Oct 2019 10:27:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/linux-%E6%9F%A5%E7%9C%8Biptables%E7%8A%B6%E6%80%81-%E9%87%8D%E5%90%AF/</guid><description>iptables 所在目录 ：/etc/sysconfig/iptables service iptables status # 查看iptables状态 service iptables restart # iptables服务重启 service iptables stop # iptables服务禁用 原文链接 csdn</description></item><item><title>element-ui-响应式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Thu, 26 Sep 2019 16:39:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>&amp;lt;el-row :gutter=&amp;#34;10&amp;#34;&amp;gt; &amp;lt;el-col :xs=&amp;#34;{span:24,offset:0}&amp;#34; :sm=&amp;#34;{span:16,offset:4}&amp;#34; :md=&amp;#34;{span:12,offset:6}&amp;#34;&amp;gt; &amp;lt;/el-col&amp;gt; &amp;lt;/el-row&amp;gt; 原文</description></item><item><title>微信支付获取支付二维码</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E8%8E%B7%E5%8F%96%E6%94%AF%E4%BB%98%E4%BA%8C%E7%BB%B4%E7%A0%81/</link><pubDate>Tue, 24 Sep 2019 22:40:58 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E8%8E%B7%E5%8F%96%E6%94%AF%E4%BB%98%E4%BA%8C%E7%BB%B4%E7%A0%81/</guid><description>未支付时, 可以使用同一个订单号获取二维码 ( 微信支付url ) 信息, 前提是各信息没有改变, 如果 body 等任何一项发生了变化, 那么会报 订单重复. 原文</description></item><item><title>查看路由(接口数)</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E6%8E%A5%E5%8F%A3%E6%95%B0/</link><pubDate>Tue, 24 Sep 2019 22:40:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E6%8E%A5%E5%8F%A3%E6%95%B0/</guid><description>// web php artisan route:list | wc -l | awk &amp;#39;{print $1 - 4}&amp;#39; // api $ php artisan api:route | wc -l | awk &amp;#39;{print $1 - 4}&amp;#39; 原文见 learnku</description></item><item><title>laravel-队列</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E9%98%9F%E5%88%97/</link><pubDate>Tue, 24 Sep 2019 22:40:09 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E9%98%9F%E5%88%97/</guid><description>windows 中使用 horizon, 原文见 github, learnku composer require laravel/horizon --ignore-platform-reqs php artisan vendor:publish --provider=&amp;#34;Laravel\Horizon\HorizonServiceProvider&amp;#34; 在 .env 中将 QUEUE_CONNECTION 改为 reids 后需要在命令行运行 php artisan queue:listen 或 php artisan queue:work 才会开启队列中的任务
因为错误原因一直重复执行某一个队列, 重启 redis 依然如此, 那么需要清空 redis 中的数据 redis-cli #进入脚手架 flushall #清空redis的数据 learnku overtrue 给队列新建 redis 连接</description></item><item><title>运行-npm-config-卡死</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E8%BF%90%E8%A1%8C-npm-config-%E5%8D%A1%E6%AD%BB/</link><pubDate>Tue, 24 Sep 2019 22:39:43 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E8%BF%90%E8%A1%8C-npm-config-%E5%8D%A1%E6%AD%BB/</guid><description>之前运行过
npm config set prefix &amp;#34;D:\Program Files(×86)\nodejs\node_global&amp;#34; 之后再运行 npm config ls -a 都不动了. 重装 node 也没有用
解决办法: 删除 users/{$user}/.npmrc 文件
原文地址</description></item><item><title>array_filter-过滤数组中值为空的元素</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/array_filter-%E8%BF%87%E6%BB%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E5%80%BC%E4%B8%BA%E7%A9%BA%E7%9A%84%E5%85%83%E7%B4%A0/</link><pubDate>Thu, 29 Aug 2019 11:21:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/array_filter-%E8%BF%87%E6%BB%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E5%80%BC%E4%B8%BA%E7%A9%BA%E7%9A%84%E5%85%83%E7%B4%A0/</guid><description>array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array 通过回调函数返回 true 返回过滤数组中的单元, 组成新数组并最终返回
如果, callable 为空, 则默认过滤数组中等值为 false 的单元(如 null, &amp;lsquo;&amp;rsquo;, &amp;rsquo; &amp;lsquo;, 0) 等</description></item><item><title>jquery-中-attr()-和-prop()-方法的区别</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-%E4%B8%AD-attr-%E5%92%8C-prop-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Wed, 28 Aug 2019 10:01:36 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-%E4%B8%AD-attr-%E5%92%8C-prop-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>背景: 使用 jquery 执行 checkbox 的全选与多选时, 第三次点击不能生效
// html &amp;lt;input id=&amp;#34;tt&amp;#34; type=&amp;#34;checkbox&amp;#34;&amp;gt; &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;select&amp;lt;/button&amp;gt; // js $(&amp;#39;#btn&amp;#39;).click(function () { if ($(this).text() == &amp;#39;select&amp;#39;) { $(&amp;#34;#tt&amp;#34;).attr(&amp;#39;checked&amp;#39;, &amp;#39;checked&amp;#39;) // attr 换成 prop $(this).text(&amp;#39;cancel&amp;#39;) } else { $(&amp;#34;#tt&amp;#34;).attr(&amp;#39;checked&amp;#39;, false) // attr 换成 prop $(this).text(&amp;#39;select&amp;#39;) } }) 把 其中的 attr 换成 prop 即可
差异 $(&amp;rsquo;&amp;rsquo;).attr()返回的是html对象 $(&amp;rsquo;&amp;rsquo;).prop()返回的是DOM对象
attr 和 prop 的使用场景： 1.添加属性名称该属性就会生效应该使用prop(); 2.是有true,false两个属性使用prop();（如&amp;rsquo;checked&amp;rsquo;,&amp;lsquo;selected&amp;rsquo;,&amp;lsquo;disabled&amp;rsquo;等） 3.其他则使用attr();
详见原文</description></item><item><title>laravel-关联模型使用-with-调数据时指定字段出错</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%85%B3%E8%81%94%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8-with-%E8%B0%83%E6%95%B0%E6%8D%AE%E6%97%B6%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E5%87%BA%E9%94%99/</link><pubDate>Tue, 20 Aug 2019 16:18:28 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%85%B3%E8%81%94%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8-with-%E8%B0%83%E6%95%B0%E6%8D%AE%E6%97%B6%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E5%87%BA%E9%94%99/</guid><description>laravel 关联模型使用 with 调数据时指定字段必须包括 外键的字段 参考: laravel5.1 eloquent with 通过闭包筛选特定 field 得不到结果的问题</description></item><item><title>本机项目放到局域网中使用</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/%E6%9C%AC%E6%9C%BA%E9%A1%B9%E7%9B%AE%E6%94%BE%E5%88%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 13 Aug 2019 15:14:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/%E6%9C%AC%E6%9C%BA%E9%A1%B9%E7%9B%AE%E6%94%BE%E5%88%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E4%BD%BF%E7%94%A8/</guid><description>第一部分 php环境 环境: laragon 里的 nginx
0 . win10 下自定义本机在局域网内的 ip 地址 网络状态 &amp;ndash; 更改连接属性 &amp;ndash; ip 设置 &amp;ndash; 编辑 首先更改 nginx 里的配置文件, 00-default.conf localhost 加上本机在局域网内的 ip 这样之后重启 nginx, 即在局域网内 ( 电脑或手机均可 ) 访问 192.168.1.18 了, 但是依然不够, 如果有多个虚拟域名希望可以供局域网访问, 那么需要进行第 2 步.
前提: 只能在局域网内的电脑上操作, 手机上不行, 用于接口开发使用也就够了 在另一台电脑上修改 host 文件, 增加一条 域名-ip 映射 关系 192.168.1.18 xxx.test 第二部分 vue 环境 0 . 同第一部分
在 config/index.js 中修改 host 的值为 &amp;lsquo;0.0.0.0&amp;rsquo; // host: &amp;#39;localhost&amp;#39;, // can be overwritten by process.</description></item><item><title>laradock-数据库连接</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laradock-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</link><pubDate>Fri, 02 Aug 2019 10:20:49 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laradock-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</guid><description> adminer 容器 up 后, 在 127.0.0.1:8080 使用 [ &amp;lsquo;服务器&amp;rsquo; =&amp;gt; &amp;lsquo;mysql&amp;rsquo; ], root + root 默认账户可以登录; 在 navicat 中, 则使用 127.0.0.1 + root + root 即可登录 新的 mysql 数据库可以新建一个测试用户
CREATE USER &amp;#39;test&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;test&amp;#39;; GRANT ALL ON *.* TO &amp;#39;test&amp;#39;@&amp;#39;%&amp;#39;</description></item><item><title>免费内网穿透工具</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E5%85%8D%E8%B4%B9%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 30 Jul 2019 16:03:37 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E5%85%8D%E8%B4%B9%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/</guid><description>ssh -R 80:localhost:[port] serveo.net
之前用的 natapp, 需要 注册获取 authorize_token, 且免费版不稳定, 域名会经常变化(大概半天自动更换).
serveo.net 则方便得多, 一行命令即可, 无需注册, 无需 token
在命令行输入如下指令(其中 [port]可自由更改)
ssh -R 80:localhost:[port] serveo.net 之后即会给出一个对应地址, 即可在外部访问. 参考: https://alternativeto.net/software/serveo/ https://www.jianshu.com/p/d0b3991a9ce1</description></item><item><title>lodash-的-防抖(debounce)和节流(throttle)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/lodash-%E7%9A%84-%E9%98%B2%E6%8A%96debounce%E5%92%8C%E8%8A%82%E6%B5%81throttle/</link><pubDate>Fri, 26 Jul 2019 16:32:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/lodash-%E7%9A%84-%E9%98%B2%E6%8A%96debounce%E5%92%8C%E8%8A%82%E6%B5%81throttle/</guid><description>防抖适合于 input 框, 等到最后一次输入才执行需要进行的操作 节流适合于 点击事件, 第一下点击就能生效, 之后指定时间段内的点击不生效
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;tempInput&amp;#34;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;button @click=&amp;#34;onClick&amp;#34;&amp;gt;点击&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; const vm = new Vue({ el: &amp;#39;#app&amp;#39;, data: { tempInput: &amp;#39;&amp;#39; }, methods: { alertFunc() { console.log(this.tempInput) }, onClick() { // this.debouncedClick() this.throttledClick() }, test() { console.log(&amp;#39;click&amp;#39; + Date.now()) } }, created() { this.debouncedAlertFunc = _.debounce(this.alertFunc, 5000) // this.debouncedClick = _.debounce(this.test, 5000) this.throttledClick = _.throttle(this.test, 5000) }, watch: { tempInput: function (newVal, oldVal) { this.</description></item><item><title>vue-@input-事件</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/vue-input-%E4%BA%8B%E4%BB%B6/</link><pubDate>Fri, 12 Jul 2019 15:49:26 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/vue-input-%E4%BA%8B%E4%BB%B6/</guid><description>input 事件 结合了 keyup事件 和 change事件, 会在 keyup 时判断值是否发生变化, 变化了则触发该事件
// html &amp;lt;input v-model=&amp;#34;keyword&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;search&amp;#34; @input=&amp;#34;onSearch&amp;#34; autofocus class=&amp;#34;input_search&amp;#34; placeholder=&amp;#34;问题或选项关键词&amp;#34;&amp;gt; // js onSearch() { ... keyup事件 也可以使用一个旧值在 keyup 的时候来比较值是否变化, 如果没有变化就直接return, 否则给旧值赋上新值, 再进行接下去的业务逻辑
// html &amp;lt;input v-model=&amp;#34;keyword&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;search&amp;#34; @keyup=&amp;#34;onSearch&amp;#34; autofocus class=&amp;#34;input_search&amp;#34; placeholder=&amp;#34;问题或选项关键词&amp;#34;&amp;gt; // js onSearch() { if(this.keyword === this.keyword_old){ return } this.keyword_old = this.keyword ...</description></item><item><title>在列表页中删除一项后,-刷新页面</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%9C%A8%E5%88%97%E8%A1%A8%E9%A1%B5%E4%B8%AD%E5%88%A0%E9%99%A4%E4%B8%80%E9%A1%B9%E5%90%8E-%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</link><pubDate>Mon, 08 Jul 2019 16:59:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%9C%A8%E5%88%97%E8%A1%A8%E9%A1%B5%E4%B8%AD%E5%88%A0%E9%99%A4%E4%B8%80%E9%A1%B9%E5%90%8E-%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</guid><description> 用vue-router重新路由到当前页面，页面是不进行刷新的 使用 window.reload()，或者router.go(0), 会造成整个页面刷新, 且存在闪动( 抖动 ) 在删除成功后, 重新获取数据, 从而只让列表部分进行刷新</description></item><item><title>npm-install-错误</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/npm-install-%E9%94%99%E8%AF%AF/</link><pubDate>Tue, 02 Jul 2019 17:26:36 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/npm-install-%E9%94%99%E8%AF%AF/</guid><description>npm install &amp;ndash;registry=https://registry.npm.taobao.org
原文见: https://blog.csdn.net/weixin_42144379/article/details/86064214</description></item><item><title>phpstorm-过滤标签报黄色警告</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E8%BF%87%E6%BB%A4%E6%A0%87%E7%AD%BE%E6%8A%A5%E9%BB%84%E8%89%B2%E8%AD%A6%E5%91%8A/</link><pubDate>Tue, 25 Jun 2019 12:46:27 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E8%BF%87%E6%BB%A4%E6%A0%87%E7%AD%BE%E6%8A%A5%E9%BB%84%E8%89%B2%E8%AD%A6%E5%91%8A/</guid><description/></item><item><title>laravel-policy-返回值类型只能是-boolean(true-或-false)</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-policy-%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%8F%AA%E8%83%BD%E6%98%AF-booleantrue-%E6%88%96-false/</link><pubDate>Mon, 24 Jun 2019 17:05:06 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-policy-%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%8F%AA%E8%83%BD%E6%98%AF-booleantrue-%E6%88%96-false/</guid><description>不能为 int string array 等</description></item><item><title>php-二维数据排序</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E4%BA%8C%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F/</link><pubDate>Thu, 13 Jun 2019 09:17:11 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E4%BA%8C%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F/</guid><description>&amp;lt;?php $arr = [ [ &amp;#39;aaifdddk&amp;#39; =&amp;gt; 3, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;test8&amp;#39;, ], [ &amp;#39;aaifdddk&amp;#39; =&amp;gt; 5, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;test8&amp;#39;, ], [ &amp;#39;aaifdddk&amp;#39; =&amp;gt; 2, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;test8&amp;#39;, ], [ &amp;#39;aaifdddk&amp;#39; =&amp;gt; 4, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;test8&amp;#39;, ], [ &amp;#39;aaifdddk&amp;#39; =&amp;gt; 1, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;test8&amp;#39;, ], ]; //usort($arr,function ($a,$b){ // return $a[&amp;#39;id&amp;#39;] &amp;gt; $b[&amp;#39;id&amp;#39;] ? 1 : -1; //}); array_multisort($arr); var_dump($arr);</description></item><item><title>tp5-布署-linux-注意事项</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-%E5%B8%83%E7%BD%B2-linux-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link><pubDate>Wed, 12 Jun 2019 08:55:28 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-%E5%B8%83%E7%BD%B2-linux-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid><description> 给 public 目录权限 项目根目录下新建空的 runtime 目录, 并设置 777 权限</description></item><item><title>apache-一个站点配置多个域名</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/apache-%E4%B8%80%E4%B8%AA%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D/</link><pubDate>Mon, 10 Jun 2019 15:35:27 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/apache-%E4%B8%80%E4%B8%AA%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D/</guid><description>在 ServerAlias 中配置, 而不是在 ServerName 中配置
&amp;lt;VirtualHost *:80&amp;gt; ServerName 4a89w9.natappfree.cc ServerAlias 4a89w9.natappfree.cc www.appapi.test DocumentRoot &amp;#34;${INSTALL_DIR}/www/u/public&amp;#34; &amp;lt;Directory &amp;#34;${INSTALL_DIR}/www/u/public&amp;#34;&amp;gt; AllowOverride All Require all granted &amp;lt;/Directory&amp;gt; &amp;lt;/VirtualHost&amp;gt;</description></item><item><title>laravel--Request-类-通过后的-$request-包含无需验证的-字段</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel--request-%E7%B1%BB-%E9%80%9A%E8%BF%87%E5%90%8E%E7%9A%84-request-%E5%8C%85%E5%90%AB%E6%97%A0%E9%9C%80%E9%AA%8C%E8%AF%81%E7%9A%84-%E5%AD%97%E6%AE%B5/</link><pubDate>Sun, 26 May 2019 09:24:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel--request-%E7%B1%BB-%E9%80%9A%E8%BF%87%E5%90%8E%E7%9A%84-request-%E5%8C%85%E5%90%AB%E6%97%A0%E9%9C%80%E9%AA%8C%E8%AF%81%E7%9A%84-%E5%AD%97%E6%AE%B5/</guid><description>// Request 类: $rule = [ &amp;#39;email&amp;#39; =&amp;gt; &amp;#39;required|email&amp;#39;, &amp;#39;password&amp;#39; =&amp;gt; &amp;#39;required|alpha_dash|between:6,20&amp;#39; ]; // form { name: &amp;#39;abc&amp;#39;, email: &amp;#39;abc@qq.com&amp;#39;, password: &amp;#39;123456&amp;#39;, } // Request $request [ &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;abc&amp;#39;, &amp;#39;email&amp;#39; =&amp;gt; &amp;#39;abc@qq.com&amp;#39;, &amp;#39;password&amp;#39; =&amp;gt; &amp;#39;123456&amp;#39;, ] $request 里面会包含 name 这个没有 ( 无需 ) 验证的字段</description></item><item><title>php-json_encode-报错-Malformed-UTF-8-characters</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-json_encode-%E6%8A%A5%E9%94%99-malformed-utf-8-characters/</link><pubDate>Wed, 22 May 2019 15:10:19 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-json_encode-%E6%8A%A5%E9%94%99-malformed-utf-8-characters/</guid><description>当使用了 substr() 进行字符串切割后, 再进行 json_encode() 时, 报错
改使用 mb_substr() 即可
原因: substr 按字节数进行截取产生了特殊字符, 而 mb_substr 按字符数截取, 则没有问题</description></item><item><title>php-substr-截取中文出乱码</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-substr-%E6%88%AA%E5%8F%96%E4%B8%AD%E6%96%87%E5%87%BA%E4%B9%B1%E7%A0%81/</link><pubDate>Tue, 21 May 2019 17:02:59 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-substr-%E6%88%AA%E5%8F%96%E4%B8%AD%E6%96%87%E5%87%BA%E4%B9%B1%E7%A0%81/</guid><description>使用 mb_substr 解决即可,
mb_substr 按字符来截取 而 substr 按字节来截取</description></item><item><title>php文件上传临时目录</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%B4%E6%97%B6%E7%9B%AE%E5%BD%95/</link><pubDate>Thu, 16 May 2019 14:57:47 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%B4%E6%97%B6%E7%9B%AE%E5%BD%95/</guid><description>问题: 在上传表单中, 用户没有继续进行保存下去, 那么图片(或文件)会一直保存下去 ?
在 php.ini 中, php官方文档 (语言参考-&amp;gt;特点-&amp;gt;文件上传处理-&amp;gt;post方法上传):
文件被上传后，默认地会被储存到服务端的默认临时目录中，除非 php.ini 中的 upload_tmp_dir 设置为其它的路径。服务端的默认临时目录可以通过更改 PHP 运行环境的环境变量 TMPDIR 来重新设置，但是在 PHP 脚本内部通过运行 putenv() 函数来设置是不起作用的。该环境变量也可以用来确认其它的操作也是在上传的文件上进行的。
了解Redis过期策略及实现原理. 我们在使用redis时，一般会设置一个过期时间，当然也有不设置过期时间的，也就是永久不过期。
当我们设置了过期时间，redis是如何判断是否过期，以及根据什么策略来进行删除的。
redis设置过期时间： expire key time(以秒为单位)–这是最常用的方式 setex(String key, int seconds, String value)–字符串独有的方式
除了字符串自己独有设置过期时间的方法外，其他方法都需要依靠expire方法来设置时间
如果没有设置时间，那缓存就是永不过期
如果设置了过期时间，之后又想让缓存永不过期，使用persist key
三种过期策略 定时删除 含义：在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除 优点：保证内存被尽快释放 缺点：若过期key很多，删除这些key会占用很多的CPU时间，在CPU时间紧张的情况下，CPU不能把所有的时间用来做要紧的事儿，还需要去花时间删除这些key. 定时器的创建耗时，若为每一个设置过期时间的key创建一个定时器（将会有大量的定时器产生），性能影响严重 懒汉式式删除 含义：key过期的时候不删除，每次通过key获取值的时候去检查是否过期，若过期，则删除，返回null。 优点：删除操作只发生在通过key取值的时候发生，而且只删除当前key，所以对CPU时间的占用是比较少的，而且此时的删除是已经到了非做不可的地步（如果此时还不删除的话，我们就会获取到了已经过期的key了） 缺点：若大量的key在超出超时时间后，很久一段时间内，都没有被获取过，那么可能发生内存泄露（无用的垃圾占用了大量的内存） 定期删除 含义：每隔一段时间执行一次删除过期key操作 优点：通过限制删除操作的时长和频率，来减少删除操作对CPU时间的占用–处理”定时删除”的缺点 缺点：在内存友好方面，不如”定时删除”（会造成一定的内存占用，但是没有懒汉式那么占用内存） 在CPU时间友好方面，不如”懒汉式删除”（会定期的去进行比较和删除操作，cpu方面不如懒汉式，但是比定时好） 难点：合理设置删除操作的执行时长（每次删除执行多长时间）和执行频率（每隔多长时间做一次删除）（这个要根据服务器运行情况来定了），每次执行时间太长，或者执行频率太高对cpu都是一种压力。每次进行定期删除操作执行之后，需要记录遍历循环到了哪个标志位，以便下一次定期时间来时，从上次位置开始进行循环遍历 说明：memcached只是用了惰性删除，而redis同时使用了惰性删除与定期删除，这也是二者的一个不同点（可以看做是redis优于memcached的一点）；对于懒汉式删除而言，并不是只有获取key的时候才会检查key是否过期，在某些设置key的方法上也会检查（eg.setnx key2 value2：该方法类似于memcached的add方法，如果设置的key2已经存在，那么该方法返回false，什么都不做；如果设置的key2不存在，那么该方法设置缓存key2-value2。假设调用此方法的时候，发现redis中已经存在了key2，但是该key2已经过期了，如果此时不执行删除操作的话，setnx方法将会直接返回false，也就是说此时并没有重新设置key2-value2成功，所以对于一定要在setnx执行之前，对key2进行过期检查）。 Redis采用的过期策略 懒汉式删除+定期删除 懒汉式删除流程：
在进行get或setnx等操作时，先检查key是否过期； 若过期，删除key，然后执行相应操作； 若没过期，直接执行相应操作； 定期删除流程（简单而言，对指定个数个库的每一个库随机删除小于等于指定个数个过期key） 遍历每个数据库（就是redis.conf中配置的”database”数量，默认为16） 检查当前库中的指定个数个key（默认是每个库检查20个key，注意相当于该循环执行20次，循环体是下边的描述） 如果当前库中没有一个key设置了过期时间，直接执行下一个库的遍历 随机获取一个设置了过期时间的key，检查该key是否过期，如果过期，删除key 判断定期删除操作是否已经达到指定时长，若已经达到，直接退出定期删除。 对于定期删除，在程序中有一个全局变量current_db来记录下一个将要遍历的库，假设有16个库，我们这一次定期删除遍历了10个，那此时的current_db就是11，下一次定期删除就从第11个库开始遍历，假设current_db等于15了，那么之后遍历就再从0号库开始（此时current_db==0）</description></item><item><title>laravel-使用-composer-dump-autoload</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E4%BD%BF%E7%94%A8-composer-dump-autoload/</link><pubDate>Tue, 14 May 2019 10:35:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E4%BD%BF%E7%94%A8-composer-dump-autoload/</guid><description>给 User.php 模型文件复制一次为 bak.User.php 后, 执行了一次 vendor:publish , 给出了warning:
再之后 , 依赖注入 User 模型提示 User 找不到 解决办法: 执行 composer dump-autoload</description></item><item><title>git-修改本地及远程分支的名称</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/git-%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0%E5%8F%8A%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%90%8D%E7%A7%B0/</link><pubDate>Tue, 07 May 2019 14:50:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/git-%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0%E5%8F%8A%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%90%8D%E7%A7%B0/</guid><description>原文地址
git branch -m old_branch new_branch # Rename branch locally git push origin :old_branch # Delete the old branch git push --set-upstream origin new_branch # Push the new branch, set local branch to track the new remote // 第三步不在推送时关联远程分支, 可改为如下 git branch --set-upstream-to origin/master git branch -u origin/new_branch</description></item><item><title>git-撤消commit,-并恢复改动</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/git-%E6%92%A4%E6%B6%88commit-%E5%B9%B6%E6%81%A2%E5%A4%8D%E6%94%B9%E5%8A%A8/</link><pubDate>Sun, 05 May 2019 09:58:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/git-%E6%92%A4%E6%B6%88commit-%E5%B9%B6%E6%81%A2%E5%A4%8D%E6%94%B9%E5%8A%A8/</guid><description>git reset HEAD^1</description></item><item><title>laravel-生命周期--路由实例</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F--%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B/</link><pubDate>Fri, 03 May 2019 19:31:42 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F--%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B/</guid><description>{{host}}/api/topics/:topic/replies
如上路由(需要登录, 在中间件中使用了 api.auth)
实测发现
如果 :topic 不存在, 则报 404, 说明首先走的路由中隐性绑定的数据模型; 填入正确的 topic id 后, 报错 401, authenticate failed, 说明第二步走的中间件; 填入正确的 bearer token, 报错 422, Unprocessable Entity, 提示 xx 参数不能为空或格式不正确, 说明这里才开始进行 request 表单请求类验证</description></item><item><title>laravel-路由参数与控制器进行隐性绑定</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%99%A8%E8%BF%9B%E8%A1%8C%E9%9A%90%E6%80%A7%E7%BB%91%E5%AE%9A/</link><pubDate>Mon, 29 Apr 2019 14:53:29 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%99%A8%E8%BF%9B%E8%A1%8C%E9%9A%90%E6%80%A7%E7%BB%91%E5%AE%9A/</guid><description>// 路由文件 Route(&amp;#39;topics/{topic}&amp;#39;, &amp;#39;TopicsController@show&amp;#39;); // 控制器 public function show(Topics $topic) { // todo } 其中路由中的 {topic} 是与 控制器中的 $topic 进行绑定的, 如果前面写成 id, 后面则用 $id, 也能正确进行模型绑定
// 路由文件 Route(&amp;#39;topics/{id}&amp;#39;, &amp;#39;TopicsController@show&amp;#39;); // 控制器 public function show(Topics $id) { // todo } 参考自 learnku</description></item><item><title>一个小事故---postman-接口走不通了</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BA%8B%E6%95%85---postman-%E6%8E%A5%E5%8F%A3%E8%B5%B0%E4%B8%8D%E9%80%9A%E4%BA%86/</link><pubDate>Wed, 24 Apr 2019 09:15:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BA%8B%E6%95%85---postman-%E6%8E%A5%E5%8F%A3%E8%B5%B0%E4%B8%8D%E9%80%9A%E4%BA%86/</guid><description>使用 postman 测试时, 发现接口走不通了, 而通过浏览器能访问到
想起昨天用了 fiddler 而给 postman 做了代理,
解决办法就是
打开 fiddler, 让 fiddler 代理请求; 或者关闭 postman 的代理即可</description></item><item><title>laravel-request-中-使用路由参数</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-request-%E4%B8%AD-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0/</link><pubDate>Sat, 20 Apr 2019 23:31:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-request-%E4%B8%AD-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0/</guid><description>在 Controller 中使用请求参数直接使用 $request-&amp;gt;input(&amp;rsquo;name&amp;rsquo;) 或 $request-&amp;gt;name;
在 Controller 中使用路由参数直接使用 参数注入 或 $request-&amp;gt;name;
在 Request 中, 使用请求参数使用 $this-&amp;gt;input(&amp;rsquo;name&amp;rsquo;) 或 $this-&amp;gt;name
在 Request 中, 使用请求参数使用 $this-&amp;gt;name, (不能使用参数注入)
在使用动态属性时，Laravel 首先会在请求载体中查找参数的值。如果该值不存在，Lavarel 将在路由参数中搜索。</description></item><item><title>access_token-和-refresh_token</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/access_token-%E5%92%8C-refresh_token/</link><pubDate>Thu, 04 Apr 2019 11:37:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/access_token-%E5%92%8C-refresh_token/</guid><description>设置 access_token 为 1 天有效期, refresh_token 为 7 天有效期, 如果 access_token 未过期, 则直接通过登录判断 (不更新 access_token 或 refresh_token ) 当 access_token 过期, 则检测 refresh_token , refresh_token 未过期时, 更新并返回 access_token 和 refresh_token 当 access_token 过期, refresh_token 也过期, 则返回未登录 ps: 由于 refresh_token 的有效期大于 access_token 的有效期 (而二者是同时更新的), 所以不存在 access_token 未过期, 而 refresh_token 过期的情况</description></item><item><title>注册页面禁止浏览器保存账号及密码</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E7%A6%81%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%9D%E5%AD%98%E8%B4%A6%E5%8F%B7%E5%8F%8A%E5%AF%86%E7%A0%81/</link><pubDate>Wed, 03 Apr 2019 16:33:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E7%A6%81%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%9D%E5%AD%98%E8%B4%A6%E5%8F%B7%E5%8F%8A%E5%AF%86%E7%A0%81/</guid><description>起因: 注册页面邮箱后有验证码, 之后再有微信号, 手机号之类, 再是密码框. 在点击提交表单时, 浏览器会提示保存账号密码, 但是保存的却不是邮箱和密码, 而是面密码框上一个 input 框的内容
解决思路(使用 firefox 浏览器测试):
禁止浏览器保存密码 1.1 通过 autocomplete=off 或 new-complete 方法无效 1.2 使用 onfocus=&amp;quot;this.type='password'&amp;quot; 或 onfocus=&amp;quot;this.removeAttribute('readonly')&amp;quot; 无效 1.3 使用 window.onload=function(){ document.getElementById('myid').value = '' } 无效 1.4 未测试 使用隐藏框来保存密码, 而把显示的密码框 type 设置为 text, 并通过 js 来控制该用户输入框显示为 圆点或星号; 考虑到如果用户输入 backspace 或 delete 如何处理的问题, 遂未进行测试
让浏览器保存正确的邮箱账号和密码 在密码框之前添加一个 &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;test&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt; 框, 并让该框的 value 与 email 框同步, 就能让浏览器保存正确的账号和密码
ps: stackoverflow 上有人说: 最新的浏览器都已(大部分)禁用了 autocomplete=off, 因为厂商认为这件事情应该交给用户而不是开发者来解决</description></item><item><title>css-文本分散对齐</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/css-%E6%96%87%E6%9C%AC%E5%88%86%E6%95%A3%E5%AF%B9%E9%BD%90/</link><pubDate>Tue, 02 Apr 2019 15:38:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/css-%E6%96%87%E6%9C%AC%E5%88%86%E6%95%A3%E5%AF%B9%E9%BD%90/</guid><description>&amp;lt;style&amp;gt; text-align-last:justify; text-align:justify; text-justify:distribute-all-lines; // 这行必加，兼容ie浏览器 &amp;lt;/style&amp;gt;</description></item><item><title>js-对象名是一个变量时,-怎么获取当前对象</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E5%90%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1/</link><pubDate>Tue, 02 Apr 2019 15:07:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E5%90%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1/</guid><description> var j1 = { &amp;#39;j11&amp;#39;: &amp;#39;a&amp;#39;, &amp;#39;j12&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;j13&amp;#39;: &amp;#39;c&amp;#39;, }; var j2 = { &amp;#39;n1&amp;#39;: &amp;#39;j1&amp;#39;, &amp;#39;n2&amp;#39;: &amp;#39;j2&amp;#39;, }; var obj = { j1: j1 }; var x = &amp;#39;n1&amp;#39;; console.log(j2[x][&amp;#39;j11&amp;#39;]);//undefined console.log(obj[j2[x]][&amp;#39;j11&amp;#39;]);// a // ? 如何直接通过对象名同名字符串来获取对象 ?</description></item><item><title>lnmp-环境中-使用-system-函数被报安全因素无法启用</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/lnmp-%E7%8E%AF%E5%A2%83%E4%B8%AD-%E4%BD%BF%E7%94%A8-system-%E5%87%BD%E6%95%B0%E8%A2%AB%E6%8A%A5%E5%AE%89%E5%85%A8%E5%9B%A0%E7%B4%A0%E6%97%A0%E6%B3%95%E5%90%AF%E7%94%A8/</link><pubDate>Tue, 02 Apr 2019 09:43:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/lnmp-%E7%8E%AF%E5%A2%83%E4%B8%AD-%E4%BD%BF%E7%94%A8-system-%E5%87%BD%E6%95%B0%E8%A2%AB%E6%8A%A5%E5%AE%89%E5%85%A8%E5%9B%A0%E7%B4%A0%E6%97%A0%E6%B3%95%E5%90%AF%E7%94%A8/</guid><description>原因: 要在 php 中使用 mysqldump 进行数据库备份 在本地 wamp 环境中使用没有问题 在线上 lnmp 环境下报错 system 函数无法使用
解决办法:
查看线上 php.ini 文件是否开启 safe_mode (安全模式); 2.1.1 如果开启了 安全模式, 则查看 disable_function 是否禁用了 system 函数 2.1.2 如果 disable_function 是禁用了 system 函数, 那么取消禁用, 并在 safe_mode_exec_dir 中添加一个包含要执行命令的目录
2.2.1 如果未开户安全模式, 直接查看 disable_function 是否禁用了 system 函数, 取消掉即可</description></item><item><title>让-tp5-api-返回-json-格式的异常</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E8%AE%A9-tp5-api-%E8%BF%94%E5%9B%9E-json-%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%BC%82%E5%B8%B8/</link><pubDate>Tue, 26 Mar 2019 21:31:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E8%AE%A9-tp5-api-%E8%BF%94%E5%9B%9E-json-%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%BC%82%E5%B8%B8/</guid><description>见: https://blog.csdn.net/qq_38287952/article/details/80247000</description></item><item><title>如何让-Laravel-API-永远返回-JSON-格式响应？</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%A6%82%E4%BD%95%E8%AE%A9-laravel-api-%E6%B0%B8%E8%BF%9C%E8%BF%94%E5%9B%9E-json-%E6%A0%BC%E5%BC%8F%E5%93%8D%E5%BA%94/</link><pubDate>Tue, 26 Mar 2019 21:29:07 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%A6%82%E4%BD%95%E8%AE%A9-laravel-api-%E6%B0%B8%E8%BF%9C%E8%BF%94%E5%9B%9E-json-%E6%A0%BC%E5%BC%8F%E5%93%8D%E5%BA%94/</guid><description>见: https://www.jianshu.com/p/c0b7365a21e5
当你在编写完全为 API 服务的 Laravel 应用时，你希望所有响应都是 JSON 格式的，而不是例如说授权错误会重定向到 /home 或 /login，最终重定向会变成 InvalidArgumentException: Route [login] is not defined. 的视图。 下面这个简单的方案，可以让你的 Laravel 应用优先响应为 JSON 格式。 第一步、编写 BaseRequest 首先我们需要构建一个 BaseRequest 来重写 Illuminate\Http\Request ，修改为默认优先使用 JSON 响应： app/Http/Requests/BaseRequest.php</description></item><item><title>php-json_decode-函数</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-json_decode-%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 26 Mar 2019 17:13:41 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-json_decode-%E5%87%BD%E6%95%B0/</guid><description>json_decode 把 json 字符串转成 object 或 array
$str = &amp;#39;{&amp;#34;id&amp;#34;:1, &amp;#34;name&amp;#34;:&amp;#34;hello&amp;#34;}&amp;#39;; $obj = json_decode($str); // 转成对象 $arr = json_decode($str, true);// 转成数组 // 要求 // json 字符串中的键值必须用 双引号(&amp;#34;&amp;#34;) 包裹起来, 单引号或者不用引号都不能正确解析, 结果会是 null</description></item><item><title>phpstorm对laravel提供智能提示</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm%E5%AF%B9laravel%E6%8F%90%E4%BE%9B%E6%99%BA%E8%83%BD%E6%8F%90%E7%A4%BA/</link><pubDate>Sat, 09 Mar 2019 23:01:47 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm%E5%AF%B9laravel%E6%8F%90%E4%BE%9B%E6%99%BA%E8%83%BD%E6%8F%90%E7%A4%BA/</guid><description>composer 安装 laravel-ide-helper 执行 php artisan ide-helper:generate 第二步不能少</description></item><item><title>git-取消更改</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E5%8F%96%E6%B6%88%E6%9B%B4%E6%94%B9/</link><pubDate>Sat, 09 Mar 2019 20:01:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E5%8F%96%E6%B6%88%E6%9B%B4%E6%94%B9/</guid><description> 取消对工作区已存在文件的修改, git checkout . 取消对工作区新增文件, git add -A + git checkout -f</description></item><item><title>git-删除版本库中的文件夹</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E5%88%A0%E9%99%A4%E7%89%88%E6%9C%AC%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/</link><pubDate>Sat, 09 Mar 2019 12:00:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E5%88%A0%E9%99%A4%E7%89%88%E6%9C%AC%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/</guid><description>起因: 使用 phpstorm 新建一个文件时, 创建了一个空的本地 git 版本库 ( git init ), 并执行了全部提交( git add -A; git commit); 对项目进行开发后, 要进行第一次提交, git status 发现 phpstorm 的相关文件 .idea 也发生了变化 modified, 然而这是不应该提交到版本库的, 所以要将其放到 .gitignore 中 此时, git status 依然会出现 .idea 发生了改变, 但未添加到暂存区, changes not staged for commit 所以不仅当前工作区中要修改 .gitignore 文件, 版本库中的已经提交过的版本中也要删除这个文件夹, 使用 git rm -r folder_path --cached 命令即可 解决办法: .gitignore 文件中添加要忽略的文件 执行 git rm -r folder_path --cached 删除版本库中对应的文件夹 说明: git rm -r folder_path --cached 中</description></item><item><title>JS-的遍历-or，-forEach，map，filter，every，some等</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%9A%84%E9%81%8D%E5%8E%86-or-foreachmapfiltereverysome%E7%AD%89/</link><pubDate>Wed, 06 Mar 2019 10:40:03 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%9A%84%E9%81%8D%E5%8E%86-or-foreachmapfiltereverysome%E7%AD%89/</guid><description>原文: https://www.cnblogs.com/ihboy/p/6878427.html
1. for循环，需要知道数组的长度，才能遍历，
2. forEach循环，循环数组中每一个元素并采取操作， 没有返回值， 可以不用知道数组长度
3. map函数，遍历数组每个元素，并回调操作，需要返回值，返回值组成新的数组，原数组不变
4. filter函数， 过滤通过条件的元素组成一个新数组， 原数组不变
5. some函数，遍历数组中是否有符合条件的元素，返回Boolean值
6. every函数， 遍历数组中是否每个元素都符合条件， 返回Boolean值</description></item><item><title>git-bash-set-alias</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/git-bash-set-alias/</link><pubDate>Mon, 25 Feb 2019 15:08:11 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/git-bash-set-alias/</guid><description>原文见: https://www.jianshu.com/p/35d23e0e121b
基本使用： alias com=&amp;ldquo;git checkout master&amp;rdquo;
此时关闭终端窗口之后，再试该命令你就会发现这个命令不存在了，原因是没有永久保存，可以使用如下方法：
确认文件在不在 $ ls ~/.bash_profile
如果不在就创建一个： vi ~/.bash_profile
写入 alias la=&amp;ldquo;ls -al&amp;rdquo;
永久保存 source ~/.bash_profile alias
#会看见 alias la=&amp;lsquo;ls -al&amp;rsquo;
#卸载使用 unalias xxx
source ~/.bash_profile</description></item><item><title>正则查找-跨行问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E6%AD%A3%E5%88%99%E6%9F%A5%E6%89%BE-%E8%B7%A8%E8%A1%8C%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 25 Feb 2019 09:24:10 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E6%AD%A3%E5%88%99%E6%9F%A5%E6%89%BE-%E8%B7%A8%E8%A1%8C%E9%97%AE%E9%A2%98/</guid><description>使用 [\s\S] 而不是 . 来匹配所有字符(包括换行 \r\n 等)
原文见 https://blog.csdn.net/xiaodongxiexie/article/details/51678295</description></item><item><title>vue-v-for-列表中的数据进行值的更改后,页面不能同步更新</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-v-for-%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%80%BC%E7%9A%84%E6%9B%B4%E6%94%B9%E5%90%8E%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0/</link><pubDate>Sun, 24 Feb 2019 15:54:26 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-v-for-%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%80%BC%E7%9A%84%E6%9B%B4%E6%94%B9%E5%90%8E%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0/</guid><description>&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li v-for=&amp;#34;item in list&amp;#34;&amp;gt;{{ item }}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; let vm = new Vue({ el:&amp;#39;#app&amp;#39;, data:{ list:[&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;] } }); vm.list[0]= 1; // vm.list.push(1); // vm.list.pop(); &amp;lt;/script&amp;gt; 如果没有最后的 push 与 pop 对 list 进行入栈、出栈, list 的值会改变, 但是页面不会改变; 通过对 list 进行入栈、出栈, 可以实现页面上值的改变
另附官方解决办法 https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B</description></item><item><title>js-中条件判断</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link><pubDate>Sat, 23 Feb 2019 17:41:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid><description> 前因: 在 vue 中使用各种条件判断 (如 v-if, v-show, disabled ) 时, 其中的 1, 0, &amp;lsquo;0&amp;rsquo; 等造成与想要的结果不同, 遂在此先记录一下
说到底还是 js 的条件判断问题 if ( exp ) { // exp 为真 } exp 为 1, true exp 为 0, false exp 为 &amp;lsquo;0&amp;rsquo;, true &amp;mdash;- 易混淆点 exp 为 true, true exp 为 false, false. exp 为 null, false exp 为 undefined, false exp 为 &amp;rsquo;true&amp;rsquo;, true exp 为 &amp;lsquo;false&amp;rsquo;, true</description></item><item><title>fastadmin----跨域问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin----%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 21 Feb 2019 08:49:23 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin----%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid><description>原文见: https://forum.fastadmin.net/thread/7485
在入口文件 index.php 中添加如下代码
header(&amp;#34;Access-Control-Allow-Origin: *&amp;#34;); header(&amp;#34;Access-Control-Allow-Methods: GET, POST&amp;#34;); header(&amp;#34;Access-Control-Allow-Headers: Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With&amp;#34;);</description></item><item><title>fastadmin----nginx-配置----解决除首页外的404问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin----nginx-%E9%85%8D%E7%BD%AE----%E8%A7%A3%E5%86%B3%E9%99%A4%E9%A6%96%E9%A1%B5%E5%A4%96%E7%9A%84404%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 21 Feb 2019 08:46:08 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin----nginx-%E9%85%8D%E7%BD%AE----%E8%A7%A3%E5%86%B3%E9%99%A4%E9%A6%96%E9%A1%B5%E5%A4%96%E7%9A%84404%E9%97%AE%E9%A2%98/</guid><description>原文见: https://forum.fastadmin.net/thread/8320
在 nginx 配置文件中加入如下代码
server { ``` listen 80; server_name www.abc.com abc.com; index index.php index.html index.htm default.php default.htm default.html; root /www/wwwroot/abc/public; location / { index index.html index.htm index.php; #autoindex on; if (!-e $request_filename) { rewrite ^(.*)$ /index.php?s=/$1 last; break; } } #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则 #error_page 404/404.html; #SSL-END #ERROR-PAGE-START 错误页配置，可以注释、删除或修改 error_page 404 /404.html; error_page 502 /502.html; #ERROR-PAGE-END #PHP-INFO-START PHP引用配置，可以注释或修改 include enable-php-72.conf; #PHP-INFO-END #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效 #include /www/server/panel/vhost/rewrite/www.xfguoye.com.conf; #REWRITE-END #禁止访问的文件或目录 location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md) { return 404; } #一键申请SSL证书验证目录相关设置 location ~ \.</description></item><item><title>tp5-数据集(对象)转成数组(再转json)输出</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-%E6%95%B0%E6%8D%AE%E9%9B%86%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%88%90%E6%95%B0%E7%BB%84%E5%86%8D%E8%BD%ACjson%E8%BE%93%E5%87%BA/</link><pubDate>Tue, 05 Feb 2019 14:12:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/tp5-%E6%95%B0%E6%8D%AE%E9%9B%86%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%88%90%E6%95%B0%E7%BB%84%E5%86%8D%E8%BD%ACjson%E8%BE%93%E5%87%BA/</guid><description>原文见: https://www.jianshu.com/p/a69164fd1f50?utm_campaign
先在数据库配置文件中 // 数据集返回类型 &amp;#39;resultset_type&amp;#39; =&amp;gt; &amp;#39;collection&amp;#39;, 在使用时, 使用 toArray() 方法 // 查询数据库 $news = NewsModel::order(&amp;#39;createtime desc&amp;#39;)-&amp;gt;limit($num)-&amp;gt;page($page)-&amp;gt;select()-&amp;gt;toArray(); /* array (size=2) 0 =&amp;gt; array (size=8) &amp;#39;id&amp;#39; =&amp;gt; int 2 &amp;#39;title&amp;#39; =&amp;gt; string &amp;#39;2&amp;#39; (length=1) &amp;#39;title_image&amp;#39; =&amp;gt; string &amp;#39;2&amp;#39; (length=1) &amp;#39;label_name&amp;#39; =&amp;gt; string &amp;#39;2&amp;#39; (length=1) &amp;#39;content&amp;#39; =&amp;gt; string &amp;#39;&amp;lt;p&amp;gt;2&amp;lt;/p&amp;gt;&amp;#39; (length=8) &amp;#39;link_url&amp;#39; =&amp;gt; string &amp;#39;2&amp;#39; (length=1) &amp;#39;createtime&amp;#39; =&amp;gt; int 1549338746 &amp;#39;updatetime&amp;#39; =&amp;gt; int 1549338746 1 =&amp;gt; array (size=8) &amp;#39;id&amp;#39; =&amp;gt; int 1 &amp;#39;title&amp;#39; =&amp;gt; string &amp;#39;dd&amp;#39; (length=2) &amp;#39;title_image&amp;#39; =&amp;gt; string &amp;#39;&amp;#39; (length=0) &amp;#39;label_name&amp;#39; =&amp;gt; string &amp;#39;&amp;#39; (length=0) &amp;#39;content&amp;#39; =&amp;gt; string &amp;#39;dd&amp;#39; (length=2) &amp;#39;link_url&amp;#39; =&amp;gt; string &amp;#39;&amp;#39; (length=0) &amp;#39;createtime&amp;#39; =&amp;gt; int 11 &amp;#39;updatetime&amp;#39; =&amp;gt; int 11 */</description></item><item><title>firefox-下-jquery-ajax-不返回值的原因-(chrome正常)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox-%E4%B8%8B-jquery-ajax-%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8E%9F%E5%9B%A0-chrome%E6%AD%A3%E5%B8%B8/</link><pubDate>Wed, 30 Jan 2019 13:45:07 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox-%E4%B8%8B-jquery-ajax-%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8E%9F%E5%9B%A0-chrome%E6%AD%A3%E5%B8%B8/</guid><description>可能是因为 点击的 button 标签的 type 属性设置为了 &amp;ldquo;submit&amp;rdquo;, 而这样 firefox 会认为其是按表单提交, 而非 ajax 的异步
所以, 把 submit 改为 button 就好了</description></item><item><title>git-一直不能-添加文件到暂存区,-提示-untracked-content</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E4%B8%80%E7%9B%B4%E4%B8%8D%E8%83%BD-%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA-%E6%8F%90%E7%A4%BA-untracked-content/</link><pubDate>Fri, 25 Jan 2019 11:11:48 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/git-%E4%B8%80%E7%9B%B4%E4%B8%8D%E8%83%BD-%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA-%E6%8F%90%E7%A4%BA-untracked-content/</guid><description>原因可能是文件夹里面还有 .git 文件, 将之删除即可</description></item><item><title>php-trait-的优先级</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-trait-%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</link><pubDate>Tue, 22 Jan 2019 21:04:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-trait-%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</guid><description>&amp;lt;?php trait Demo1{ public function test(){ return __METHOD__; } } trait Demo2{ public function test(){ return __METHOD__; } } class Demo0{ public function test(){ return __METHOD__; } } class Demo extends Demo0{ use Demo1,Demo2{ Demo1::test insteadof Demo2; // tait1中的test方法优先于trait2中的test方法(如果不这么设置,同名的方法会导致报错) Demo2::test as demo2test; // trait2 的test方法别名为 trait2test } } $obj = new demo(); $obj-&amp;gt;test();// Demo1::test $obj-&amp;gt;demo2test();// Demo2::test trait ,当前类,父类优先级: 当前类方法 &amp;gt; trait 的方法 &amp;gt; 父类的方法 如果当前类引用了两个 trait, 并且这两个 trait 中有同名方法,则会报错, 可以使用 insteadof 指定使用哪个trait的方法, 此外还可以用 as 来设置别名, 从而供当前类使用</description></item><item><title>正则表达式-cheat-sheet-from-github</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-cheat-sheet-from-github/</link><pubDate>Mon, 21 Jan 2019 14:59:34 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-cheat-sheet-from-github/</guid><description>转载自: https://github.com/niklongstone/regular-expression-cheat-sheet.git
Regular Expression Cheat Sheet - PCRE Anchor Description Example Valid match Invalid ^ start of string or line ^foam foam bath foam \A start of string in any match mode \Afoam foam bath foam $ end of string or line finish$ finish finnish \Z end of string, or char before last new line in any match mode finish\Z finish finnish \z end of string, in any match mode.</description></item><item><title>openssl-加密函数</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/openssl-%E5%8A%A0%E5%AF%86%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 17 Jan 2019 13:29:20 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/openssl-%E5%8A%A0%E5%AF%86%E5%87%BD%E6%95%B0/</guid><description>后台使用密码保存时, 使用 md5, 不可解密;
如今想给一个登录 token 加密, 原始做法是用 md5+一定数量的字符串, 并且在缓存(或数据库)中保存这个键值对;
如果不想在后台保存 token 信息, 可以把 token信息(包括过期时间,用户账号等) 使用 open_ssl 加密, 然后要在后台要验证的时候, 再解密出来
例如
&amp;lt;?php $key = &amp;#39;key123456789&amp;#39;;//加密字符串的密码, 类似于md5加盐 $method = &amp;#39;AES-128-CBC&amp;#39;;// 加密方法 $arr = [&amp;#39;user_id&amp;#39;=&amp;gt;1, &amp;#39;expire_time&amp;#39;=&amp;gt;60*60]; // 用户id为1, 有效期为1h $str = json_encode($arr); $secret_str = openssl_encrypt($str,$method,$key);// 加密字符串 $secret_str = urlencode($secret_str);// 加密字符串 var_dump($secret_str);// jRX%2BtqOyhHVOzHX7cFI0usMUs7qKH4uEaOqKkdBQ2A08C1FmRRGXWFBfCleJPu3i $origin_str = urldecode($secret_str); $origin_str = openssl_decrypt($origin_str,$method,$key);// 解密字符串 var_dump($origin_str);// {&amp;#34;user_id&amp;#34;:1,&amp;#34;expire_time&amp;#34;:3600} var_dump(json_decode($origin_str));// [&amp;#34;user_id&amp;#34;=&amp;gt;1,&amp;#34;expire_time&amp;#34;=&amp;gt;3600] // 加密 openssl_encrypt ( string $data , string $method , string $key [, int $options = 0 [, string $iv = &amp;#34;&amp;#34; [, string &amp;amp;$tag = NULL [, string $aad = &amp;#34;&amp;#34; [, int $tag_length = 16 ]]]]] ) : string // 解密 openssl_decrypt ( string $data , string $method , string $key [, int $options = 0 [, string $iv = &amp;#34;&amp;#34; [, string $tag = &amp;#34;&amp;#34; [, string $aad = &amp;#34;&amp;#34; ]]]] ) : string // data // The encrypted message to be decrypted.</description></item><item><title>nginx-反向代理</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link><pubDate>Wed, 16 Jan 2019 13:43:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid><description>正向代理是 客户端向指定的服务器发起请求, 客户是隐藏的;
反向代理, 则是隐藏了多个服务器, 由代理服务器决定向(集群服务器组)哪个服务器发起请求
参考自: https://blog.csdn.net/tsummerb/article/details/79248015</description></item><item><title>onethink-后台编辑器选择问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E5%90%8E%E5%8F%B0%E7%BC%96%E8%BE%91%E5%99%A8%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 11 Jan 2019 14:04:25 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E5%90%8E%E5%8F%B0%E7%BC%96%E8%BE%91%E5%99%A8%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98/</guid><description>
public function adminArticleEdit($data){ $res= $this-&amp;gt;getConfig(); // var_dump($res); $res[&amp;#39;editor_type&amp;#39;]=2; $this-&amp;gt;assign(&amp;#39;addons_data&amp;#39;, $data); // $this-&amp;gt;assign(&amp;#39;addons_config&amp;#39;, $this-&amp;gt;getConfig()); $this-&amp;gt;assign(&amp;#39;addons_config&amp;#39;, $res); $this-&amp;gt;display(&amp;#39;content&amp;#39;); } }</description></item><item><title>phpqrcode-生成的图片转为-base64-格式输出</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/phpqrcode-%E7%94%9F%E6%88%90%E7%9A%84%E5%9B%BE%E7%89%87%E8%BD%AC%E4%B8%BA-base64-%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA/</link><pubDate>Thu, 10 Jan 2019 22:20:42 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/phpqrcode-%E7%94%9F%E6%88%90%E7%9A%84%E5%9B%BE%E7%89%87%E8%BD%AC%E4%B8%BA-base64-%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA/</guid><description>原文见: https://www.pusonglin.cn/work/1619.html
项目中需要用到phpqrcode生成二维码，但是通过QRcode::png()生成的是显示输出当前的照片流，这样就不适用于列表显示多个二维码的需求了。网上也有相关的一些解决方案:通过把照片流缓存，然后进行base64编码。
找到生成图片用到了QRimage类的png方法，去除里面的：Header(“Content-type: image/png”);即可。
class QRimage { //---------------------------------------------------------------------- public static function png($frame, $filename = false, $pixelPerPoint = 4, $outerFrame = 4,$saveandprint=FALSE) { $image = self::image($frame, $pixelPerPoint, $outerFrame); if ($filename === false) { // Header(&amp;#34;Content-type: image/png&amp;#34;); ImagePng($image); } else { if($saveandprint===TRUE){ ImagePng($image, $filename); header(&amp;#34;Content-type: image/png&amp;#34;); ImagePng($image); }else{ ImagePng($image, $filename); } } ImageDestroy($image); } 如此，不再让输出端整个页面变为图片类型，解决方案并不完美，但是能达到我的目的即可。 附调用端代码：
&amp;lt;?php global $_W,$_GPC; function getqrcode($url){ require_once MODULE_ROOT.&amp;#39;/lib/phpqrcode_web.php&amp;#39;; $value = $url; //二维码内容 $errorCorrectionLevel = &amp;#39;L&amp;#39;; //容错级别 $matrixPointSize = 5; //生成图片大小 //生成二维码图片 ob_start(); QRcode::png($value,false,$errorCorrectionLevel, $matrixPointSize, 2); $imgstr = base64_encode(ob_get_contents()); ob_end_clean(); return $imgstr; } //调用查看结果 include $this-&amp;gt;template(&amp;#39;web/test&amp;#39;); ?</description></item><item><title>正则表达式-----必须含有大写字母和数字</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-----%E5%BF%85%E9%A1%BB%E5%90%AB%E6%9C%89%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97/</link><pubDate>Thu, 10 Jan 2019 13:36:05 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-----%E5%BF%85%E9%A1%BB%E5%90%AB%E6%9C%89%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97/</guid><description>原文见:https://blog.csdn.net/u011974797/article/details/71479456
要求：由数字和字母组成，并且要同时含有数字和字母，且长度要在8-16位之间。
^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$
分开来注释一下： ^ 匹配一行的开头位置 (?![0-9]+$) 预测该位置后面不全是数字 (?![a-zA-Z]+$) 预测该位置后面不全是字母 [0-9A-Za-z] {8,16} 由8-16位数字或这字母组成 $ 匹配行结尾位置
注：(?!xxxx) 是正则表达式的负向零宽断言一种形式，标识预该位置后不是xxxx字符。
附：
要求：可以包含数字、字母、下划线，并且要同时含有数字和字母，且长度要在8-16位之间。 ^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z_]{8,16}$</description></item><item><title>使用键盘选择字符</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/%E4%BD%BF%E7%94%A8%E9%94%AE%E7%9B%98%E9%80%89%E6%8B%A9%E5%AD%97%E7%AC%A6/</link><pubDate>Sun, 30 Dec 2018 09:32:48 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/%E4%BD%BF%E7%94%A8%E9%94%AE%E7%9B%98%E9%80%89%E6%8B%A9%E5%AD%97%E7%AC%A6/</guid><description>shift + Home : 光标至行首的字符 shift + End : 光标至行尾的字符
shift + → : 光标向后一个字符 shift + ← : 光标向前一个字符</description></item><item><title>HTML+CSS底部footer两种固定方式</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/html+css%E5%BA%95%E9%83%A8footer%E4%B8%A4%E7%A7%8D%E5%9B%BA%E5%AE%9A%E6%96%B9%E5%BC%8F/</link><pubDate>Fri, 28 Dec 2018 15:21:22 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/html+css%E5%BA%95%E9%83%A8footer%E4%B8%A4%E7%A7%8D%E5%9B%BA%E5%AE%9A%E6%96%B9%E5%BC%8F/</guid><description>原文见: https://blog.csdn.net/xianglikai1/article/details/78411615
网页常见的底部栏（footer）目前有两种：
一、永久固定，不管页面的内容有多高，footer一直位于浏览器最底部，适合做移动端底部菜单，这个比较好实现;
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;style&amp;gt; body { padding-bottom: 50px; } .footer { position: fixed; left: 0px; bottom: 0px; width: 100%; height: 50px; background-color: #eee; z-index: 9999; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; 内容，可以大量复制看效果&amp;lt;br /&amp;gt; &amp;lt;div class=&amp;#34;footer&amp;#34;&amp;gt;固定在底部&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 二、相对固定，当页面内容高度不沾满浏览器高度，footer显示在浏览器底部，且不会出现滚动条，如果页面内容高度超出浏览器高度，footer则相对与内容的最底部，并且自动出现滚动条；
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; * { margin: 0px; padding: 0px; } html, body { height: 100%; } .</description></item><item><title>fastadmin-隐藏后台登陆地址</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin-%E9%9A%90%E8%97%8F%E5%90%8E%E5%8F%B0%E7%99%BB%E9%99%86%E5%9C%B0%E5%9D%80/</link><pubDate>Sun, 23 Dec 2018 20:38:09 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin-%E9%9A%90%E8%97%8F%E5%90%8E%E5%8F%B0%E7%99%BB%E9%99%86%E5%9C%B0%E5%9D%80/</guid><description>我们都知道后台/admin是我们最常用的登录入口，方便的同时也留下了隐患，如果你刚好使用了admin/123456这种账号密码的方式，会导致我们的后台完全暴露在外。 因此我们建议修改后台的登录入口，达到隐藏后台登录入口的效果。 原文见:https://forum.fastadmin.net/thread/7640
操作步骤 1、首页修改application/config.php中deny_module_list的值，其中默认已经有common，我们添加admin，改成['common', 'admin'] 2、然后修改项目public目录下的admin.php，将其改名为admin_d75KABNWt.php，我们可以将admin.php其中的admin改成任意随机的字符串，越长越好。
登录后台 通过以上的修改后，我们不能再通过[www.yoursite.com/admin](http://www.yoursite.com/admin)的形式登录后台了，此时我们可以采用[www.yoursite.com/admin_d75KABNWt.php](http://www.yoursite.com/admin_d75KABNWt.php)，其中admin_d75KABNWt.php就是我们任意修改的名称。 请保护好你后台的登录入口，千万别到处去粘贴，如果有泄漏后台入口，请再次尝试修改即可。
安全建议 通过上面的隐藏后台入口地址，我们已经加好了第一道门，以下是FastAdmin给大家的安全建议，为我们后台添加更多的安全防护。 1、定期修改后台管理的登录入口和超级管理员密码，越复杂越好。 2、开启后台登录验证码，开启方式：修改application/config.php底部中login_captcha，将它的值改为true 3、修改后台超级管理员用户名，默认是admin，建议修改，修改方式直接在权限管理-&amp;gt;管理员管理中修改 4、移除冗余的管理员，早期FastAdmin中默认添加了几个管理员用于权限划分，建议删除。</description></item><item><title>fastadmin-忘记后台账号密码</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin-%E5%BF%98%E8%AE%B0%E5%90%8E%E5%8F%B0%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</link><pubDate>Sun, 23 Dec 2018 20:36:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin-%E5%BF%98%E8%AE%B0%E5%90%8E%E5%8F%B0%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</guid><description>https://forum.fastadmin.net/thread/43
数据库修改两个字段 密码：c13f62012fd6a8fdf06b3452a94430e5 密码盐：rpR6Bv 登录密码是123456</description></item><item><title>firefox的checkbox选中后按f5刷新还是选中状态</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox%E7%9A%84checkbox%E9%80%89%E4%B8%AD%E5%90%8E%E6%8C%89f5%E5%88%B7%E6%96%B0%E8%BF%98%E6%98%AF%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81/</link><pubDate>Sun, 23 Dec 2018 09:29:01 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox%E7%9A%84checkbox%E9%80%89%E4%B8%AD%E5%90%8E%E6%8C%89f5%E5%88%B7%E6%96%B0%E8%BF%98%E6%98%AF%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81/</guid><description>autocomplete=&amp;ldquo;off&amp;rdquo; 这个配置在from上或者你的checkbox上
autocomplete 属性规定输入字段是否应该启用自动完成功能。
自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</description></item><item><title>simditor-的使用</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/simditor-%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 22 Dec 2018 14:12:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/simditor-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&amp;lt;textarea id=&amp;#34;editor&amp;#34;&amp;gt;{$introduction}&amp;lt;/textarea&amp;gt; &amp;lt;script&amp;gt; var editor = new Simditor({ textarea: $(&amp;#39;#editor&amp;#39;), toolbarHidden: true }); &amp;lt;/script&amp;gt; 如果一个页面使用多个 simditor 编辑器, 那么每个编辑器的 id 要设置为不同
&amp;lt;volist name=&amp;#34;industries&amp;#34; id=&amp;#34;vo&amp;#34;&amp;gt; &amp;lt;if condition=&amp;#34;$i eq 2&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;zi&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;fs14 f-c9c&amp;#34;&amp;gt; &amp;lt;textarea id=&amp;#34;editor{$i}&amp;#34;&amp;gt;{$vo.content}&amp;lt;/textarea&amp;gt; &amp;lt;script&amp;gt; var editor{$i} = new Simditor({ textarea: $(&amp;#39;#editor{$i}&amp;#39;), toolbarHidden: true }); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;else/&amp;gt; &amp;lt;div class=&amp;#34;zi f-dn&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;fs14 f-c9c&amp;#34;&amp;gt; &amp;lt;textarea id=&amp;#34;editor{$i}&amp;#34;&amp;gt;{$vo.content}&amp;lt;/textarea&amp;gt; &amp;lt;script&amp;gt; var editor{$i} = new Simditor({ textarea: $(&amp;#39;#editor{$i}&amp;#39;), toolbarHidden: true }); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/if&amp;gt; &amp;lt;/volist&amp;gt;</description></item><item><title>HeidiSQL-的-SSH-Tunnel-连接方式</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/heidisql-%E7%9A%84-ssh-tunnel-%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 11 Dec 2018 13:20:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/heidisql-%E7%9A%84-ssh-tunnel-%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/</guid><description>设置里面- 设置的是 远程服务器如何连接 数据库 ssh 隧道- 设置的是本地如何连接服务器
原文见</description></item><item><title>img-标签中的-src-不存在时,-不显示img标签</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/img-%E6%A0%87%E7%AD%BE%E4%B8%AD%E7%9A%84-src-%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6-%E4%B8%8D%E6%98%BE%E7%A4%BAimg%E6%A0%87%E7%AD%BE/</link><pubDate>Mon, 10 Dec 2018 10:25:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/img-%E6%A0%87%E7%AD%BE%E4%B8%AD%E7%9A%84-src-%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6-%E4%B8%8D%E6%98%BE%E7%A4%BAimg%E6%A0%87%E7%AD%BE/</guid><description>&amp;lt;img src=&amp;#34;{$trend.picture}&amp;#34; onerror=&amp;#34;javascript:this.remove()&amp;#34;&amp;gt;</description></item><item><title>http-状态码</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/http-%E7%8A%B6%E6%80%81%E7%A0%81/</link><pubDate>Sun, 09 Dec 2018 19:44:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/http-%E7%8A%B6%E6%80%81%E7%A0%81/</guid><description>HTTP 提供了丰富的状态码供我们使用，正确的使用状态码可以让响应数据更具可读性。
200 OK - 对成功的 GET、PUT、PATCH 或 DELETE 操作进行响应。也可以被用在不创建新资源的 POST 操作上 201 Created - 对创建新资源的 POST 操作进行响应。应该带着指向新资源地址的 Location 头 202 Accepted - 服务器接受了请求，但是还未处理，响应中应该包含相应的指示信息，告诉客户端该去哪里查询关于本次请求的信息 204 No Content - 对不会返回响应体的成功请求进行响应（比如 DELETE 请求） 304 Not Modified - HTTP缓存header生效的时候用 400 Bad Request - 请求异常，比如请求中的body无法解析 401 Unauthorized - 没有进行认证或者认证非法 403 Forbidden - 服务器已经理解请求，但是拒绝执行它 404 Not Found - 请求一个不存在的资源 405 Method Not Allowed - 所请求的 HTTP 方法不允许当前认证用户访问 410 Gone - 表示当前请求的资源不再可用。当调用老版本 API 的时候很有用 415 Unsupported Media Type - 如果请求中的内容类型是错误的 422 Unprocessable Entity - 用来表示校验错误 429 Too Many Requests - 由于请求频次达到上限而被拒绝访问 [转载], [原文见] https://laravel-china.</description></item><item><title>laravel-中用「hash_equals」防止时序攻击</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E4%B8%AD%E7%94%A8hash_equals%E9%98%B2%E6%AD%A2%E6%97%B6%E5%BA%8F%E6%94%BB%E5%87%BB/</link><pubDate>Sun, 09 Dec 2018 19:42:25 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E4%B8%AD%E7%94%A8hash_equals%E9%98%B2%E6%AD%A2%E6%97%B6%E5%BA%8F%E6%94%BB%E5%87%BB/</guid><description>比对验证码是否与缓存中一致时，使用了 hash_equals 方法。
hash_equals($verifyData[&amp;#39;code&amp;#39;], $request-&amp;gt;verification_code) hash_equals 是可防止时序攻击的字符串比较，那么什么是时序攻击呢？比如这段代码我们使用
$verifyData[&amp;#39;code&amp;#39;] == $request-&amp;gt;verification_code 进行比较，那么两个字符串是从第一位开始逐一进行比较的，发现不同就立即返回 false，那么通过计算返回的速度就知道了大概是哪一位开始不同的，这样就实现了电影中经常出现的按位破解密码的场景。而使用 hash_equals 比较两个字符串，无论字符串是否相等，函数的时间消耗是恒定的，这样可以有效的防止时序攻击。
[原文见laravel-china.org:] (https://laravel-china.org/courses/laravel-advance-training/5.5/building-a-user-registration-interface/929)</description></item><item><title>rm和chmod-删除和更新权限</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/rm%E5%92%8Cchmod-%E5%88%A0%E9%99%A4%E5%92%8C%E6%9B%B4%E6%96%B0%E6%9D%83%E9%99%90/</link><pubDate>Thu, 06 Dec 2018 11:31:01 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/rm%E5%92%8Cchmod-%E5%88%A0%E9%99%A4%E5%92%8C%E6%9B%B4%E6%96%B0%E6%9D%83%E9%99%90/</guid><description> rm -r -f xxx // 强制删除文件夹及其中的全部文件或文件夹 chmod -R 777 xxx // 给xxx文件夹及其中的全部文件或文件夹设置 777 权限</description></item><item><title>fastadmin-使用-simditor-不显示</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin-%E4%BD%BF%E7%94%A8-simditor-%E4%B8%8D%E6%98%BE%E7%A4%BA/</link><pubDate>Wed, 05 Dec 2018 16:22:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/fastadmin-%E4%BD%BF%E7%94%A8-simditor-%E4%B8%8D%E6%98%BE%E7%A4%BA/</guid><description>需要把 『根目录 addons』 中的 assets 中的文件夹复制一份到 『根目录 public』中的 assets/addons/simditor 中</description></item><item><title>帝国cms更改后台页面</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms%E6%9B%B4%E6%94%B9%E5%90%8E%E5%8F%B0%E9%A1%B5%E9%9D%A2/</link><pubDate>Wed, 05 Dec 2018 16:01:54 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms%E6%9B%B4%E6%94%B9%E5%90%8E%E5%8F%B0%E9%A1%B5%E9%9D%A2/</guid><description>1.登陆页面, e/admin/index.php 2.后台首页, e/admin/main.php 3.后台首页, e/admin/adminstyle/1/AdminMain.php</description></item><item><title>onethink-一张表(模型)只能有一个字段设置为编辑器的解决办法</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E4%B8%80%E5%BC%A0%E8%A1%A8%E6%A8%A1%E5%9E%8B%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Wed, 05 Dec 2018 15:03:11 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E4%B8%80%E5%BC%A0%E8%A1%A8%E6%A8%A1%E5%9E%8B%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>原文见:http://www.topthink.com/topic/8867.html
在后台建立两个编辑器字段,发现提交表单时,两个字段的值不能进行更新,原因是在生成代码时,编辑器的对象名相同导致的,在这里可以通过修改 Addons\EditorForAdmin\content.html 文件来实现多个编辑器字段值的更新</description></item><item><title>onethink-模型(表)增加-时间自动完成字段</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E6%A8%A1%E5%9E%8B%E8%A1%A8%E5%A2%9E%E5%8A%A0-%E6%97%B6%E9%97%B4%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E5%AD%97%E6%AE%B5/</link><pubDate>Wed, 05 Dec 2018 15:02:10 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E6%A8%A1%E5%9E%8B%E8%A1%A8%E5%A2%9E%E5%8A%A0-%E6%97%B6%E9%97%B4%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E5%AD%97%E6%AE%B5/</guid><description>需要到对应表的模型 xxxModel.class.php 进行添加字段为 auto 完成</description></item><item><title>帝国cms搜索模板制作</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms%E6%90%9C%E7%B4%A2%E6%A8%A1%E6%9D%BF%E5%88%B6%E4%BD%9C/</link><pubDate>Tue, 04 Dec 2018 10:22:59 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms%E6%90%9C%E7%B4%A2%E6%A8%A1%E6%9D%BF%E5%88%B6%E4%BD%9C/</guid><description>&amp;lt;form name=&amp;#34;searchform&amp;#34; method=&amp;#34;post&amp;#34; action=&amp;#34;/e/search/index.php&amp;#34;&amp;gt; &amp;lt;!--按表搜索--&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;tbname&amp;#34; value=&amp;#34;activity&amp;#34;&amp;gt; &amp;lt;!--所用搜索模板--&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;tempid&amp;#34; value=&amp;#34;3&amp;#34;&amp;gt; &amp;lt;!--搜索字段变量--&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;show&amp;#34; value=&amp;#34;title&amp;#34;&amp;gt; &amp;lt;!--搜索范围不限制--&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;member&amp;#34; value=&amp;#34;0&amp;#34;&amp;gt; &amp;lt;!--查询逻辑, 默认模糊查询--&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;hh&amp;#34; value=&amp;#34;LK&amp;#34;&amp;gt; &amp;lt;!--按关键词搜索--&amp;gt; &amp;lt;input name=&amp;#34;keyboard&amp;#34; type=&amp;#34;text&amp;#34; placeholder=&amp;#34;输入活动关键词&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34; name=&amp;#34;submit&amp;#34;&amp;gt;搜 索&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; 模板的所属系统模型要与『要搜索的表』一致 对应的系统模型中对应搜索字段要选中</description></item><item><title>帝国cms-如何调用-栏目(表)-的全部字段信息</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms-%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8-%E6%A0%8F%E7%9B%AE%E8%A1%A8-%E7%9A%84%E5%85%A8%E9%83%A8%E5%AD%97%E6%AE%B5%E4%BF%A1%E6%81%AF/</link><pubDate>Wed, 07 Nov 2018 18:08:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%B8%9D%E5%9B%BDcms-%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8-%E6%A0%8F%E7%9B%AE%E8%A1%A8-%E7%9A%84%E5%85%A8%E9%83%A8%E5%AD%97%E6%AE%B5%E4%BF%A1%E6%81%AF/</guid><description>使用 e:loop 标签调用时, 会发现有些字段不能够读取出来, 可能是因为该字段没有加入到 列表模板或内容模板中
(亲测可用)
也可能是该字段不在 主表 中(此项没有测试, 未知是否正确)</description></item><item><title>onethink-后台验证码输错一次后,再次输入(正确)依然提示错误</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E5%90%8E%E5%8F%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E8%BE%93%E9%94%99%E4%B8%80%E6%AC%A1%E5%90%8E%E5%86%8D%E6%AC%A1%E8%BE%93%E5%85%A5%E6%AD%A3%E7%A1%AE%E4%BE%9D%E7%84%B6%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF/</link><pubDate>Wed, 31 Oct 2018 13:58:03 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/onethink-%E5%90%8E%E5%8F%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E8%BE%93%E9%94%99%E4%B8%80%E6%AC%A1%E5%90%8E%E5%86%8D%E6%AC%A1%E8%BE%93%E5%85%A5%E6%AD%A3%E7%A1%AE%E4%BE%9D%E7%84%B6%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF/</guid><description>if(!check_verify($verify)){ // $this-&amp;gt;error(&amp;#39;验证码输入错误！&amp;#39;); // $this-&amp;gt;error(&amp;#39;验证码输入错误！&amp;#39;,U(&amp;#39;/Admin/Public/login&amp;#39;),2);// 自己改 $this-&amp;gt;error(&amp;#39;验证码输入错误！&amp;#39;,&amp;#39;Admin/Public/login&amp;#39;,2); } success方法的默认跳转地址是 $_SERVER[&amp;ldquo;HTTP_REFERER&amp;rdquo;] ， error方法的默认跳转地址是 javascript:history.back(-1); 。
原因: 因为默认的 $this-&amp;gt;error , 是通过 javascript:history.back(-1) 跳转的, 这样就依然显示之前生成的验证码, 而后台已经生成新的验证码, 所以会出现报错;
解决办法: 把 error 方法的路径填写, 那么会相当于重新打开登陆页面, 也就可以正常登陆</description></item><item><title>js-确认-a-标签是否跳转</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%A1%AE%E8%AE%A4-a-%E6%A0%87%E7%AD%BE%E6%98%AF%E5%90%A6%E8%B7%B3%E8%BD%AC/</link><pubDate>Sat, 20 Oct 2018 19:10:40 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%A1%AE%E8%AE%A4-a-%E6%A0%87%E7%AD%BE%E6%98%AF%E5%90%A6%E8%B7%B3%E8%BD%AC/</guid><description>&amp;lt;!-- 默认使用 jquery --&amp;gt; &amp;lt;a href=&amp;#34;http://www.hao123.com&amp;#34;&amp;gt;a标签&amp;lt;/a&amp;gt; &amp;lt;script&amp;gt; $(function(){ $(&amp;#39;a&amp;#39;).click(function(){ alert(&amp;#39;ok&amp;#39;); var $res = confirm(&amp;#39;真的要跳转吗?&amp;#39;); if(!$res){ // $(this).href(&amp;#39;&amp;#39;); 这种会导致 href 变为空, 下次再要点击时,不能跳转 return false;// 这样可以成功达到确认的目的,且不影响下次点击 } }); }); &amp;lt;/script&amp;gt;</description></item><item><title>restful--patch-和-put-请求的区别</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/restful--patch-%E5%92%8C-put-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Sat, 01 Sep 2018 20:34:49 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/restful--patch-%E5%92%8C-put-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>看到 laravel 使用 Route::resource 生成 restful 架构的路由, 里面的更新用的是 patch 请求, 而有的地方说是用 put, 就查了一下, 这篇说得很明白, 就复制过来了
put 更新全部资源 patch 方法用来更新局部资源 假设我们有一个UserInfo，里面有userId， userName， userGender等10个字段。可你的编辑功能因为需求，在某个特别的页面里只能修改userName，这时候的更新怎么做？
人们通常(为徒省事)把一个包含了修改后userName的完整userInfo对象传给后端，做完整更新。但仔细想想，这种做法感觉有点二，而且真心浪费带宽(纯技术上讲，你不关心带宽那是你土豪)。
于是patch诞生，只传一个userName到指定资源去，表示该请求是一个局部更新，后端仅更新接收到的字段。
而put虽然也是更新资源，但要求前端提供的一定是一个完整的资源对象，理论上说，如果你用了put，但却没有提供完整的UserInfo，那么缺了的那些字段应该被清空
原文见 https://blog.csdn.net/mysevenyear/article/details/80674080</description></item><item><title>laravel-学习笔记1_20180829</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01_20180829/</link><pubDate>Wed, 29 Aug 2018 10:12:07 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/laravel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01_20180829/</guid><description>######1. 在修改完 Homestead.yaml 文件后, 需要在本机加载并重启 vagrant, 执行如下
&amp;gt; vagrant provision &amp;amp;&amp;amp; vagrant reload ######2. git 初始化(保存到本地), 设置远程仓库及使用默认远程仓库
$ git init $ git add -A $ git commit -m &amp;#34;Initial commit&amp;#34; $ git remote add origin git@github.com:&amp;lt;user_name&amp;gt;/&amp;lt;repositoy_name&amp;gt;.git $ git push -u origin master 其中, origin 作为默认的远程仓库服务器名 ( 也可以改成别的 ), &amp;lt;user_name&amp;gt; 指的是 git 中的用户名, &amp;lt;repositoy_name&amp;gt; 指的是 git 中的仓库名
git push -u origin master 意为将本地 master 分支推送到 origin 远程仓库; 其中 -u 指的是将 origin 和 master 连接起来, 以后即可以直接使用 git push 则代表推送 master 到 origin</description></item><item><title>phpstorm-快速给选择的文本进行包裹</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E5%BF%AB%E9%80%9F%E7%BB%99%E9%80%89%E6%8B%A9%E7%9A%84%E6%96%87%E6%9C%AC%E8%BF%9B%E8%A1%8C%E5%8C%85%E8%A3%B9/</link><pubDate>Fri, 17 Aug 2018 22:23:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E5%BF%AB%E9%80%9F%E7%BB%99%E9%80%89%E6%8B%A9%E7%9A%84%E6%96%87%E6%9C%AC%E8%BF%9B%E8%A1%8C%E5%8C%85%E8%A3%B9/</guid><description>用 ctrl+w 可以快速选择文本
用ctrl+alt+t 可以打开包裹列表进行选择, 是用 () 还是(!)进行包裹 2.设置里面, 搜索 surround with, 在editor-&amp;gt;general-&amp;gt;smart keys里面 选中 surround selection on typing quote or brace; 然后在选中文本后可以直接输入引号&amp;rsquo;即完成用 &amp;lsquo;&amp;lsquo;包裹, 输入括号(即完成用()包裹</description></item><item><title>mysqldump备份时出错</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysqldump%E5%A4%87%E4%BB%BD%E6%97%B6%E5%87%BA%E9%94%99/</link><pubDate>Sun, 15 Jul 2018 23:06:58 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysqldump%E5%A4%87%E4%BB%BD%E6%97%B6%E5%87%BA%E9%94%99/</guid><description>mysqldump备份时出现 couldn&amp;rsquo;t find table 或 Got error: 1049: Unknown database 错误
原因可能是, 在命令行的末尾不能加入 分号
原因是通过DOS运行mysql命令的情况下，相当于没有进入mysql环境，不能再在命令行结束处加分号；，直接属于命令行即可！
原文见: https://blog.csdn.net/song19890528/article/details/9620981</description></item><item><title>phpstorm中写sql语句时,-数据库的表名或列名提示未找到</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm%E4%B8%AD%E5%86%99sql%E8%AF%AD%E5%8F%A5%E6%97%B6-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A1%A8%E5%90%8D%E6%88%96%E5%88%97%E5%90%8D%E6%8F%90%E7%A4%BA%E6%9C%AA%E6%89%BE%E5%88%B0/</link><pubDate>Sun, 15 Jul 2018 20:56:41 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm%E4%B8%AD%E5%86%99sql%E8%AF%AD%E5%8F%A5%E6%97%B6-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A1%A8%E5%90%8D%E6%88%96%E5%88%97%E5%90%8D%E6%8F%90%E7%A4%BA%E6%9C%AA%E6%89%BE%E5%88%B0/</guid><description> 在phpstorm中配置连接当前数据库 在数据库上选择同步即可</description></item><item><title>js中一个函数作为另一个函数的参数时,-是否加-引号</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E6%97%B6-%E6%98%AF%E5%90%A6%E5%8A%A0-%E5%BC%95%E5%8F%B7/</link><pubDate>Mon, 02 Jul 2018 12:49:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E6%97%B6-%E6%98%AF%E5%90%A6%E5%8A%A0-%E5%BC%95%E5%8F%B7/</guid><description>setInterval(&amp;#34;abc()&amp;#34;,1000); // setInterval(abc,1000); function abc(){ document.write(&amp;#34;abc&amp;#34;); } 以上两种写法都可以: 加引号,就要带 括号; 不加引号,就不要带括号</description></item><item><title>JS-区分变量类型,用-typeof-操作符的结果</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%8C%BA%E5%88%86%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E7%94%A8-typeof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E7%BB%93%E6%9E%9C/</link><pubDate>Sun, 01 Jul 2018 16:55:37 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%8C%BA%E5%88%86%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E7%94%A8-typeof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E7%BB%93%E6%9E%9C/</guid><description>原文见: 廖雪峰js教程
在JavaScript的世界里，一切都是对象。 但是某些对象还是和其他对象不太一样。 为了区分对象的类型，我们用 typeof 操作符获取对象的类型，它总是返回一个字符串：
typeof 123; // &amp;#39;number&amp;#39; typeof NaN; // &amp;#39;number&amp;#39; typeof &amp;#39;str&amp;#39;; // &amp;#39;string&amp;#39; typeof true; // &amp;#39;boolean&amp;#39; typeof undefined; // &amp;#39;undefined&amp;#39; typeof Math.abs; // &amp;#39;function&amp;#39; typeof null; // &amp;#39;object&amp;#39; typeof []; // &amp;#39;object&amp;#39; typeof {}; // &amp;#39;object&amp;#39; 可见，number、string、boolean、function和undefined有别于其他类型。特别注意null的类型是object，Array的类型也是object，如果我们用typeof将无法区分出null、Array和通常意义上的object——{}。
此外
var val = 123.4; console.log(typeof val.toFixed(2));// string 注意: 用parseInt()或parseFloat()来转换任意类型到number； 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法； 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}； typeof操作符可以判断出 number、boolean、string、function 和 undefined； 判断Array要使用 Array.isArray(arr)； 判断null请使用 myVar === null； 判断某个全局变量是否存在用 typeof window.</description></item><item><title>js-数组对象的-sort()--按自己的要求排序</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84-sort--%E6%8C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A6%81%E6%B1%82%E6%8E%92%E5%BA%8F/</link><pubDate>Sun, 01 Jul 2018 16:34:23 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84-sort--%E6%8C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A6%81%E6%B1%82%E6%8E%92%E5%BA%8F/</guid><description>js 数组的 sort() 排序 默认是按 ascii 码排序
var arr = [0,1,11,2,123,3,4]; arr = arr.sort(); console.log(arr); // Array [ 0, 1, 11, 123, 2, 3, 4 ] 如果想要按照大小排序, 可在 sort() 中将一个函数作为参数调用
var arr = [0,1,11,2,123,3,4]; arr = arr.sort(mySort); function mySort(a,b) { return a-b; } console.log(arr);// Array [ 0, 1, 2, 3, 4, 11, 123 ] 这里的 mySort 函数, 接收两个参数, 依次是数组中的两个值, 然后返回一个值, 再让 sort 方法来判定哪个在前, 哪个在后 (类似于冒泡排序), 这里的返回值应该是按 正负 来判断, 大于0则a在前, 小于0则b在前.</description></item><item><title>phpstorm-正则表达式进行查找替换</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/phpstorm-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</link><pubDate>Sun, 01 Jul 2018 15:11:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/phpstorm-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</guid><description>想在phpstorm中 全部清除 之间的内容(保留script标签), 查找的正则表达式 为 ()([\s\S]*)(), 其中的 [\s\S] 表示 包括换行符在内的任何字符, 也可用 [\d\D] 或[\w\W] 代替, 这样默认为贪婪模式, 会匹配第一个 和最后一个 之间的内容
如果有多个 script 标签, 那么正则表达式为 ()((?!)[\s\S])*(), 其中 (?!) 表示 非 这个字符串
替换的正则表达式 为 $1\n\n$3</description></item><item><title>JS-中数组对象-length-属性值与php-count()-差异</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1-length-%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8Ephp-count-%E5%B7%AE%E5%BC%82/</link><pubDate>Sat, 30 Jun 2018 14:24:58 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1-length-%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8Ephp-count-%E5%B7%AE%E5%BC%82/</guid><description>Js的length 指的是 最大数字索引(arr[0] 或 arr[‘0’])的下标值+1, 如果是关联数组, 那么length值为0; Php中 count($arr) 反映的是 arr数组中元素的个数.
&amp;lt;script type=text/javascript&amp;gt; var arr = []; var brr = []; arr[0]=0; arr[5]=5; brr[&amp;#39;a&amp;#39;] = &amp;#39;a&amp;#39;; brr[&amp;#39;e&amp;#39;]=&amp;#39;e&amp;#39;; console.log(arr.length); // 6 console.log(brr.length); // 0 &amp;lt;/script&amp;gt; &amp;lt;?php $arr=[]; $arr[0]=0; $arr[5]=5; echo count($arr);// 2 ?&amp;gt;</description></item><item><title>js-逻辑运算的结果不一定是-boolean</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF-boolean/</link><pubDate>Fri, 29 Jun 2018 17:21:59 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF-boolean/</guid><description>js 逻辑运算符的结果不一定是 boolean. 只有当 逻辑非 运算时,结果才是 布尔值中的 true 或 false; 逻辑与 逻辑或 运算的结果为能确定运算结果的那一项, 可能是任意类型
var z = 9 &amp;amp;&amp;amp; 0 &amp;amp;&amp;amp; 99; console.log(z); // 0 console.log(typeof z); // number var z = 9 &amp;amp;&amp;amp; &amp;#34;&amp;#34; &amp;amp;&amp;amp; 99; console.log(z); // console.log(typeof z); // string var z = 9 &amp;amp;&amp;amp; null &amp;amp;&amp;amp; 99; console.log(z); // null console.log(typeof z); // object</description></item><item><title>a标签伪类：visited-text-decoration设置无效的原因</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BBvisited-text-decoration%E8%AE%BE%E7%BD%AE%E6%97%A0%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</link><pubDate>Thu, 28 Jun 2018 18:33:09 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BBvisited-text-decoration%E8%AE%BE%E7%BD%AE%E6%97%A0%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</guid><description>a:visited 伪类可能会暴露用户浏览信息记录，攻击者可能会据此判断用户曾经访问过的网站，造成不必要的损失，因此这些浏览器决定限制 a:visited 的功能， 所以不是代码的问题，而是浏览器方面的限制。
用下划线来判断某链接是否曾被点击过是失效的，那么我们就只能通过设置颜色来区别了
原文见: https://www.cnblogs.com/phoenixee/p/5960917.html</description></item><item><title>用-uploadifive-插件上传文件时的问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E7%94%A8-uploadifive-%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 20 May 2018 17:33:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E7%94%A8-uploadifive-%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>官方文档错误 fileType 的值是 &amp;lsquo;fileType&amp;rsquo;: &amp;lsquo;image&amp;rsquo; 而不能是 &amp;lsquo;fileType&amp;rsquo;: &amp;lsquo;image/*&amp;rsquo;
后台用tp5框架时, 返回值如果是数组,则要通过json_encode [ 或者tp5 的 json ]函数进行转码, 而不能直接 return[即使配置文件中设置了 &amp;lsquo;default_return_type&amp;rsquo; =&amp;gt; &amp;lsquo;json&amp;rsquo;,] 否则会出现错误</description></item><item><title>phpstorm-快捷生成函数的注释</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/phpstorm-%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%A8%E9%87%8A/</link><pubDate>Wed, 16 May 2018 23:46:17 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/phpstorm-%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%A8%E9%87%8A/</guid><description>在函数上一行键入 /**
/** * @param $a * @param $b * @return mixed */ function abc($a, $b) { $c = $a + $b; return $c; } 然后 enter 回车即可</description></item><item><title>php-正则匹配中文</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E4%B8%AD%E6%96%87/</link><pubDate>Tue, 15 May 2018 18:56:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E4%B8%AD%E6%96%87/</guid><description>php正则匹配汉字!
$reg = &amp;lsquo;/^[\x{4e00}-\x{9fa5}]+$/u&amp;rsquo;;
而不是 $reg = &amp;lsquo;/^[\u4e00-\u9fa5]+$/u&amp;rsquo;;</description></item><item><title>thinkphp5-模板渲染-在控制器中不能-少了return</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/thinkphp5-%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93-%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD%E4%B8%8D%E8%83%BD-%E5%B0%91%E4%BA%86return/</link><pubDate>Thu, 26 Apr 2018 18:00:40 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/thinkphp5-%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93-%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD%E4%B8%8D%E8%83%BD-%E5%B0%91%E4%BA%86return/</guid><description>namespace module\controller; use think\Controller; class index extends Controller { public function index{ return this-&amp;gt;view-&amp;gt;fetch(&amp;#39;index&amp;#39;); } }</description></item><item><title>ThinkPHP5-对无限分类数组进行分页显示</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/thinkphp5-%E5%AF%B9%E6%97%A0%E9%99%90%E5%88%86%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%98%BE%E7%A4%BA/</link><pubDate>Thu, 26 Apr 2018 11:16:20 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/thinkphp5-%E5%AF%B9%E6%97%A0%E9%99%90%E5%88%86%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%98%BE%E7%A4%BA/</guid><description>use think\Controller; use think\paginator\driver\Bootstrap; class Category extends Controller { public function index2() { // 1.获取要分页的数组 $cate = CategoryModel::getCate();// 无限分类后的数组 $data = $cate; // 1.1 设置当前分页(从url get方式获取), 每页显示记录行数 $curPage = input(&amp;#39;page&amp;#39;) ? input(&amp;#39;page&amp;#39;) : 1; $listRow = 3; // 1.2 得到当前分页所要显示的数组(array_chunk 或 array_slice 函数) $showData = array_chunk($data, $listRow, true); $showData = $showData[$curPage - 1]; // $showData = array_slice($data, ($curPage - 1) * $listRow, $listRow, true); // 1.3 调用Bootstrap类方法生成分页对象 $p = Bootstrap::make($showData, $listRow, $curPage, count($data), false, [ &amp;#39;var_page&amp;#39; =&amp;gt; &amp;#39;page&amp;#39;, &amp;#39;path&amp;#39; =&amp;gt; url(&amp;#39;category/index2&amp;#39;), // 这里根据需要修改url &amp;#39;query&amp;#39; =&amp;gt; [], &amp;#39;fragment&amp;#39; =&amp;gt; &amp;#39;&amp;#39;, ]); $p-&amp;gt;appends($_GET); // 添加URL参数 // 2.</description></item><item><title>在弹窗通过layer插件打开的情况下，采用jQuery-Ajax提交表单后，弹窗无法关闭</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%9C%A8%E5%BC%B9%E7%AA%97%E9%80%9A%E8%BF%87layer%E6%8F%92%E4%BB%B6%E6%89%93%E5%BC%80%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%87%87%E7%94%A8jquery-ajax%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%E5%90%8E%E5%BC%B9%E7%AA%97%E6%97%A0%E6%B3%95%E5%85%B3%E9%97%AD/</link><pubDate>Tue, 24 Apr 2018 20:08:57 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%9C%A8%E5%BC%B9%E7%AA%97%E9%80%9A%E8%BF%87layer%E6%8F%92%E4%BB%B6%E6%89%93%E5%BC%80%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%87%87%E7%94%A8jquery-ajax%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%E5%90%8E%E5%BC%B9%E7%AA%97%E6%97%A0%E6%B3%95%E5%85%B3%E9%97%AD/</guid><description>原文地址:https://blog.csdn.net/cc_niu/article/details/77949829
自己代码:
&amp;lt;script&amp;gt; jQuery(&amp;#34;#updatebtn&amp;#34;).click(function () { jQuery.ajax({ type: &amp;#39;POST&amp;#39;, url: &amp;#34;&amp;lt;{:url(&amp;#39;admin/admin/update&amp;#39;)}&amp;gt;&amp;#34;, data: jQuery(&amp;#34;.layui-form&amp;#34;).serialize(), dataType: &amp;#39;json&amp;#39;, success: function (data) { if (data.status == 1) { // 成功返回 alert(data.message); // 刷新父级窗口,即可关闭当前窗口 window.parent.location.reload(); } else { // 失败返回 alert(data.message); window.location.href = &amp;#34;&amp;lt;{:url(&amp;#39;admin/edit&amp;#39;)}&amp;gt;&amp;#34;; } } }) }); &amp;lt;/script&amp;gt;</description></item><item><title>jQuery-AJAX-提交表单信息时,提交按钮不能为-submit</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/jquery-ajax-%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%E4%BF%A1%E6%81%AF%E6%97%B6%E6%8F%90%E4%BA%A4%E6%8C%89%E9%92%AE%E4%B8%8D%E8%83%BD%E4%B8%BA-submit/</link><pubDate>Tue, 24 Apr 2018 19:17:50 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/jquery-ajax-%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%E4%BF%A1%E6%81%AF%E6%97%B6%E6%8F%90%E4%BA%A4%E6%8C%89%E9%92%AE%E4%B8%8D%E8%83%BD%E4%B8%BA-submit/</guid><description>ajax代码:
&amp;lt;script&amp;gt; jQuery(&amp;#34;#btn&amp;#34;).click(function () { jQuery.ajax({ type: &amp;#39;POST&amp;#39;, url: &amp;#34;&amp;lt;{:url(&amp;#39;admin/admin/update&amp;#39;)}&amp;gt;&amp;#34;, data: jQuery(&amp;#34;form&amp;#34;).serialize(), dataType: &amp;#39;json&amp;#39;, success: function (data) { if (data.status == 1) { alert(data.message); // window.location.href = &amp;#34;&amp;lt;{:url(&amp;#39;admin/index&amp;#39;)}&amp;gt;&amp;#34;; } else { alert(data.message); // window.location.href = &amp;#34;&amp;lt;{:url(&amp;#39;admin/edit&amp;#39;)}&amp;gt;&amp;#34;; } } }) }); &amp;lt;/script&amp;gt; html文件可以是:
&amp;lt;input type=&amp;#34;button&amp;#34; id=&amp;#34;btn0&amp;#34; value=&amp;#34;保存&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; id=&amp;#34;btn1&amp;#34;&amp;gt;保存&amp;lt;/button&amp;gt; &amp;lt;a&amp;gt;保存&amp;lt;/a&amp;gt;</description></item><item><title>php路径</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E8%B7%AF%E5%BE%84/</link><pubDate>Mon, 19 Mar 2018 18:14:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E8%B7%AF%E5%BE%84/</guid><description>/ 代表服务器根目录 ./ 代表当前同一级目录 ../ 代表上一级目录</description></item><item><title>phpstorm-删除空行</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E5%88%A0%E9%99%A4%E7%A9%BA%E8%A1%8C/</link><pubDate>Wed, 31 Jan 2018 21:45:03 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/phpstorm-%E5%88%A0%E9%99%A4%E7%A9%BA%E8%A1%8C/</guid><description>思路: 用正则把所有空行找到，然后一键全部替换。
步骤: 首先把 Regex 打上勾 ctrl+f 搜索框就填写正则规则：^\n ctrl+r 匹配到所有空行之后，点击【Replace all】即可</description></item><item><title>PHP封装一个自己的my_parse_ini_file()</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84my_parse_ini_file/</link><pubDate>Tue, 30 Jan 2018 22:30:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84my_parse_ini_file/</guid><description>PHP文件提取练习[parse_ini_file() ] ： 编写一个自己的 my_parse_ini_file() ，完成对 .ini 文件的读取 提示: explode 分割字符串 / fgets 读取一行数据 &amp;lt;?php function my_parse_ini_file($dir) { if (!file_exists($dir)) { echo &amp;#39;文件不存在, 无法访问&amp;#39;; return FALSE; } else { $fsize = filesize($dir); $fp = fopen($dir, &amp;#39;r&amp;#39;); $con_str = fread($fp, $fsize); // 把字符串中的空白字符&amp;#39; &amp;#39;替换为&amp;#39;&amp;#39;, 也就是删除空白字符 $con_str = str_replace(&amp;#39; &amp;#39;, &amp;#39;&amp;#39;, $con_str); // 按回车换行给字符串分割成数组 $arr_temp1 = explode(&amp;#34;\r\n&amp;#34;, $con_str); $arr_res = array(); foreach ($arr_temp1 as $value) { $arr_temp2 = explode(&amp;#39;=&amp;#39;, $value); $arr_res[$arr_temp2[0]] = $arr_temp2[1]; } return $arr_res; } } $file_full_path = &amp;#39;e:/config.</description></item><item><title>双引号和单引号----由sql语句中的字符串变量而来</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8D%95%E5%BC%95%E5%8F%B7----%E7%94%B1sql%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E9%87%8F%E8%80%8C%E6%9D%A5/</link><pubDate>Fri, 12 Jan 2018 13:43:35 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8D%95%E5%BC%95%E5%8F%B7----%E7%94%B1sql%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E9%87%8F%E8%80%8C%E6%9D%A5/</guid><description>在用php操作mysql 表的时候,遇到一个问题 表结构: CREATE TABLE news ( id int(10) unsigned NOT NULL AUTO_INCREMENT, title varchar(50) DEFAULT NULL, content text, add_time int(11) DEFAULT NULL, PRIMARY KEY (id) );
写了条sql语句
结果第一条可以正确显示,第二条却出错
原因在于title字段类型是字符串,所以其中的变量要用引号引起来 也就是 $sql2 = &amp;ldquo;SELECT * FROM news WHERE title=&amp;rsquo;$title&amp;rsquo;&amp;rdquo;;
由此举例php中单双引号的使用情况如下:</description></item><item><title>Sublime-Text-3-快捷键汇总</title><link>https://zhujianghan.github.io/zjh-blog/posts/other/sublime-text-3-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</link><pubDate>Tue, 09 Jan 2018 16:24:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/other/sublime-text-3-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</guid><description>1、选择类 Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。 Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。 Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。 Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。 Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。 Ctrl+M 光标移动至括号内结束或开始的位置。 Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。 Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。 Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。 Ctrl+Shift+] 选中代码，按下快捷键，展开代码。 Ctrl+K+0 展开所有折叠代码。 Ctrl+← 向左单位性地移动光标，快速移动光标。 Ctrl+→ 向右单位性地移动光标，快速移动光标。 shift+↑ 向上选中多行。 shift+↓ 向下选中多行。 Shift+← 向左选中文本。 Shift+→ 向右选中文本。 Ctrl+Shift+← 向左单位性地选中文本。 Ctrl+Shift+→ 向右单位性地选中文本。 Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。 Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。 Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。 Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。
2、编辑类 Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。 Ctrl+Shift+D 复制光标所在整行，插入到下一行。 Tab 向右缩进。 Shift+Tab 向左缩进。 Ctrl+K+K 从光标处开始删除代码至行尾。 Ctrl+Shift+K 删除整行。 Ctrl+/ 注释单行。 Ctrl+Shift+/ 注释多行。 Ctrl+K+U 转换大写。 Ctrl+K+L 转换小写。 Ctrl+Z 撤销。 Ctrl+Y 恢复撤销。 Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。 Ctrl+F2 设置书签 Ctrl+T 左右字母互换。 F6 单词检测拼写</description></item><item><title>数据库事务四大特性</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</link><pubDate>Mon, 08 Jan 2018 12:34:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</guid><description>数据库事务是指作为单个逻辑工作单元执行的一系列操作，这些操作要么全做要么全不做，是一个不可分割的工作单位。
数据库事务的四大特性(简称ACID)是：
(1) 原子性(Atomicity) 事务的原子性指的是，事务中包含的程序作为数据库的逻辑工作单位，它所做的对数据修改操作要么全部执行，要么完全不执行。这种特性称为原子性。 例如银行取款事务分为2个步骤(1)存折减款(2)提取现金。不可能存折减款，却没有提取现金。2个步骤必须同时完成或者都不完成。
(2)一致性(Consistency) 事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。这种特性称为事务的一致性。假如数据库的状态满足所有的完整性约束，就说该数据库是一致的。 例如完整性约束a+b=10，一个事务改变了a，那么b也应随之改变。
(3)分离性(亦称独立性Isolation) 分离性指并发的事务是相互隔离的。即一个事务内部的操作及正在操作的数据必须封锁起来，不被其它企图进行修改的事务看到。假如并发交叉执行的事务没有任何控制，操纵相同的共享对象的多个并发事务的执行可能引起异常情况。
(4)持久性(Durability) 持久性意味着当系统或介质发生故障时，确保已提交事务的更新不能丢失。即一旦一个事务提交，DBMS保证它对数据库中数据的改变应该是永久性的，即对已提交事务的更新能恢复。持久性通过数据库备份和恢复来保证。
原文地址: http://blog.csdn.net/wolenski/article/details/7980521</description></item><item><title>mysql语句分类-DML-DDL-DCL</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB-dml-ddl-dcl/</link><pubDate>Sun, 07 Jan 2018 16:47:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB-dml-ddl-dcl/</guid><description>DML（data manipulation language）： 它们是SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这4条命令是用来对数据库里的数据进行操作的语言
DDL（data definition language）： DDL比DML要多，主要的命令有CREATE、ALTER、DROP等，DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用
DCL（Data Control Language）： 是数据库控制功能。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL</description></item><item><title>mysql-group-by-having-查询时别名</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-group-by-having-%E6%9F%A5%E8%AF%A2%E6%97%B6%E5%88%AB%E5%90%8D/</link><pubDate>Fri, 05 Jan 2018 15:03:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-group-by-having-%E6%9F%A5%E8%AF%A2%E6%97%B6%E5%88%AB%E5%90%8D/</guid><description>select deptname,count(*) as &amp;lsquo;专业个数&amp;rsquo; from class group by deptname having 专业个数&amp;gt;1;
having后面的别名不能用引号</description></item><item><title>mysql-数值类型指定宽度</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E5%AE%BD%E5%BA%A6/</link><pubDate>Fri, 05 Jan 2018 11:28:53 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E5%AE%BD%E5%BA%A6/</guid><description>mysql 数值类型关键字后面的括号内指定整数值的显示宽度(例如，INT(4))。 但是这里的(4) 需要和 zerofill 一起用, 否则不会有效果.
当结合可选扩展属性ZEROFILL使用时， 默认补充的空格用零代替。例如，对于声明为INT(5) ZEROFILL的列，值4检索为00004。
如果为一个数值列指定ZEROFILL，MySQL自动为该列添加UNSIGNED属性。</description></item><item><title>mysql-复制表结构</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E5%A4%8D%E5%88%B6%E8%A1%A8%E7%BB%93%E6%9E%84/</link><pubDate>Thu, 04 Jan 2018 23:45:13 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E5%A4%8D%E5%88%B6%E8%A1%A8%E7%BB%93%E6%9E%84/</guid><description>实例: mysql&amp;gt;create database db2018 charset=utf8 collate utf8_general_ci; mysql&amp;gt;create table tb1(id int,name varchar(20)) engine=myisam charset=utf8;
创建一个临时表tbtemp,结构与tb1一致 mysql&amp;gt;create table tbtemp like tb1;</description></item><item><title>MySQL查看当前数据库database【三种方法】</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93database%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</link><pubDate>Thu, 04 Jan 2018 23:28:49 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93database%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</guid><description>在MySQL下查看当前使用的是哪个数据库，有三种方式
（1）用select database()语句
mysql&amp;gt; select database(); +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+ | database() | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+ | test | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+ 1 row in set (0.00 sec)
从查询结果中可以看出，当前用的是test数据库
（2）用show tables语句，查询出来的结果中，第一行为Tables_in_XXX，这里XXX就
是当前所用的数据库名称。
mysql&amp;gt; show tables; +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ | Tables_in_test | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ | push_test | | ship_order_detail | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ 2 rows in set (0.00 sec)
从查询结果中可以看出，当前用的是test数据库。
（3）用status语句，查询出来的结果中有一行是currrent database: XXX。这里XXX就 是当前所用的数据库名称。
mysql&amp;gt; status; mysql Ver 14.14 Distrib 5.1.60, for pc-linux-gnu (i686) using EditLine wrapper Connection id: 1484237 Current database: test Current user: root@localhost SSL: Not in use</description></item><item><title>mysql中-date_add(date,interval-type)</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E4%B8%AD-date_adddateinterval-type/</link><pubDate>Mon, 06 Nov 2017 18:14:01 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E4%B8%AD-date_adddateinterval-type/</guid><description>mysql中 date_add(date,interval type) 中, date类型不能为&amp;quot;时间戳&amp;quot;.</description></item><item><title>php-双引号调用函数</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E5%8F%8C%E5%BC%95%E5%8F%B7%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 03 Sep 2017 10:46:25 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php-%E5%8F%8C%E5%BC%95%E5%8F%B7%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</guid><description/></item><item><title>上网证书错误</title><link>https://zhujianghan.github.io/zjh-blog/posts/server/%E4%B8%8A%E7%BD%91%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/</link><pubDate>Mon, 28 Aug 2017 09:13:19 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/server/%E4%B8%8A%E7%BD%91%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF/</guid><description>新装了一个intellij idea，因为想搞个长期试用，就把系统时间设置到2050年去了。后来再用cdn的boostrap就不能显示css了，原因是证书过期无效，一看系统时间没改过来，改回就没问题了。</description></item><item><title>php获取时间有误</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E6%9C%89%E8%AF%AF/</link><pubDate>Sun, 27 Aug 2017 00:06:40 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/php%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E6%9C%89%E8%AF%AF/</guid><description>我们用echo date(&amp;ldquo;Y-m-d H:i:s&amp;rdquo;);获取当前时间； 但有时我们会发现我们获取的时间其实比北京时间少8个小时（获取的是标准时间），这说明我们没有修改php配置文件里面的data属性。
如果我们想获取的是当前北京时间的话，我们必须将我们的php.ini配置文件修改一下：
[Date] ; Defines the default timezone used by the date functions date.timezone = &amp;lsquo;PRC&amp;rsquo;
这样即可，同理我们可以更改‘PRC’获取不同地区的当前时间。
ps：我这是wamp装的php，这里的php.ini不光在 wanmp/bin/php/php5.6.25/ 里的php.ini要改；wanmp/bin/apache/apache2.4.23/bin 里的php.ini 也要改</description></item><item><title>css-左右分栏各自滚动</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/css%E5%B7%A6%E5%8F%B3%E5%88%86%E6%A0%8F%E5%90%84%E8%87%AA%E6%BB%9A%E5%8A%A8/</link><pubDate>Sat, 20 Dec 2014 14:11:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/css%E5%B7%A6%E5%8F%B3%E5%88%86%E6%A0%8F%E5%90%84%E8%87%AA%E6%BB%9A%E5%8A%A8/</guid><description>方式: 左右分别设置 h-screen, overflow-y-auto &amp;lt;body&amp;gt;
&amp;lt;div class=&amp;#34;flex&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;h-screen overflow-y-auto w-1/6 bg-slate-500 text-white&amp;#34;&amp;gt;
&amp;lt;div&amp;gt;sidebar&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#34;h-[1200px]&amp;#34;&amp;gt;sidebar&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;sidebar&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;sidebar&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#34;h-screen overflow-y-auto w-5/6 overflow-y-auto bg-blue-200&amp;#34;&amp;gt;
&amp;lt;div&amp;gt;111&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;111&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#34;h-[1200px]&amp;#34;&amp;gt;111&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;111&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt; 参考自csdn:</description></item></channel></rss>