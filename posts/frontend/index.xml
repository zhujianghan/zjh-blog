<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frontend | Posts on Fourleaf Blog</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/</link><description>Recent content in Frontend | Posts on Fourleaf Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 09 Jun 2023 11:43:33 +0800</lastBuildDate><atom:link href="https://zhujianghan.github.io/zjh-blog/posts/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>Line Clamp 展开问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/line-clamp-%E5%B1%95%E5%BC%80%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 09 Jun 2023 11:43:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/line-clamp-%E5%B1%95%E5%BC%80%E9%97%AE%E9%A2%98/</guid><description>要求: 多行文本时, 显示可展开按钮, 如果小于指定行数则无需显示 通过 line-clamp 设置行数 通过里外 div 的高度来初始化是否需要 &amp;ldquo;展开&amp;rdquo; 按钮 &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .contentBox { margin: 20px 0; border: 1px solid #666; width: 200px; } input { display: none; } .outer { overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 5; } input[name=&amp;#34;toggle&amp;#34;]:checked + .outer { -webkit-line-clamp: unset; } input[name=&amp;#34;toggle&amp;#34;]:checked + div.outer + label::after { content: &amp;#39;收起&amp;#39;; } label::after { content: &amp;#39;更多&amp;#39;; } label { display: none; background: #aaa; padding: 1px 2px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;button onclick=&amp;#34;setLine(&amp;#39;&amp;lt;3&amp;#39;)&amp;#34;&amp;gt;文本长度 &amp;lt; 3 行&amp;lt;/button&amp;gt; &amp;lt;button onclick=&amp;#34;setLine(&amp;#39;=3&amp;#39;)&amp;#34;&amp;gt;文本长度 = 3 行&amp;lt;/button&amp;gt; &amp;lt;button onclick=&amp;#34;setLine(&amp;#39;&amp;gt;3&amp;#39;)&amp;#34;&amp;gt;文本长度 &amp;gt; 3行&amp;lt;/button&amp;gt; &amp;lt;div class=&amp;#34;contentBox&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;toggle&amp;#34; name=&amp;#34;toggle&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;outer&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;inner&amp;#34;&amp;gt; -webkit-line-clamp CSS 属性可以把块容器中的内容限制为指定的行数。 &amp;lt;br&amp;gt; 它只有在 display 属性设置成 -webkit-box 或者 -webkit-inline-box 并且 box-orient 属性设置成 vertical时才有效果。 &amp;lt;br&amp;gt; 在大部分情况下，也需要设置 overflow 属性为 hidden，否则，里面的内容不会被裁减，并且在内容显示为指定行数后还会显示省略号。 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;label for=&amp;#34;toggle&amp;#34;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; function displayLabel() { if (document.</description></item><item><title>Jquery Fill Vue Input</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-fill-vue-input/</link><pubDate>Thu, 28 Jul 2022 09:10:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-fill-vue-input/</guid><description>想要使用 Jquery 写油猴脚本自动填充网页中的 input 框时, 使用 jquery 操作如下
&amp;lt;form&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; $(&amp;#39;input:eq(0)&amp;#39;).val(&amp;#39;myname&amp;#39;) // eq 用于特定第几个 input $(&amp;#39;input:eq(1)&amp;#39;).val(&amp;#39;mypassword&amp;#39;) 但如果目标网页是由 Vue(React) 编写的, 那么此种方法并不能改变框架内的 v-model 的值, 原因是 Vue 监听的是 input 元素的 input 事件, 而直接使用 jquery(vanilla js) 修改 input 元素的值并不会触发 input 事件,
解决办法是修改值后, 手动触发 input 事件
$(&amp;#39;input:eq(0)&amp;#39;)[0].dispatchEvent(new Event(&amp;#39;input&amp;#39;), {bubbles: true})</description></item><item><title>Js Data Types</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-data-types/</link><pubDate>Thu, 14 Jul 2022 10:51:21 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-data-types/</guid><description> flowchart TD L1([JS 数据类型]) L1-->L21(基本类型 数值类型) L1-->L22(对象类型 引用类型) L21-->L301(字符串) L21-->L302(数字) L21-->L303(布尔) L21-->L304(undefined) L21-->L305(null) L22-->L311(对象) L22-->L312(数组) L22-->L313(函数) flowchart TD L1([JS 数据类型判断方法]) L1-->L21(typeof) L1-->L22(instanceof) L1-->L23("===") L21--可以判断-->L311(字符串
数字
布尔
undefined
function) L21--不可以判断-->L312(null Vs Object
Object Vs Array) L22-->L321(对象的具体类型) L23-->L33(null, undefined)</description></item><item><title>html-字体大小-font-size-不一至时的垂直对齐问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F-font-size-%E4%B8%8D%E4%B8%80%E8%87%B3%E6%97%B6%E7%9A%84%E5%9E%82%E7%9B%B4%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F-font-size-%E4%B8%8D%E4%B8%80%E8%87%B3%E6%97%B6%E7%9A%84%E5%9E%82%E7%9B%B4%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</guid><description>Xx, 就如 Xx , 默认是文本底部对齐, 设置父元素的 text-align:middle; 可以令文本完全垂直对齐
原文见: https://blog.csdn.net/qq_30541261/article/details/79754478</description></item><item><title>html中的友情链接不被`爱站`和`站长工具`的友链收录-</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/html%E4%B8%AD%E7%9A%84%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E4%B8%8D%E8%A2%AB%E7%88%B1%E7%AB%99%E5%92%8C%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8F%8B%E9%93%BE%E6%94%B6%E5%BD%95-/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/html%E4%B8%AD%E7%9A%84%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E4%B8%8D%E8%A2%AB%E7%88%B1%E7%AB%99%E5%92%8C%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8F%8B%E9%93%BE%E6%94%B6%E5%BD%95-/</guid><description>百度上原因说可能是 服务器开启了硬件防火墙;
自己遇到的是部署在虚拟主机上的项目, 不涉及硬件防火墙; 打开网页源代码, 发现友情链接为空, 原来是通过ajax传递过来的友情链接, 换成非ajax即可被正常收录</description></item><item><title>js-数组-for----in---中的-key-返回的是-string</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84-for----in---%E4%B8%AD%E7%9A%84-key-%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF-string/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84-for----in---%E4%B8%AD%E7%9A%84-key-%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF-string/</guid><description>js 数组 for&amp;hellip; in.. 中的 key 返回的是 string</description></item><item><title>localStorage-setItem()-存入的是-string</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/localstorage-setitem-%E5%AD%98%E5%85%A5%E7%9A%84%E6%98%AF-string/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/localstorage-setitem-%E5%AD%98%E5%85%A5%E7%9A%84%E6%98%AF-string/</guid><description>localStorage.setItem(&amp;#39;flag&amp;#39;, 0) // 存入 int let a= localStorage.getItem(&amp;#39;flag&amp;#39;) // 取出的是 string &amp;#39;0&amp;#39; console.log(typeof(a)) // string</description></item><item><title>position--fixed-有时候会失效</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/position--fixed-%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E5%A4%B1%E6%95%88/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/position--fixed-%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E5%A4%B1%E6%95%88/</guid><description>当父(祖)元素使用了 transform 后, 当前元素的 position 会发生改变, 其参照父元素进行定位, 而非 window 窗口
参见: https://www.jianshu.com/p/4f77fa62e14b</description></item><item><title>vue-cli3-0-项目-全局-styl-样式在-App-vue-引入后变量不生效</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-cli3-0-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%B1%80-styl-%E6%A0%B7%E5%BC%8F%E5%9C%A8-app-vue-%E5%BC%95%E5%85%A5%E5%90%8E%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-cli3-0-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%B1%80-styl-%E6%A0%B7%E5%BC%8F%E5%9C%A8-app-vue-%E5%BC%95%E5%85%A5%E5%90%8E%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</guid><description>错误情况 在 assets 下新建 common.styl 样式, 在 App.vue 的 style 标签引入后. 在没有变量的情况下可以全局使用, 有变量时, 则变量不生效
解决办法 不需要在 App.vue 中引用 在 vue.config.js 中引用 module.exports = { css: { loaderOptions: { stylus: { &amp;#39;resolve url&amp;#39;: true, &amp;#39;import&amp;#39;: [ &amp;#39;./src/theme&amp;#39;, &amp;#39;./src/assets/css/public/common&amp;#39; ] } } } }</description></item><item><title>vue-nuxt-中-通过路由来实现导航高亮</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-nuxt-%E4%B8%AD-%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E9%AB%98%E4%BA%AE/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-nuxt-%E4%B8%AD-%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E9%AB%98%E4%BA%AE/</guid><description>首先在 mounted() 中判断了路由, 实现高亮, 后来发现刷新才有用, 直接 router.push 过去的链接则不生效 监听路由变化, 执行同样的判断 mounted() { this.initHighlight() }, watch: { &amp;#34;$route&amp;#34;() { this.initHighlight() } }, methods: { // 导航高亮 initHighlight() { if (this.$route.name == &amp;#39;route1&amp;#39;) { this.active_id = -2 } else if (this.$route.name == &amp;#39;route2) { this.active_id = -1 } else if (this.$route.name == &amp;#39;route3&amp;#39;) { this.active_id = this.$route.params.navid } else { this.active_id = 0 } } } 参考自: segmentfault</description></item><item><title>什么是BFC---BFC的原理及作用-</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BB%80%E4%B9%88%E6%98%AFbfc---bfc%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8-/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BB%80%E4%B9%88%E6%98%AFbfc---bfc%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8-/</guid><description>原文见: https://www.cnblogs.com/libin-1/p/7098468.html 和 https://www.jianshu.com/p/acf76871d259
##BFC定义 在一个Web页面的CSS渲染中，块级格式化上下文 (Block Fromatting Context) 是按照块级盒子布局的。W3C对BFC的定义如下：
浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions）， 以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。 一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可： 1、float的值不是none。 2、position的值不是static或者relative。 3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex 4、overflow的值不是visible
BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。
##BFC的作用
######1. 清除内部浮动 我们在布局时经常会遇到这个问题：对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。 解决这个问题，只需要把把父元素变成一个BFC就行了。常用的办法是给父元素设置overflow:hidden。 ######2. 垂直margin合并 在CSS当中，相邻的两个盒子的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。 折叠的结果： 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 两个外边距一正一负时，折叠结果是两者的相加的和。 这个同样可以利用BFC解决。关于原理在前文已经讲过了。
######3. 创建自适应两栏布局 在很多网站中，我们常看到这样的一种结构，左图片+右文字的两栏结构。</description></item><item><title>html-打印显示页眉页脚及表格一行被分到两页的问题</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E6%89%93%E5%8D%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E7%9C%89%E9%A1%B5%E8%84%9A%E5%8F%8A%E8%A1%A8%E6%A0%BC%E4%B8%80%E8%A1%8C%E8%A2%AB%E5%88%86%E5%88%B0%E4%B8%A4%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 19 Jan 2022 18:38:17 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/html-%E6%89%93%E5%8D%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E7%9C%89%E9%A1%B5%E8%84%9A%E5%8F%8A%E8%A1%A8%E6%A0%BC%E4%B8%80%E8%A1%8C%E8%A2%AB%E5%88%86%E5%88%B0%E4%B8%A4%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>1. 每页表头问题 参考: The Ultimate Print HTML Template with Header &amp;amp; Footer | by Idan Cohen | Medium
使用 table 中的 thead 会在每页打印其中的内容, 而不需要打印页眉页脚的页面(头2页, 3页等), 继续使用 div static 布局
2. table row 被分到两页的问题 对 tr 使用 break-inside-avoid, break-after-auto 参考: How to Handle Page Breaks when Printing a Large HTML Table</description></item><item><title>匿名函数与闭包</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85/</link><pubDate>Tue, 27 Jul 2021 10:39:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85/</guid><description>程序语言支持匿名函数时, 可以由匿名函数形成闭包 闭包的作用 在函数外部使用函数内部的变量 函数内部变量的持久化 参考cnblog: 匿名函数，闭包</description></item><item><title>emmet-快速生成代码</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/emmet-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</link><pubDate>Fri, 11 Dec 2020 09:56:29 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/emmet-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</guid><description>想要 结果为
&amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;4&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;5&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;6&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;7&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;8&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;9&amp;lt;/div&amp;gt; 操作 :
div{$}*9 参考cnblog: VsCode中使用Emmet神器快速编写HTML代码</description></item><item><title>使用-js-改变-css(style)-样式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BD%BF%E7%94%A8-js-%E6%94%B9%E5%8F%98-cssstyle-%E6%A0%B7%E5%BC%8F/</link><pubDate>Thu, 10 Dec 2020 15:30:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%BD%BF%E7%94%A8-js-%E6%94%B9%E5%8F%98-cssstyle-%E6%A0%B7%E5%BC%8F/</guid><description>要改变的是样式表, 如:
&amp;lt;style&amp;gt; a.active { color: red; } &amp;lt;/style&amp;gt; &amp;lt;script&amp;gt; document.styleSheets[0].add(&amp;#39;a.active&amp;#39;, &amp;#39;color: blue !important&amp;#39;) &amp;lt;script&amp;gt; 参考cnblog: JS设置CSS样式的几种方式</description></item><item><title>浏览器页面被禁用-F12(dev-tools)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E8%A2%AB%E7%A6%81%E7%94%A8-f12dev-tools/</link><pubDate>Thu, 26 Nov 2020 09:29:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E8%A2%AB%E7%A6%81%E7%94%A8-f12dev-tools/</guid><description>背景: 打开一个网页 havey.com, 使用不了 F12
解决办法1: 使用浏览器设置栏, 打开开发者工具, 设置-&amp;gt;更多工具-&amp;gt;开发者工具 解决办法2: 在页面还没完全打开时, 快速按下 F12
解决办法3: 命令行启动浏览器, 携带参数, 强制打开所有页面的 devtools
chrome.exe –auto-open-devtools-for-tabs –user-data-dir=./ 参考 it-refer.com</description></item><item><title>npm-scripts-使用</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/npm-scripts-%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 20 Oct 2020 14:32:49 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/npm-scripts-%E4%BD%BF%E7%94%A8/</guid><description>背景: 项目安装了 browserify &amp;ndash;save-dev, 如何在命令行中使用这个命令
这个命令的位置在 node_modules/.bin/ 目录下, 可以在终端使用
node_modules/.bin/browserify --version 也可以在 package.json 中使用
&amp;#34;scripts&amp;#34;: { &amp;#34;prebuild&amp;#34;: &amp;#34;rm -rf ./js/dist/*&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;browserify ./js/src/app.js -o ./js/dist/bundle.js&amp;#34; } 参考自阮一峰博客: npm scripts 使用指南</description></item><item><title>js-数组反转,-不改变原来的数组</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%8F%8D%E8%BD%AC-%E4%B8%8D%E6%94%B9%E5%8F%98%E5%8E%9F%E6%9D%A5%E7%9A%84%E6%95%B0%E7%BB%84/</link><pubDate>Tue, 20 Oct 2020 10:58:28 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%8F%8D%E8%BD%AC-%E4%B8%8D%E6%94%B9%E5%8F%98%E5%8E%9F%E6%9D%A5%E7%9A%84%E6%95%B0%E7%BB%84/</guid><description>array.reverse(), 会改变原来的数组, 并返回该数组
如果要不改变原数组, 需要完全复制一份新的数组
const arr = [1,2,3] // 1. ... const arr2 = [...arr].reverse() // 2. slice() const arr3 = arr.slice().reverse()</description></item><item><title>redux-的-reducer-函数不能改变原-state</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/redux-%E7%9A%84-reducer-%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E6%94%B9%E5%8F%98%E5%8E%9F-state/</link><pubDate>Wed, 23 Sep 2020 15:21:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/redux-%E7%9A%84-reducer-%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E6%94%B9%E5%8F%98%E5%8E%9F-state/</guid><description>可以使用如下方法来完全复制原来的 state, 再进行操作
对于数组: concat, slice, 或 spread operator 对于对象: Object.assign 或 spread operator 参考 valentinog.com</description></item><item><title>Pure-Fuction-纯函数的定义</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/pure-fuction-%E7%BA%AF%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</link><pubDate>Wed, 23 Sep 2020 10:53:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/pure-fuction-%E7%BA%AF%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</guid><description>Pure Function wiki definition:
In computer programming a pure function is a that has the following properties:
Its return value is the same for the same arguments. Its evaluation has no side effects. 同样参数总是返回相同的结果, 也就是函数内部没有随机生成的数 没有副作用, 指的是不会改变其它的变量的值, 不会有日志记录等 redux 的 reducer 中使用 纯函数, 输入一个 state, 在不改变输入的 state 的情况下, 返回一个 新的 state</description></item><item><title>小程序-tips</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%B0%8F%E7%A8%8B%E5%BA%8F-tips/</link><pubDate>Thu, 17 Sep 2020 10:13:53 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%B0%8F%E7%A8%8B%E5%BA%8F-tips/</guid><description>一个页面中表单的 input 不能有相同的 name 值, 否则只有一个能输入</description></item><item><title>webstorm-不提示-react-router-dom-中的-hooks(useRouteMatch-)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/webstorm-%E4%B8%8D%E6%8F%90%E7%A4%BA-react-router-dom-%E4%B8%AD%E7%9A%84-hooksuseroutematch-/</link><pubDate>Thu, 17 Sep 2020 10:12:45 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/webstorm-%E4%B8%8D%E6%8F%90%E7%A4%BA-react-router-dom-%E4%B8%AD%E7%9A%84-hooksuseroutematch-/</guid><description>现象: import { BrowserRouter, Switch, // 不提示 Route, // 不提示 NavLink, useRouteMatch // 不提示 } from &amp;#39;react-router-dom&amp;#39; 原因: // react-router-dom.js export { MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter } from &amp;#39;react-router&amp;#39;; Switch, Route, useRouteMatch &amp;hellip; 这类组件(或函数) 不是真正存在于 react-router-dom.js 文件中, 而是存在于 react-router.js 中导致 WebStorm 没有识别出来.
解决办法: 在 package.json 文件的 dependencies 加入 react-router &amp;#34;react-router&amp;#34;: &amp;#34;^5.2.0&amp;#34;, // 加入此行 &amp;#34;react-router-dom&amp;#34;: &amp;#34;^5.2.0&amp;#34;, 参考自 stackoverflow: Why does IntelliJ does not auto import react router hooks?</description></item><item><title>react-router-中-path-和-url-的关系</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-router-%E4%B8%AD-path-%E5%92%8C-url-%E7%9A%84%E5%85%B3%E7%B3%BB/</link><pubDate>Wed, 16 Sep 2020 13:37:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-router-%E4%B8%AD-path-%E5%92%8C-url-%E7%9A%84%E5%85%B3%E7%B3%BB/</guid><description>// jsx let match = useRouteMatch() console.log(match) // isExact: true // params: {topicId: &amp;#34;6&amp;#34;} // path: &amp;#34;/topics/:topicId&amp;#34; // url: &amp;#34;/topics/6&amp;#34; 在动态路由中 其中, path 指的是路由的名称, 路径; url 指的是当前页面真实的地址, 也就是地址栏中显示的 url
在非动态路由中, 二者是一样的</description></item><item><title>react-把一个组件的-props-全部传给子组件</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-%E6%8A%8A%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84-props-%E5%85%A8%E9%83%A8%E4%BC%A0%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6/</link><pubDate>Wed, 16 Sep 2020 10:32:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-%E6%8A%8A%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84-props-%E5%85%A8%E9%83%A8%E4%BC%A0%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6/</guid><description>背景: 自定义了一个 MyNavLink, 统一修改了 activeClassName, 其它属性由 MyNavLink 转发到 NavLink
// 定义组件 function MyNavLink(props) { return &amp;lt;NavLink activeClassName=&amp;#39;my-active&amp;#39; {...props}/&amp;gt; } // 使用 &amp;lt;MyNavLink to=&amp;#39;/home&amp;#39; className=&amp;#39;link&amp;#39;}&amp;gt;a link&amp;lt;/MyNavLink&amp;gt; 关键: 使用 ... 对 props 进行解构</description></item><item><title>一个div内的两个行内块级元素(一个有内容,-一个无内容)不对齐</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%B8%80%E4%B8%AAdiv%E5%86%85%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%80%E4%B8%AA%E6%9C%89%E5%86%85%E5%AE%B9-%E4%B8%80%E4%B8%AA%E6%97%A0%E5%86%85%E5%AE%B9%E4%B8%8D%E5%AF%B9%E9%BD%90/</link><pubDate>Wed, 09 Sep 2020 09:24:03 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E4%B8%80%E4%B8%AAdiv%E5%86%85%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%80%E4%B8%AA%E6%9C%89%E5%86%85%E5%AE%B9-%E4%B8%80%E4%B8%AA%E6%97%A0%E5%86%85%E5%AE%B9%E4%B8%8D%E5%AF%B9%E9%BD%90/</guid><description>&amp;lt;style&amp;gt; .inline-block { display: inline-block; width: 100px; height: 100px; background-color: #aaa; /*vertical-align: middle;*/ } &amp;lt;/style&amp;gt; ... &amp;lt;div&amp;gt; &amp;lt;div class=&amp;#34;inline-block&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;inline-block&amp;gt;x&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 原因: 基线不一致 解决: 给 inline-block 类添加 veritcal-align
参考自csdn</description></item><item><title>js-疑难问题解决</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link><pubDate>Fri, 04 Sep 2020 08:41:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid><description>this 指向问题 setTimeout 解决 参考hacpai: vue 疑难杂症三大定理</description></item><item><title>清空(重置)-input-(tupe=file)-的-fileList</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B8%85%E7%A9%BA%E9%87%8D%E7%BD%AE-input-tupefile-%E7%9A%84-filelist/</link><pubDate>Thu, 03 Sep 2020 09:43:06 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B8%85%E7%A9%BA%E9%87%8D%E7%BD%AE-input-tupefile-%E7%9A%84-filelist/</guid><description>清空 input type=“file” 有两种方式
&amp;lt;input type=&amp;#34;file&amp;#34;/&amp;gt; var file = document.getElementById(&amp;#39;file&amp;#39;); // 第一种 //虽然file的value值不能设为有内容的字符，但是可以设置为空字符 file.value = &amp;#39;&amp;#39; // 第二种重新初始化file的html file.outerHTML = file.outerHTML 转自: 站内</description></item><item><title>js-完全复制一个-数组,-而非引用复制</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AE%8C%E5%85%A8%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA-%E6%95%B0%E7%BB%84-%E8%80%8C%E9%9D%9E%E5%BC%95%E7%94%A8%E5%A4%8D%E5%88%B6/</link><pubDate>Thu, 20 Aug 2020 21:09:17 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AE%8C%E5%85%A8%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA-%E6%95%B0%E7%BB%84-%E8%80%8C%E9%9D%9E%E5%BC%95%E7%94%A8%E5%A4%8D%E5%88%B6/</guid><description>// 1. 引用复制, 共用内存 let arr = [1, 2, 3] let brr = arr brr.splice(1, 1) console.log(brr) // [1, 3] console.log(arr) // [1, 3] // 2. 完全复制, 不共享内存 let arr = [1, 2, 3] let brr = [...arr] brr.splice(1, 1) console.log(brr) // [1, 3] console.log(arr) // [1, 2, 3] 在 React 中对 state 数组数据的处理, 不要直接引用赋值, 而要完成复制赋值 因为直接修改 state 数据会对 React 性能调优造成影响</description></item><item><title>js-对象的-key-是个变量时,-如果赋值</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E7%9A%84-key-%E6%98%AF%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E5%A6%82%E6%9E%9C%E8%B5%8B%E5%80%BC/</link><pubDate>Fri, 17 Jul 2020 11:49:36 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E7%9A%84-key-%E6%98%AF%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E5%A6%82%E6%9E%9C%E8%B5%8B%E5%80%BC/</guid><description>// react 中 this.setState(key, value){ [key]: value } 参考自 csdn:</description></item><item><title>taro-alias</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/taro-alias/</link><pubDate>Thu, 09 Jul 2020 09:27:08 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/taro-alias/</guid><description>官方文档: https://taro-docs.jd.com/taro/docs/config-detail 还要引入 path
const path = require(&amp;#39;path&amp;#39;) // 此步骤不能少 const config = { . . . alias: { &amp;#39;@/components&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/components&amp;#39;), &amp;#39;@/utils&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/utils&amp;#39;), &amp;#39;@/assets&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/assets&amp;#39;), &amp;#39;@/static&amp;#39;: path.resolve(__dirname, &amp;#39;..&amp;#39;, &amp;#39;src/static&amp;#39;) }, . . . }</description></item><item><title>多个-eventListener,-如何取消</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%A4%9A%E4%B8%AA-eventlistener-%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88/</link><pubDate>Wed, 08 Jul 2020 23:35:08 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%A4%9A%E4%B8%AA-eventlistener-%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88/</guid><description>参考: JavaScript事件机制
背景: 在 taro3.0.2 中, 小程序端使用 onPullDown(), 会造成 h5 端可以下拉, 但是不正常(顶部出现下拉空白, 不可恢复)
后来发现 tao-tabbar__pannel 的 touchmove 事件造成的 于是要关闭这个事件, 但是 使用 removeEventListener 不管用, 使用 addEventListener 覆盖, 会发现会依次执行, 不会覆盖, 于是就有了参考文章里的方法 e.stopImmediatePropagation()
async componentDidMount() { // h5 不支持下拉刷新, 下拉会出现空白, 且不消失 if (process.env.TARO_ENV === &amp;#39;h5&amp;#39;) { const obj = document.getElementsByClassName(&amp;#39;taro-tabbar__panel&amp;#39;) obj[0].addEventListener(&amp;#39;touchmove&amp;#39;, function (e) { e.stopImmediatePropagation() e.preventDefault() }) } . . . }</description></item><item><title>react-render(),-组件名</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-render-%E7%BB%84%E4%BB%B6%E5%90%8D/</link><pubDate>Thu, 02 Jul 2020 14:59:54 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/react-render-%E7%BB%84%E4%BB%B6%E5%90%8D/</guid><description>render 方法中只能有一个 顶级父元素
// 正确 render() { &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;1111&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;2222&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; } // 错误 render() { &amp;lt;p&amp;gt;1111&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;2222&amp;lt;/p&amp;gt; } 组件类名及 html 标签 的名称必须 首字母大写</description></item><item><title>vue-awesome-swiper-响应式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-awesome-swiper-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Mon, 01 Jun 2020 09:54:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-awesome-swiper-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>使用 vue-awesome-swiper 版本为 3.1.4 (对应的 swiper 版本为 swiper4)
// 先用原生 js + swiper4 写了一个响应式 demo.html, 每次 resize 重新 new 一个 swiper &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/css/swiper.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/js/swiper.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .swiper-container { position: relative; margin: 0 auto; } .swiper-slide { background-color: #eee; text-align: center; } .avatar { width: 120px; border-radius: 50%; /*margin: 0 auto;*/ } p.</description></item><item><title>mouseout-和--mouseleave</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/mouseout-%E5%92%8C--mouseleave/</link><pubDate>Thu, 16 Jan 2020 16:55:31 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/mouseout-%E5%92%8C--mouseleave/</guid><description>在 firefox 和 chrome 中有不同的表现
在 firefox 中 mouseout 和 mouseleave 一样, 在 chrome 中, mouseout 是离开当前元素(不包括子元素)</description></item><item><title>限制-div-或-p-内文本行数</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%99%90%E5%88%B6-div-%E6%88%96-p-%E5%86%85%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0/</link><pubDate>Wed, 15 Jan 2020 10:24:09 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%99%90%E5%88%B6-div-%E6%88%96-p-%E5%86%85%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0/</guid><description>/* css */ .text { overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; } 注意
不能设置行高 不论设备窗口多大 (pc, mobile), 始终显示指定行数</description></item><item><title>微信开发者工具报-Provisional-headers-are-shown</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E6%8A%A5-provisional-headers-are-shown/</link><pubDate>Fri, 20 Dec 2019 14:56:59 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E6%8A%A5-provisional-headers-are-shown/</guid><description>表现为没有响应结果
原因可能是 ios 设备对 get 请求头长度限制, 更换为 andriod 设备后没问题, 再换回 iphone 突然也好了 可能与设置的 axios.defaults.retry 及 axios.defaults.retryDelay 有关 参考:</description></item><item><title>axios-304-而无法正常拿到数据</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/axios-304-%E8%80%8C%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 20 Dec 2019 14:54:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/axios-304-%E8%80%8C%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE/</guid><description>服务器报 304 的原理: 客户端第一次向服务端请求资源时, 服务端响应 200 并在响应头中返回一个 ETag 值 客户端再次向服务端请求同一个资源( url 未变), 此时会带上上一次服务端返回的 ETag, 服务器检查其自身内容的 ETag 值是否与其一致，如果一致就会返回 304 状态码，告诉你内容和你保存的一致，没有发生改变过。 解决办法: 在请求头中加入 'Cache-Control': 'no-cache' // axios 封装时, 全局设置 const options = { headers: { &amp;#39;Cache-Control&amp;#39;: &amp;#39;no-cache&amp;#39; } } const client = axios.create(options) 在请求中添加一个随机的查询字符串, 如 ?query=时间戳 参考:</description></item><item><title>boostrap4-按屏幕尺寸显示和隐藏</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/boostrap4-%E6%8C%89%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E8%97%8F/</link><pubDate>Tue, 03 Dec 2019 15:13:28 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/boostrap4-%E6%8C%89%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E8%97%8F/</guid><description>原文见
&amp;lt;!-- sm 及以下隐藏: 全部隐藏, md 及以上显示(block) --&amp;gt; &amp;lt;div class=&amp;#34;d-none d-md-block&amp;#34;&amp;gt; hello bootstrap &amp;lt;/div&amp;gt;</description></item><item><title>js-邮箱正则</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%82%AE%E7%AE%B1%E6%AD%A3%E5%88%99/</link><pubDate>Wed, 27 Nov 2019 16:43:50 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%82%AE%E7%AE%B1%E6%AD%A3%E5%88%99/</guid><description>let reg = new RegExp(&amp;#34;^[a-z0-9A-Z]+[- | a-z0-9A-Z . _]+@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-z]{2,}$&amp;#34;) reg.test(&amp;#39;123456@qq.com&amp;#39;)</description></item><item><title>element-ui-一系列-then,-catch-事件转成-async-await</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E4%B8%80%E7%B3%BB%E5%88%97-then-catch-%E4%BA%8B%E4%BB%B6%E8%BD%AC%E6%88%90-async-await/</link><pubDate>Mon, 25 Nov 2019 10:36:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E4%B8%80%E7%B3%BB%E5%88%97-then-catch-%E4%BA%8B%E4%BB%B6%E8%BD%AC%E6%88%90-async-await/</guid><description>// message box async open() { const res = await this.$confirm(&amp;#39;此操作将永久删除该文件, 是否继续?&amp;#39;, &amp;#39;提示&amp;#39;).catch(_ =&amp;gt; { console.log(&amp;#39;已取消, 结束&amp;#39;) }) if (res !== &amp;#39;confirm&amp;#39;) { return } console.log(res, &amp;#34;已确认, 可以next&amp;#34;) } 原文参见 csdn</description></item><item><title>nuxt-部署并使用-nginx-作端口转发</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BD%BF%E7%94%A8-nginx-%E4%BD%9C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</link><pubDate>Thu, 14 Nov 2019 14:51:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BD%BF%E7%94%A8-nginx-%E4%BD%9C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</guid><description>代码上传 linux 服务器后, 注意 windows 下开发的 node-sass 包需要重新安装(npm rebuild node-sass), 打包 nuxt 项目 npm run build
pm2 启动 nuxt start, 在项目根目录下 pm2 start node_modules/nuxt/bin/nuxt.js -- start
配置 nginx 文件
// 最简配置 server { listen 80; server_name www.nuxt-project.com; location / { proxy_pass http://127.0.0.1:3000; } } 部署时遇到一个问题, nuxt 代码里的 api 请求地址是本地的, 放到服务器也没改, 造成会返 500
部署也可参照 nuxt 官方部署文档</description></item><item><title>element-ui-响应式布局-span-不能为0</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-span-%E4%B8%8D%E8%83%BD%E4%B8%BA0/</link><pubDate>Wed, 13 Nov 2019 15:33:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-span-%E4%B8%8D%E8%83%BD%E4%B8%BA0/</guid><description>&amp;lt;el-col :md=&amp;#34;{span:8}&amp;#34; :sm=&amp;#34;{span:0}&amp;#34; :xs=&amp;#34;{span:0}&amp;#34;&amp;gt; .... &amp;lt;/el-col &amp;gt; 会导致样式混乱, 达不到想要的隐藏效果, 可以用 .hidden-sm-and-down 类来实现</description></item><item><title>nuxt-asyncData-多个接口异步</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-asyncdata-%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5/</link><pubDate>Mon, 04 Nov 2019 13:05:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-asyncdata-%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5/</guid><description> 接口同步, 耗时长 async asyncData({$axios}){ let res1 = await $axios.get(&amp;#39;...&amp;#39;) let res2 = await $axios.get(&amp;#39;...&amp;#39;) return { res1: res1, res2: res2 } } 接口异步 async asyncData({$axios}){ let [res1, res2] = await Promise.all([ $axios.get(&amp;#39;...&amp;#39;), $axios.get(&amp;#39;...&amp;#39;) ]} return { res1: res1, res2: res2 }</description></item><item><title>页面重定向跳转</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%A1%B5%E9%9D%A2%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%B3%E8%BD%AC/</link><pubDate>Wed, 30 Oct 2019 09:37:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E9%A1%B5%E9%9D%A2%E9%87%8D%E5%AE%9A%E5%90%91%E8%B7%B3%E8%BD%AC/</guid><description>要求进入某个页面时直接跳转到另一个页面
之前都是在 script 中添加 window.location.href = 目标地址
今天 curl http://baidu.com 后发现一段代码
&amp;lt;html&amp;gt; &amp;lt;meta http-equiv=&amp;#34;refresh&amp;#34; content=&amp;#34;0;url=http://www.baidu.com/&amp;#34;&amp;gt; &amp;lt;/html&amp;gt; 使用 &amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=目标地址&amp;quot;&amp;gt; 也可以直接重定向到另一个网址</description></item><item><title>搜索框中输入法弹出时,-按回车直接走了搜索</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%90%9C%E7%B4%A2%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5%E6%B3%95%E5%BC%B9%E5%87%BA%E6%97%B6-%E6%8C%89%E5%9B%9E%E8%BD%A6%E7%9B%B4%E6%8E%A5%E8%B5%B0%E4%BA%86%E6%90%9C%E7%B4%A2/</link><pubDate>Mon, 28 Oct 2019 09:41:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%90%9C%E7%B4%A2%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5%E6%B3%95%E5%BC%B9%E5%87%BA%E6%97%B6-%E6%8C%89%E5%9B%9E%E8%BD%A6%E7%9B%B4%E6%8E%A5%E8%B5%B0%E4%BA%86%E6%90%9C%E7%B4%A2/</guid><description>此时按下回车, 却到了搜索页面
解决办法, 把搜索事件的 按下 enter 事件改为 keydown.native.enter</description></item><item><title>js-对象深度复制</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%BA%A6%E5%A4%8D%E5%88%B6/</link><pubDate>Thu, 17 Oct 2019 16:47:46 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%BA%A6%E5%A4%8D%E5%88%B6/</guid><description>js 对象复制是地址传递, 而不是值传递, 可以使用如下方法进行``深度复制`
deepClone(origin) { let target = {} for (var prop in origin) { if (origin.hasOwnProperty(prop)) { if (typeof (origin[prop]) == &amp;#39;object&amp;#39; &amp;amp;&amp;amp; origin[prop]) { target[prop] = Object.prototype.toString.call(prop) == &amp;#39;[object Array]&amp;#39; ? [] : {} arguments.callee(origin[prop], target[prop]) //递归调用 } else { target[prop] = origin[prop] //原始类型直接复制 } } } return target }</description></item><item><title>nuxt-服务端操作-cookie</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%93%8D%E4%BD%9C-cookie/</link><pubDate>Mon, 14 Oct 2019 14:17:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%93%8D%E4%BD%9C-cookie/</guid><description>cookie-universal-nuxt, 见 npm
You can use cookie-universal-nuxt to set, get and remove cookies in both client and server side nuxt apps</description></item><item><title>element-ui-carousel-响应式(自适应)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-carousel-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%87%AA%E9%80%82%E5%BA%94/</link><pubDate>Sat, 12 Oct 2019 09:44:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-carousel-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%87%AA%E9%80%82%E5%BA%94/</guid><description>&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!-- banner --&amp;gt; &amp;lt;el-carousel trigger=&amp;#34;click&amp;#34; :height=&amp;#34;bannerHeight + &amp;#39;px&amp;#39;&amp;#34;&amp;gt; &amp;lt;el-carousel-item v-for=&amp;#34;item in banners&amp;#34; :key=&amp;#34;item.id&amp;#34;&amp;gt; &amp;lt;img :src=&amp;#34;$store.state.back_url + item.image&amp;#34; alt=&amp;#34;banner&amp;#34; ref=&amp;#34;bannerHeight&amp;#34; width=&amp;#34;100%&amp;#34; @load=&amp;#34;imgLoad&amp;#34; &amp;gt; &amp;lt;/el-carousel-item&amp;gt; &amp;lt;/el-carousel&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { async asyncData({params, $axios}) { const response = await $axios.get(&amp;#39;/phpapi/home-banners&amp;#39;) return {banners: response.data.data} }, data() { return { bannerHeight: &amp;#39;&amp;#39;, } }, methods: { imgLoad() { this.$nextTick(() =&amp;gt; { this.bannerHeight = this.$refs.bannerHeight[0].height }) } }, mounted() { this.imgLoad() window.addEventListener(&amp;#39;resize&amp;#39;, () =&amp;gt; { this.</description></item><item><title>element-ui-响应式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Thu, 26 Sep 2019 16:39:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>&amp;lt;el-row :gutter=&amp;#34;10&amp;#34;&amp;gt; &amp;lt;el-col :xs=&amp;#34;{span:24,offset:0}&amp;#34; :sm=&amp;#34;{span:16,offset:4}&amp;#34; :md=&amp;#34;{span:12,offset:6}&amp;#34;&amp;gt; &amp;lt;/el-col&amp;gt; &amp;lt;/el-row&amp;gt; 原文</description></item><item><title>运行-npm-config-卡死</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E8%BF%90%E8%A1%8C-npm-config-%E5%8D%A1%E6%AD%BB/</link><pubDate>Tue, 24 Sep 2019 22:39:43 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E8%BF%90%E8%A1%8C-npm-config-%E5%8D%A1%E6%AD%BB/</guid><description>之前运行过
npm config set prefix &amp;#34;D:\Program Files(×86)\nodejs\node_global&amp;#34; 之后再运行 npm config ls -a 都不动了. 重装 node 也没有用
解决办法: 删除 users/{$user}/.npmrc 文件
原文地址</description></item><item><title>jquery-中-attr()-和-prop()-方法的区别</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-%E4%B8%AD-attr-%E5%92%8C-prop-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Wed, 28 Aug 2019 10:01:36 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/jquery-%E4%B8%AD-attr-%E5%92%8C-prop-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>背景: 使用 jquery 执行 checkbox 的全选与多选时, 第三次点击不能生效
// html &amp;lt;input id=&amp;#34;tt&amp;#34; type=&amp;#34;checkbox&amp;#34;&amp;gt; &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;select&amp;lt;/button&amp;gt; // js $(&amp;#39;#btn&amp;#39;).click(function () { if ($(this).text() == &amp;#39;select&amp;#39;) { $(&amp;#34;#tt&amp;#34;).attr(&amp;#39;checked&amp;#39;, &amp;#39;checked&amp;#39;) // attr 换成 prop $(this).text(&amp;#39;cancel&amp;#39;) } else { $(&amp;#34;#tt&amp;#34;).attr(&amp;#39;checked&amp;#39;, false) // attr 换成 prop $(this).text(&amp;#39;select&amp;#39;) } }) 把 其中的 attr 换成 prop 即可
差异 $(&amp;rsquo;&amp;rsquo;).attr()返回的是html对象 $(&amp;rsquo;&amp;rsquo;).prop()返回的是DOM对象
attr 和 prop 的使用场景： 1.添加属性名称该属性就会生效应该使用prop(); 2.是有true,false两个属性使用prop();（如&amp;rsquo;checked&amp;rsquo;,&amp;lsquo;selected&amp;rsquo;,&amp;lsquo;disabled&amp;rsquo;等） 3.其他则使用attr();
详见原文</description></item><item><title>lodash-的-防抖(debounce)和节流(throttle)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/lodash-%E7%9A%84-%E9%98%B2%E6%8A%96debounce%E5%92%8C%E8%8A%82%E6%B5%81throttle/</link><pubDate>Fri, 26 Jul 2019 16:32:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/lodash-%E7%9A%84-%E9%98%B2%E6%8A%96debounce%E5%92%8C%E8%8A%82%E6%B5%81throttle/</guid><description>防抖适合于 input 框, 等到最后一次输入才执行需要进行的操作 节流适合于 点击事件, 第一下点击就能生效, 之后指定时间段内的点击不生效
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;tempInput&amp;#34;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;button @click=&amp;#34;onClick&amp;#34;&amp;gt;点击&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; const vm = new Vue({ el: &amp;#39;#app&amp;#39;, data: { tempInput: &amp;#39;&amp;#39; }, methods: { alertFunc() { console.log(this.tempInput) }, onClick() { // this.debouncedClick() this.throttledClick() }, test() { console.log(&amp;#39;click&amp;#39; + Date.now()) } }, created() { this.debouncedAlertFunc = _.debounce(this.alertFunc, 5000) // this.debouncedClick = _.debounce(this.test, 5000) this.throttledClick = _.throttle(this.test, 5000) }, watch: { tempInput: function (newVal, oldVal) { this.</description></item><item><title>在列表页中删除一项后,-刷新页面</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%9C%A8%E5%88%97%E8%A1%A8%E9%A1%B5%E4%B8%AD%E5%88%A0%E9%99%A4%E4%B8%80%E9%A1%B9%E5%90%8E-%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</link><pubDate>Mon, 08 Jul 2019 16:59:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%9C%A8%E5%88%97%E8%A1%A8%E9%A1%B5%E4%B8%AD%E5%88%A0%E9%99%A4%E4%B8%80%E9%A1%B9%E5%90%8E-%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</guid><description> 用vue-router重新路由到当前页面，页面是不进行刷新的 使用 window.reload()，或者router.go(0), 会造成整个页面刷新, 且存在闪动( 抖动 ) 在删除成功后, 重新获取数据, 从而只让列表部分进行刷新</description></item><item><title>注册页面禁止浏览器保存账号及密码</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E7%A6%81%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%9D%E5%AD%98%E8%B4%A6%E5%8F%B7%E5%8F%8A%E5%AF%86%E7%A0%81/</link><pubDate>Wed, 03 Apr 2019 16:33:16 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E7%A6%81%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%9D%E5%AD%98%E8%B4%A6%E5%8F%B7%E5%8F%8A%E5%AF%86%E7%A0%81/</guid><description>起因: 注册页面邮箱后有验证码, 之后再有微信号, 手机号之类, 再是密码框. 在点击提交表单时, 浏览器会提示保存账号密码, 但是保存的却不是邮箱和密码, 而是面密码框上一个 input 框的内容
解决思路(使用 firefox 浏览器测试):
禁止浏览器保存密码 1.1 通过 autocomplete=off 或 new-complete 方法无效 1.2 使用 onfocus=&amp;quot;this.type='password'&amp;quot; 或 onfocus=&amp;quot;this.removeAttribute('readonly')&amp;quot; 无效 1.3 使用 window.onload=function(){ document.getElementById('myid').value = '' } 无效 1.4 未测试 使用隐藏框来保存密码, 而把显示的密码框 type 设置为 text, 并通过 js 来控制该用户输入框显示为 圆点或星号; 考虑到如果用户输入 backspace 或 delete 如何处理的问题, 遂未进行测试
让浏览器保存正确的邮箱账号和密码 在密码框之前添加一个 &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;test&amp;quot; style=&amp;quot;display:none&amp;quot;&amp;gt; 框, 并让该框的 value 与 email 框同步, 就能让浏览器保存正确的账号和密码
ps: stackoverflow 上有人说: 最新的浏览器都已(大部分)禁用了 autocomplete=off, 因为厂商认为这件事情应该交给用户而不是开发者来解决</description></item><item><title>css-文本分散对齐</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/css-%E6%96%87%E6%9C%AC%E5%88%86%E6%95%A3%E5%AF%B9%E9%BD%90/</link><pubDate>Tue, 02 Apr 2019 15:38:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/css-%E6%96%87%E6%9C%AC%E5%88%86%E6%95%A3%E5%AF%B9%E9%BD%90/</guid><description>&amp;lt;style&amp;gt; text-align-last:justify; text-align:justify; text-justify:distribute-all-lines; // 这行必加，兼容ie浏览器 &amp;lt;/style&amp;gt;</description></item><item><title>js-对象名是一个变量时,-怎么获取当前对象</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E5%90%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1/</link><pubDate>Tue, 02 Apr 2019 15:07:55 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%AF%B9%E8%B1%A1%E5%90%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E6%97%B6-%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1/</guid><description> var j1 = { &amp;#39;j11&amp;#39;: &amp;#39;a&amp;#39;, &amp;#39;j12&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;j13&amp;#39;: &amp;#39;c&amp;#39;, }; var j2 = { &amp;#39;n1&amp;#39;: &amp;#39;j1&amp;#39;, &amp;#39;n2&amp;#39;: &amp;#39;j2&amp;#39;, }; var obj = { j1: j1 }; var x = &amp;#39;n1&amp;#39;; console.log(j2[x][&amp;#39;j11&amp;#39;]);//undefined console.log(obj[j2[x]][&amp;#39;j11&amp;#39;]);// a // ? 如何直接通过对象名同名字符串来获取对象 ?</description></item><item><title>JS-的遍历-or，-forEach，map，filter，every，some等</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%9A%84%E9%81%8D%E5%8E%86-or-foreachmapfiltereverysome%E7%AD%89/</link><pubDate>Wed, 06 Mar 2019 10:40:03 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%9A%84%E9%81%8D%E5%8E%86-or-foreachmapfiltereverysome%E7%AD%89/</guid><description>原文: https://www.cnblogs.com/ihboy/p/6878427.html
1. for循环，需要知道数组的长度，才能遍历，
2. forEach循环，循环数组中每一个元素并采取操作， 没有返回值， 可以不用知道数组长度
3. map函数，遍历数组每个元素，并回调操作，需要返回值，返回值组成新的数组，原数组不变
4. filter函数， 过滤通过条件的元素组成一个新数组， 原数组不变
5. some函数，遍历数组中是否有符合条件的元素，返回Boolean值
6. every函数， 遍历数组中是否每个元素都符合条件， 返回Boolean值</description></item><item><title>vue-v-for-列表中的数据进行值的更改后,页面不能同步更新</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-v-for-%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%80%BC%E7%9A%84%E6%9B%B4%E6%94%B9%E5%90%8E%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0/</link><pubDate>Sun, 24 Feb 2019 15:54:26 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-v-for-%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%80%BC%E7%9A%84%E6%9B%B4%E6%94%B9%E5%90%8E%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0/</guid><description>&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li v-for=&amp;#34;item in list&amp;#34;&amp;gt;{{ item }}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; let vm = new Vue({ el:&amp;#39;#app&amp;#39;, data:{ list:[&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;] } }); vm.list[0]= 1; // vm.list.push(1); // vm.list.pop(); &amp;lt;/script&amp;gt; 如果没有最后的 push 与 pop 对 list 进行入栈、出栈, list 的值会改变, 但是页面不会改变; 通过对 list 进行入栈、出栈, 可以实现页面上值的改变
另附官方解决办法 https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B</description></item><item><title>js-中条件判断</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link><pubDate>Sat, 23 Feb 2019 17:41:18 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid><description> 前因: 在 vue 中使用各种条件判断 (如 v-if, v-show, disabled ) 时, 其中的 1, 0, &amp;lsquo;0&amp;rsquo; 等造成与想要的结果不同, 遂在此先记录一下
说到底还是 js 的条件判断问题 if ( exp ) { // exp 为真 } exp 为 1, true exp 为 0, false exp 为 &amp;lsquo;0&amp;rsquo;, true &amp;mdash;- 易混淆点 exp 为 true, true exp 为 false, false. exp 为 null, false exp 为 undefined, false exp 为 &amp;rsquo;true&amp;rsquo;, true exp 为 &amp;lsquo;false&amp;rsquo;, true</description></item><item><title>firefox-下-jquery-ajax-不返回值的原因-(chrome正常)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox-%E4%B8%8B-jquery-ajax-%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8E%9F%E5%9B%A0-chrome%E6%AD%A3%E5%B8%B8/</link><pubDate>Wed, 30 Jan 2019 13:45:07 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox-%E4%B8%8B-jquery-ajax-%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8E%9F%E5%9B%A0-chrome%E6%AD%A3%E5%B8%B8/</guid><description>可能是因为 点击的 button 标签的 type 属性设置为了 &amp;ldquo;submit&amp;rdquo;, 而这样 firefox 会认为其是按表单提交, 而非 ajax 的异步
所以, 把 submit 改为 button 就好了</description></item><item><title>firefox的checkbox选中后按f5刷新还是选中状态</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox%E7%9A%84checkbox%E9%80%89%E4%B8%AD%E5%90%8E%E6%8C%89f5%E5%88%B7%E6%96%B0%E8%BF%98%E6%98%AF%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81/</link><pubDate>Sun, 23 Dec 2018 09:29:01 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/firefox%E7%9A%84checkbox%E9%80%89%E4%B8%AD%E5%90%8E%E6%8C%89f5%E5%88%B7%E6%96%B0%E8%BF%98%E6%98%AF%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81/</guid><description>autocomplete=&amp;ldquo;off&amp;rdquo; 这个配置在from上或者你的checkbox上
autocomplete 属性规定输入字段是否应该启用自动完成功能。
自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</description></item><item><title>img-标签中的-src-不存在时,-不显示img标签</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/img-%E6%A0%87%E7%AD%BE%E4%B8%AD%E7%9A%84-src-%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6-%E4%B8%8D%E6%98%BE%E7%A4%BAimg%E6%A0%87%E7%AD%BE/</link><pubDate>Mon, 10 Dec 2018 10:25:00 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/img-%E6%A0%87%E7%AD%BE%E4%B8%AD%E7%9A%84-src-%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6-%E4%B8%8D%E6%98%BE%E7%A4%BAimg%E6%A0%87%E7%AD%BE/</guid><description>&amp;lt;img src=&amp;#34;{$trend.picture}&amp;#34; onerror=&amp;#34;javascript:this.remove()&amp;#34;&amp;gt;</description></item><item><title>js-确认-a-标签是否跳转</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%A1%AE%E8%AE%A4-a-%E6%A0%87%E7%AD%BE%E6%98%AF%E5%90%A6%E8%B7%B3%E8%BD%AC/</link><pubDate>Sat, 20 Oct 2018 19:10:40 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E7%A1%AE%E8%AE%A4-a-%E6%A0%87%E7%AD%BE%E6%98%AF%E5%90%A6%E8%B7%B3%E8%BD%AC/</guid><description>&amp;lt;!-- 默认使用 jquery --&amp;gt; &amp;lt;a href=&amp;#34;http://www.hao123.com&amp;#34;&amp;gt;a标签&amp;lt;/a&amp;gt; &amp;lt;script&amp;gt; $(function(){ $(&amp;#39;a&amp;#39;).click(function(){ alert(&amp;#39;ok&amp;#39;); var $res = confirm(&amp;#39;真的要跳转吗?&amp;#39;); if(!$res){ // $(this).href(&amp;#39;&amp;#39;); 这种会导致 href 变为空, 下次再要点击时,不能跳转 return false;// 这样可以成功达到确认的目的,且不影响下次点击 } }); }); &amp;lt;/script&amp;gt;</description></item><item><title>js中一个函数作为另一个函数的参数时,-是否加-引号</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E6%97%B6-%E6%98%AF%E5%90%A6%E5%8A%A0-%E5%BC%95%E5%8F%B7/</link><pubDate>Mon, 02 Jul 2018 12:49:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E6%97%B6-%E6%98%AF%E5%90%A6%E5%8A%A0-%E5%BC%95%E5%8F%B7/</guid><description>setInterval(&amp;#34;abc()&amp;#34;,1000); // setInterval(abc,1000); function abc(){ document.write(&amp;#34;abc&amp;#34;); } 以上两种写法都可以: 加引号,就要带 括号; 不加引号,就不要带括号</description></item><item><title>JS-区分变量类型,用-typeof-操作符的结果</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%8C%BA%E5%88%86%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E7%94%A8-typeof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E7%BB%93%E6%9E%9C/</link><pubDate>Sun, 01 Jul 2018 16:55:37 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E5%8C%BA%E5%88%86%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E7%94%A8-typeof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E7%BB%93%E6%9E%9C/</guid><description>原文见: 廖雪峰js教程
在JavaScript的世界里，一切都是对象。 但是某些对象还是和其他对象不太一样。 为了区分对象的类型，我们用 typeof 操作符获取对象的类型，它总是返回一个字符串：
typeof 123; // &amp;#39;number&amp;#39; typeof NaN; // &amp;#39;number&amp;#39; typeof &amp;#39;str&amp;#39;; // &amp;#39;string&amp;#39; typeof true; // &amp;#39;boolean&amp;#39; typeof undefined; // &amp;#39;undefined&amp;#39; typeof Math.abs; // &amp;#39;function&amp;#39; typeof null; // &amp;#39;object&amp;#39; typeof []; // &amp;#39;object&amp;#39; typeof {}; // &amp;#39;object&amp;#39; 可见，number、string、boolean、function和undefined有别于其他类型。特别注意null的类型是object，Array的类型也是object，如果我们用typeof将无法区分出null、Array和通常意义上的object——{}。
此外
var val = 123.4; console.log(typeof val.toFixed(2));// string 注意: 用parseInt()或parseFloat()来转换任意类型到number； 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法； 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}； typeof操作符可以判断出 number、boolean、string、function 和 undefined； 判断Array要使用 Array.isArray(arr)； 判断null请使用 myVar === null； 判断某个全局变量是否存在用 typeof window.</description></item><item><title>js-数组对象的-sort()--按自己的要求排序</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84-sort--%E6%8C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A6%81%E6%B1%82%E6%8E%92%E5%BA%8F/</link><pubDate>Sun, 01 Jul 2018 16:34:23 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84-sort--%E6%8C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A6%81%E6%B1%82%E6%8E%92%E5%BA%8F/</guid><description>js 数组的 sort() 排序 默认是按 ascii 码排序
var arr = [0,1,11,2,123,3,4]; arr = arr.sort(); console.log(arr); // Array [ 0, 1, 11, 123, 2, 3, 4 ] 如果想要按照大小排序, 可在 sort() 中将一个函数作为参数调用
var arr = [0,1,11,2,123,3,4]; arr = arr.sort(mySort); function mySort(a,b) { return a-b; } console.log(arr);// Array [ 0, 1, 2, 3, 4, 11, 123 ] 这里的 mySort 函数, 接收两个参数, 依次是数组中的两个值, 然后返回一个值, 再让 sort 方法来判定哪个在前, 哪个在后 (类似于冒泡排序), 这里的返回值应该是按 正负 来判断, 大于0则a在前, 小于0则b在前.</description></item><item><title>phpstorm-正则表达式进行查找替换</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/phpstorm-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</link><pubDate>Sun, 01 Jul 2018 15:11:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/phpstorm-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</guid><description>想在phpstorm中 全部清除 之间的内容(保留script标签), 查找的正则表达式 为 ()([\s\S]*)(), 其中的 [\s\S] 表示 包括换行符在内的任何字符, 也可用 [\d\D] 或[\w\W] 代替, 这样默认为贪婪模式, 会匹配第一个 和最后一个 之间的内容
如果有多个 script 标签, 那么正则表达式为 ()((?!)[\s\S])*(), 其中 (?!) 表示 非 这个字符串
替换的正则表达式 为 $1\n\n$3</description></item><item><title>JS-中数组对象-length-属性值与php-count()-差异</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1-length-%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8Ephp-count-%E5%B7%AE%E5%BC%82/</link><pubDate>Sat, 30 Jun 2018 14:24:58 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E4%B8%AD%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1-length-%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8Ephp-count-%E5%B7%AE%E5%BC%82/</guid><description>Js的length 指的是 最大数字索引(arr[0] 或 arr[‘0’])的下标值+1, 如果是关联数组, 那么length值为0; Php中 count($arr) 反映的是 arr数组中元素的个数.
&amp;lt;script type=text/javascript&amp;gt; var arr = []; var brr = []; arr[0]=0; arr[5]=5; brr[&amp;#39;a&amp;#39;] = &amp;#39;a&amp;#39;; brr[&amp;#39;e&amp;#39;]=&amp;#39;e&amp;#39;; console.log(arr.length); // 6 console.log(brr.length); // 0 &amp;lt;/script&amp;gt; &amp;lt;?php $arr=[]; $arr[0]=0; $arr[5]=5; echo count($arr);// 2 ?&amp;gt;</description></item><item><title>js-逻辑运算的结果不一定是-boolean</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF-boolean/</link><pubDate>Fri, 29 Jun 2018 17:21:59 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/js-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF-boolean/</guid><description>js 逻辑运算符的结果不一定是 boolean. 只有当 逻辑非 运算时,结果才是 布尔值中的 true 或 false; 逻辑与 逻辑或 运算的结果为能确定运算结果的那一项, 可能是任意类型
var z = 9 &amp;amp;&amp;amp; 0 &amp;amp;&amp;amp; 99; console.log(z); // 0 console.log(typeof z); // number var z = 9 &amp;amp;&amp;amp; &amp;#34;&amp;#34; &amp;amp;&amp;amp; 99; console.log(z); // console.log(typeof z); // string var z = 9 &amp;amp;&amp;amp; null &amp;amp;&amp;amp; 99; console.log(z); // null console.log(typeof z); // object</description></item><item><title>a标签伪类：visited-text-decoration设置无效的原因</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BBvisited-text-decoration%E8%AE%BE%E7%BD%AE%E6%97%A0%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</link><pubDate>Thu, 28 Jun 2018 18:33:09 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BBvisited-text-decoration%E8%AE%BE%E7%BD%AE%E6%97%A0%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</guid><description>a:visited 伪类可能会暴露用户浏览信息记录，攻击者可能会据此判断用户曾经访问过的网站，造成不必要的损失，因此这些浏览器决定限制 a:visited 的功能， 所以不是代码的问题，而是浏览器方面的限制。
用下划线来判断某链接是否曾被点击过是失效的，那么我们就只能通过设置颜色来区别了
原文见: https://www.cnblogs.com/phoenixee/p/5960917.html</description></item></channel></rss>