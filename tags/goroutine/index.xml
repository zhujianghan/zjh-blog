<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>goroutine on Fourleaf Blog</title><link>https://zhujianghan.github.io/zjh-blog/tags/goroutine/</link><description>Recent content in goroutine on Fourleaf Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 07 Sep 2022 14:50:29 +0800</lastBuildDate><atom:link href="https://zhujianghan.github.io/zjh-blog/tags/goroutine/index.xml" rel="self" type="application/rss+xml"/><item><title>Goroutine 练习题</title><link>https://zhujianghan.github.io/zjh-blog/posts/interview/goroutine_exercise/</link><pubDate>Wed, 07 Sep 2022 14:50:29 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/interview/goroutine_exercise/</guid><description>题目: 使用 goroutine 和 channel 实现一个计算int64随机数各位数和的程序，例如生成随机数61345，计算其每个位数上的数字之和为19。 开启一个 goroutine 循环生成int64类型的随机数，发送到 jobChan 开启24个 goroutine 从jobChan中取出随机数计算各位数的和，将结果发送到resultChan 主 goroutine 从resultChan取出结果并打印到终端输出 题目来源: 李文周blog
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;runtime&amp;#34; &amp;#34;time&amp;#34; ) func main() { numChan := make(chan int, 24) resChan := make(chan int) for i := 0; i &amp;lt; 24; i++ { go func() { for num := range numChan { if check19(num) { resChan &amp;lt;- num break } } }() } FOR: for { select { case res := &amp;lt;-resChan: fmt.</description></item></channel></rss>