<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on Fourleaf Blog</title><link>https://zhujianghan.github.io/zjh-blog/tags/mysql/</link><description>Recent content in mysql on Fourleaf Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 14 Jun 2023 14:03:32 +0800</lastBuildDate><atom:link href="https://zhujianghan.github.io/zjh-blog/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Sql Count With Condition</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/sql-count-with-condition/</link><pubDate>Wed, 14 Jun 2023 14:03:32 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/sql-count-with-condition/</guid><description>多表 left join 后, 使用 count 查询需要使用 distinct, 如果 count 里需要再次添加条件, 使用 distinct if(&amp;hellip;)
# 不做聚合查询 select company.id as company_id, company.name as company_name, vacancy.id as vacancy_id, vacancy.name as vacancy_name, shop.id as shop_id, shop.shop_name as shop_name, course.id as course_id, course.title as course_name from tb_company company left join tb_position vacancy on vacancy.company_id = company.id left join tb_shop shop on shop.company_id = company.id left join tb_shop_curriculum course on course.shop_id = shop.id where (vacancy.</description></item><item><title>查询字段是否含有中文</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87/</link><pubDate>Sun, 16 Feb 2020 21:20:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87/</guid><description>SELECT col FROM table WHERE length(col)!=char_length(col) 通过查询长度和字符个数是否相等, 相等则不包含中文, 不相等则包含中文
原文见cnblog</description></item><item><title>mysqldump备份时出错</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysqldump%E5%A4%87%E4%BB%BD%E6%97%B6%E5%87%BA%E9%94%99/</link><pubDate>Sun, 15 Jul 2018 23:06:58 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysqldump%E5%A4%87%E4%BB%BD%E6%97%B6%E5%87%BA%E9%94%99/</guid><description>mysqldump备份时出现 couldn&amp;rsquo;t find table 或 Got error: 1049: Unknown database 错误
原因可能是, 在命令行的末尾不能加入 分号
原因是通过DOS运行mysql命令的情况下，相当于没有进入mysql环境，不能再在命令行结束处加分号；，直接属于命令行即可！
原文见: https://blog.csdn.net/song19890528/article/details/9620981</description></item><item><title>数据库事务四大特性</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</link><pubDate>Mon, 08 Jan 2018 12:34:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</guid><description>数据库事务是指作为单个逻辑工作单元执行的一系列操作，这些操作要么全做要么全不做，是一个不可分割的工作单位。
数据库事务的四大特性(简称ACID)是：
(1) 原子性(Atomicity) 事务的原子性指的是，事务中包含的程序作为数据库的逻辑工作单位，它所做的对数据修改操作要么全部执行，要么完全不执行。这种特性称为原子性。 例如银行取款事务分为2个步骤(1)存折减款(2)提取现金。不可能存折减款，却没有提取现金。2个步骤必须同时完成或者都不完成。
(2)一致性(Consistency) 事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。这种特性称为事务的一致性。假如数据库的状态满足所有的完整性约束，就说该数据库是一致的。 例如完整性约束a+b=10，一个事务改变了a，那么b也应随之改变。
(3)分离性(亦称独立性Isolation) 分离性指并发的事务是相互隔离的。即一个事务内部的操作及正在操作的数据必须封锁起来，不被其它企图进行修改的事务看到。假如并发交叉执行的事务没有任何控制，操纵相同的共享对象的多个并发事务的执行可能引起异常情况。
(4)持久性(Durability) 持久性意味着当系统或介质发生故障时，确保已提交事务的更新不能丢失。即一旦一个事务提交，DBMS保证它对数据库中数据的改变应该是永久性的，即对已提交事务的更新能恢复。持久性通过数据库备份和恢复来保证。
原文地址: http://blog.csdn.net/wolenski/article/details/7980521</description></item><item><title>mysql语句分类-DML-DDL-DCL</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB-dml-ddl-dcl/</link><pubDate>Sun, 07 Jan 2018 16:47:33 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB-dml-ddl-dcl/</guid><description>DML（data manipulation language）： 它们是SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这4条命令是用来对数据库里的数据进行操作的语言
DDL（data definition language）： DDL比DML要多，主要的命令有CREATE、ALTER、DROP等，DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用
DCL（Data Control Language）： 是数据库控制功能。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL</description></item><item><title>mysql-group-by-having-查询时别名</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-group-by-having-%E6%9F%A5%E8%AF%A2%E6%97%B6%E5%88%AB%E5%90%8D/</link><pubDate>Fri, 05 Jan 2018 15:03:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-group-by-having-%E6%9F%A5%E8%AF%A2%E6%97%B6%E5%88%AB%E5%90%8D/</guid><description>select deptname,count(*) as &amp;lsquo;专业个数&amp;rsquo; from class group by deptname having 专业个数&amp;gt;1;
having后面的别名不能用引号</description></item><item><title>mysql-数值类型指定宽度</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E5%AE%BD%E5%BA%A6/</link><pubDate>Fri, 05 Jan 2018 11:28:53 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%8C%87%E5%AE%9A%E5%AE%BD%E5%BA%A6/</guid><description>mysql 数值类型关键字后面的括号内指定整数值的显示宽度(例如，INT(4))。 但是这里的(4) 需要和 zerofill 一起用, 否则不会有效果.
当结合可选扩展属性ZEROFILL使用时， 默认补充的空格用零代替。例如，对于声明为INT(5) ZEROFILL的列，值4检索为00004。
如果为一个数值列指定ZEROFILL，MySQL自动为该列添加UNSIGNED属性。</description></item><item><title>mysql-复制表结构</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E5%A4%8D%E5%88%B6%E8%A1%A8%E7%BB%93%E6%9E%84/</link><pubDate>Thu, 04 Jan 2018 23:45:13 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql-%E5%A4%8D%E5%88%B6%E8%A1%A8%E7%BB%93%E6%9E%84/</guid><description>实例: mysql&amp;gt;create database db2018 charset=utf8 collate utf8_general_ci; mysql&amp;gt;create table tb1(id int,name varchar(20)) engine=myisam charset=utf8;
创建一个临时表tbtemp,结构与tb1一致 mysql&amp;gt;create table tbtemp like tb1;</description></item><item><title>MySQL查看当前数据库database【三种方法】</title><link>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93database%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</link><pubDate>Thu, 04 Jan 2018 23:28:49 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/backend/mysql%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93database%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</guid><description>在MySQL下查看当前使用的是哪个数据库，有三种方式
（1）用select database()语句
mysql&amp;gt; select database(); +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+ | database() | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+ | test | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+ 1 row in set (0.00 sec)
从查询结果中可以看出，当前用的是test数据库
（2）用show tables语句，查询出来的结果中，第一行为Tables_in_XXX，这里XXX就
是当前所用的数据库名称。
mysql&amp;gt; show tables; +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ | Tables_in_test | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ | push_test | | ship_order_detail | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ 2 rows in set (0.00 sec)
从查询结果中可以看出，当前用的是test数据库。
（3）用status语句，查询出来的结果中有一行是currrent database: XXX。这里XXX就 是当前所用的数据库名称。
mysql&amp;gt; status; mysql Ver 14.14 Distrib 5.1.60, for pc-linux-gnu (i686) using EditLine wrapper Connection id: 1484237 Current database: test Current user: root@localhost SSL: Not in use</description></item></channel></rss>