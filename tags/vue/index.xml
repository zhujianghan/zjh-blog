<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vue on Fourleaf Blog</title><link>https://zhujianghan.github.io/zjh-blog/tags/vue/</link><description>Recent content in vue on Fourleaf Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 16 Apr 2022 11:29:14 +0800</lastBuildDate><atom:link href="https://zhujianghan.github.io/zjh-blog/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>vue-cli3-0-项目-全局-styl-样式在-App-vue-引入后变量不生效</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-cli3-0-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%B1%80-styl-%E6%A0%B7%E5%BC%8F%E5%9C%A8-app-vue-%E5%BC%95%E5%85%A5%E5%90%8E%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-cli3-0-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%B1%80-styl-%E6%A0%B7%E5%BC%8F%E5%9C%A8-app-vue-%E5%BC%95%E5%85%A5%E5%90%8E%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</guid><description>错误情况 在 assets 下新建 common.styl 样式, 在 App.vue 的 style 标签引入后. 在没有变量的情况下可以全局使用, 有变量时, 则变量不生效
解决办法 不需要在 App.vue 中引用 在 vue.config.js 中引用 module.exports = { css: { loaderOptions: { stylus: { &amp;#39;resolve url&amp;#39;: true, &amp;#39;import&amp;#39;: [ &amp;#39;./src/theme&amp;#39;, &amp;#39;./src/assets/css/public/common&amp;#39; ] } } } }</description></item><item><title>vue-nuxt-中-通过路由来实现导航高亮</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-nuxt-%E4%B8%AD-%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E9%AB%98%E4%BA%AE/</link><pubDate>Sat, 16 Apr 2022 11:29:14 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-nuxt-%E4%B8%AD-%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%BC%E8%88%AA%E9%AB%98%E4%BA%AE/</guid><description>首先在 mounted() 中判断了路由, 实现高亮, 后来发现刷新才有用, 直接 router.push 过去的链接则不生效 监听路由变化, 执行同样的判断 mounted() { this.initHighlight() }, watch: { &amp;#34;$route&amp;#34;() { this.initHighlight() } }, methods: { // 导航高亮 initHighlight() { if (this.$route.name == &amp;#39;route1&amp;#39;) { this.active_id = -2 } else if (this.$route.name == &amp;#39;route2) { this.active_id = -1 } else if (this.$route.name == &amp;#39;route3&amp;#39;) { this.active_id = this.$route.params.navid } else { this.active_id = 0 } } } 参考自: segmentfault</description></item><item><title>vue-awesome-swiper-响应式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-awesome-swiper-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Mon, 01 Jun 2020 09:54:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/vue-awesome-swiper-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>使用 vue-awesome-swiper 版本为 3.1.4 (对应的 swiper 版本为 swiper4)
// 先用原生 js + swiper4 写了一个响应式 demo.html, 每次 resize 重新 new 一个 swiper &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/css/swiper.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/Swiper/3.4.2/js/swiper.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .swiper-container { position: relative; margin: 0 auto; } .swiper-slide { background-color: #eee; text-align: center; } .avatar { width: 120px; border-radius: 50%; /*margin: 0 auto;*/ } p.</description></item><item><title>element-ui-一系列-then,-catch-事件转成-async-await</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E4%B8%80%E7%B3%BB%E5%88%97-then-catch-%E4%BA%8B%E4%BB%B6%E8%BD%AC%E6%88%90-async-await/</link><pubDate>Mon, 25 Nov 2019 10:36:39 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E4%B8%80%E7%B3%BB%E5%88%97-then-catch-%E4%BA%8B%E4%BB%B6%E8%BD%AC%E6%88%90-async-await/</guid><description>// message box async open() { const res = await this.$confirm(&amp;#39;此操作将永久删除该文件, 是否继续?&amp;#39;, &amp;#39;提示&amp;#39;).catch(_ =&amp;gt; { console.log(&amp;#39;已取消, 结束&amp;#39;) }) if (res !== &amp;#39;confirm&amp;#39;) { return } console.log(res, &amp;#34;已确认, 可以next&amp;#34;) } 原文参见 csdn</description></item><item><title>nuxt-部署并使用-nginx-作端口转发</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BD%BF%E7%94%A8-nginx-%E4%BD%9C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</link><pubDate>Thu, 14 Nov 2019 14:51:04 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BD%BF%E7%94%A8-nginx-%E4%BD%9C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</guid><description>代码上传 linux 服务器后, 注意 windows 下开发的 node-sass 包需要重新安装(npm rebuild node-sass), 打包 nuxt 项目 npm run build
pm2 启动 nuxt start, 在项目根目录下 pm2 start node_modules/nuxt/bin/nuxt.js -- start
配置 nginx 文件
// 最简配置 server { listen 80; server_name www.nuxt-project.com; location / { proxy_pass http://127.0.0.1:3000; } } 部署时遇到一个问题, nuxt 代码里的 api 请求地址是本地的, 放到服务器也没改, 造成会返 500
部署也可参照 nuxt 官方部署文档</description></item><item><title>element-ui-响应式布局-span-不能为0</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-span-%E4%B8%8D%E8%83%BD%E4%B8%BA0/</link><pubDate>Wed, 13 Nov 2019 15:33:30 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-span-%E4%B8%8D%E8%83%BD%E4%B8%BA0/</guid><description>&amp;lt;el-col :md=&amp;#34;{span:8}&amp;#34; :sm=&amp;#34;{span:0}&amp;#34; :xs=&amp;#34;{span:0}&amp;#34;&amp;gt; .... &amp;lt;/el-col &amp;gt; 会导致样式混乱, 达不到想要的隐藏效果, 可以用 .hidden-sm-and-down 类来实现</description></item><item><title>nuxt-asyncData-多个接口异步</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-asyncdata-%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5/</link><pubDate>Mon, 04 Nov 2019 13:05:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-asyncdata-%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%BC%82%E6%AD%A5/</guid><description> 接口同步, 耗时长 async asyncData({$axios}){ let res1 = await $axios.get(&amp;#39;...&amp;#39;) let res2 = await $axios.get(&amp;#39;...&amp;#39;) return { res1: res1, res2: res2 } } 接口异步 async asyncData({$axios}){ let [res1, res2] = await Promise.all([ $axios.get(&amp;#39;...&amp;#39;), $axios.get(&amp;#39;...&amp;#39;) ]} return { res1: res1, res2: res2 }</description></item><item><title>nuxt-服务端操作-cookie</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%93%8D%E4%BD%9C-cookie/</link><pubDate>Mon, 14 Oct 2019 14:17:24 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/nuxt-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%93%8D%E4%BD%9C-cookie/</guid><description>cookie-universal-nuxt, 见 npm
You can use cookie-universal-nuxt to set, get and remove cookies in both client and server side nuxt apps</description></item><item><title>element-ui-carousel-响应式(自适应)</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-carousel-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%87%AA%E9%80%82%E5%BA%94/</link><pubDate>Sat, 12 Oct 2019 09:44:38 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-carousel-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%87%AA%E9%80%82%E5%BA%94/</guid><description>&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!-- banner --&amp;gt; &amp;lt;el-carousel trigger=&amp;#34;click&amp;#34; :height=&amp;#34;bannerHeight + &amp;#39;px&amp;#39;&amp;#34;&amp;gt; &amp;lt;el-carousel-item v-for=&amp;#34;item in banners&amp;#34; :key=&amp;#34;item.id&amp;#34;&amp;gt; &amp;lt;img :src=&amp;#34;$store.state.back_url + item.image&amp;#34; alt=&amp;#34;banner&amp;#34; ref=&amp;#34;bannerHeight&amp;#34; width=&amp;#34;100%&amp;#34; @load=&amp;#34;imgLoad&amp;#34; &amp;gt; &amp;lt;/el-carousel-item&amp;gt; &amp;lt;/el-carousel&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { async asyncData({params, $axios}) { const response = await $axios.get(&amp;#39;/phpapi/home-banners&amp;#39;) return {banners: response.data.data} }, data() { return { bannerHeight: &amp;#39;&amp;#39;, } }, methods: { imgLoad() { this.$nextTick(() =&amp;gt; { this.bannerHeight = this.$refs.bannerHeight[0].height }) } }, mounted() { this.imgLoad() window.addEventListener(&amp;#39;resize&amp;#39;, () =&amp;gt; { this.</description></item><item><title>element-ui-响应式</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F/</link><pubDate>Thu, 26 Sep 2019 16:39:12 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/element-ui-%E5%93%8D%E5%BA%94%E5%BC%8F/</guid><description>&amp;lt;el-row :gutter=&amp;#34;10&amp;#34;&amp;gt; &amp;lt;el-col :xs=&amp;#34;{span:24,offset:0}&amp;#34; :sm=&amp;#34;{span:16,offset:4}&amp;#34; :md=&amp;#34;{span:12,offset:6}&amp;#34;&amp;gt; &amp;lt;/el-col&amp;gt; &amp;lt;/el-row&amp;gt; 原文</description></item><item><title>在列表页中删除一项后,-刷新页面</title><link>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%9C%A8%E5%88%97%E8%A1%A8%E9%A1%B5%E4%B8%AD%E5%88%A0%E9%99%A4%E4%B8%80%E9%A1%B9%E5%90%8E-%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</link><pubDate>Mon, 08 Jul 2019 16:59:44 +0800</pubDate><guid>https://zhujianghan.github.io/zjh-blog/posts/frontend/%E5%9C%A8%E5%88%97%E8%A1%A8%E9%A1%B5%E4%B8%AD%E5%88%A0%E9%99%A4%E4%B8%80%E9%A1%B9%E5%90%8E-%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/</guid><description> 用vue-router重新路由到当前页面，页面是不进行刷新的 使用 window.reload()，或者router.go(0), 会造成整个页面刷新, 且存在闪动( 抖动 ) 在删除成功后, 重新获取数据, 从而只让列表部分进行刷新</description></item></channel></rss>